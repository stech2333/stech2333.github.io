<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫</title>
      <link href="/posts/123123.html"/>
      <url>/posts/123123.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP协议（超文本传输协议）"><a href="#HTTP协议（超文本传输协议）" class="headerlink" title="HTTP协议（超文本传输协议）"></a>HTTP协议（超文本传输协议）</h3><p>URL格式 <code>http://host[:port][path]</code></p><ol><li>host:合法的Internet主机域名或者IP地址</li><li>port:端口号，缺省端口（默认端口）为80</li><li>path: 请求资源的路径</li></ol><p>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源</p><ul><li><p><a href="https://www.jianshu.com/p/7c8b4576e4bb">详细内容1</a></p></li><li><p><a href="https://www.cnblogs.com/an-wen/p/11180076.html">详细内容2</a></p></li></ul><h3 id="Robots协议（爬虫协议，机器人协议）"><a href="#Robots协议（爬虫协议，机器人协议）" class="headerlink" title="Robots协议（爬虫协议，机器人协议）"></a>Robots协议（爬虫协议，机器人协议）</h3><p>Robots协议是网站出于安全和隐私考虑，防止搜索引擎和网络爬虫抓取敏感信息而设置的，是一个网站与爬虫间的协议，它用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，一般robots.txt直接存放在网站的根目录下</p><p><a href="https://blog.csdn.net/qq_40491569/article/details/83473703">具体语法</a></p><h3 id="爬虫入门，Requests库的使用方法"><a href="#爬虫入门，Requests库的使用方法" class="headerlink" title="爬虫入门，Requests库的使用方法"></a>爬虫入门，Requests库的使用方法</h3><ul><li><p>Requests库的7个主要方法（分别与HTTP协议的方法对应）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requests.request(method,url,**kwargs)</span><br><span class="line"><span class="comment"># **kwargs: 控制访问的参数，均可做可选项</span></span><br><span class="line">requests.get(url,params = <span class="literal">None</span>, **kwargs)</span><br><span class="line">requests.head(url,**kwargs)</span><br><span class="line">requests.post(url,data = <span class="literal">None</span>,json = <span class="literal">None</span>,**kwargs)</span><br><span class="line">requests.put(url ,data = <span class="literal">None</span>,**kwargs)</span><br><span class="line">requests.patch(url,data = <span class="literal">None</span>,**kwargs)</span><br><span class="line">requests.delete(url,**kwargs)</span><br><span class="line"><span class="comment"># 一共十三个参数，不同方法的参数个数不同</span></span><br></pre></td></tr></table></figure></li><li><p>**kwargs内具体的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">params: 字典或者字节序列，作为参数增加到url中</span><br><span class="line">kv = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,params=kv)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"><span class="comment">#输出为  http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br><span class="line"></span><br><span class="line">data: 字典，字节序列或者文件对象，作为Request的内容</span><br><span class="line">kv = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,data=kv)</span><br><span class="line">body = <span class="string">&#x27;主要内容&#x27;</span></span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,data=body)</span><br><span class="line"></span><br><span class="line">json: JSON格式的数据，作为Request的内容</span><br><span class="line">kv = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,json = kv)</span><br><span class="line"></span><br><span class="line">headers: 字典，HTTP定制头</span><br><span class="line">hd = &#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Chrome/10&#x27;</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,headers=hd)</span><br><span class="line"></span><br><span class="line">cookies:字典或者CookieJar,Request中的cookie</span><br><span class="line">auth:元组，支持HTTP认证功能</span><br><span class="line">    </span><br><span class="line">files：字典类型，传输文件</span><br><span class="line">fs = &#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;data.xls&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,files=fs)</span><br><span class="line"></span><br><span class="line">timeout: 设置超时时间，单位为秒</span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">proxies: 字典类型，设定访问代理服务器，可以增加登陆验证</span><br><span class="line">pxs = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://user:pass@10.10.10.1:1234&#x27;</span></span><br><span class="line">      <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;http://10.10.10.1:4321&#x27;</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,proxies=pxs)</span><br><span class="line"></span><br><span class="line">allow_redirects:<span class="literal">True</span>/<span class="literal">False</span>,默认为<span class="literal">True</span>,重定向开关</span><br><span class="line">stream：<span class="literal">True</span>/<span class="literal">False</span>，默认为<span class="literal">True</span>，获取内容立即下载开关</span><br><span class="line">verify:<span class="literal">True</span>/<span class="literal">False</span>,默认为<span class="literal">True</span>，认证SSl证书开关</span><br><span class="line">cert:本地SSL证书路径</span><br></pre></td></tr></table></figure></li><li><p>爬取网页的通用模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()    <span class="comment">#查看状态码，如果状态码不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生异常！&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(getHTMLText(url))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment">#爬取百度首页的HTML</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python PDB调试</title>
      <link href="/posts/123123.html"/>
      <url>/posts/123123.html</url>
      
        <content type="html"><![CDATA[<h3 id="PDB调试python文件"><a href="#PDB调试python文件" class="headerlink" title="PDB调试python文件"></a>PDB调试python文件</h3><ul><li><strong>非侵入式方法</strong>（不用额外修改源代码，在命令行下直接运行就能调试）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pdb filename.py</span><br></pre></td></tr></table></figure><ul><li><strong>侵入式方法</strong>（需要在被调试的代码中添加一行代码然后再正常运行代码）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.set_trace()</span><br><span class="line"><span class="comment"># 使用pdb.set_trace()设置断点</span></span><br></pre></td></tr></table></figure><p>当你在命令行看到下面这个提示符时，说明已经正确打开了pdb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) </span><br></pre></td></tr></table></figure><p>然后就可以开始输入pdb命令了，下面是pdb的常用命令</p><h2 id="1、查看源代码"><a href="#1、查看源代码" class="headerlink" title="1、查看源代码"></a>1、查看源代码</h2><p>命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令1</span></span><br><span class="line">l</span><br><span class="line"><span class="comment"># 查看当前位置前后11行源代码（多次会翻页）</span></span><br><span class="line"><span class="comment"># 当前位置在代码中会用--&gt;这个符号标出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令2</span></span><br><span class="line">ll</span><br><span class="line"><span class="comment"># 查看当前函数或框架的所有源代码</span></span><br></pre></td></tr></table></figure><h2 id="2、添加断点"><a href="#2、添加断点" class="headerlink" title="2、添加断点"></a>2、添加断点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">b</span><br><span class="line">b lineno</span><br><span class="line">b filename:lineno </span><br><span class="line">b functionname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line"><span class="comment"># filename文件名，断点添加到哪个文件</span></span><br><span class="line"><span class="comment"># lineno断点添加到哪一行</span></span><br><span class="line"><span class="comment"># function：函数名，在该函数执行的第一行设置断点</span></span><br><span class="line"><span class="comment">#说明</span></span><br><span class="line"><span class="comment"># 不带参数表示查看断点设置</span></span><br><span class="line"><span class="comment"># 带参则在指定位置设置一个断点</span></span><br></pre></td></tr></table></figure><h2 id="3、添加临时断点"><a href="#3、添加临时断点" class="headerlink" title="3、添加临时断点"></a>3、添加临时断点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">tbreak</span><br><span class="line">tbreak lineno</span><br><span class="line">tbreak filename:lineno</span><br><span class="line">tbreak functionname</span><br><span class="line"><span class="comment"># 执行一次后时自动删除（这就是它被称为临时断点的原因）</span></span><br></pre></td></tr></table></figure><h2 id="4、清除断点"><a href="#4、清除断点" class="headerlink" title="4、清除断点"></a>4、清除断点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">cl</span><br><span class="line">cl filename:lineno</span><br><span class="line">cl bpnumber [bpnumber ...]</span><br><span class="line"><span class="comment"># bpnumber 断点序号（多个以空格分隔）</span></span><br><span class="line"><span class="comment"># 不带参数用于清除所有断点，会提示确认（包括临时断点）</span></span><br><span class="line"><span class="comment"># 带参数则清除指定文件行或当前文件指定序号的断点</span></span><br></pre></td></tr></table></figure><h2 id="5、打印变量值"><a href="#5、打印变量值" class="headerlink" title="5、打印变量值"></a>5、打印变量值</h2><p>命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p expression <span class="comment"># expression Python表达式</span></span><br></pre></td></tr></table></figure><h2 id="6、逐行调试命令"><a href="#6、逐行调试命令" class="headerlink" title="6、逐行调试命令"></a>6、逐行调试命令</h2><p>包括 s ，n ， r 这3个相似的命令，区别在如何对待函数上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s   <span class="comment"># 执行下一行（能进入函数体）</span></span><br><span class="line">n   <span class="comment"># 执行下一行（不会进入函数体）</span></span><br><span class="line">r   <span class="comment"># 执行下一行（在函数中时会执行到函数返回处）</span></span><br></pre></td></tr></table></figure><h2 id="7、非逐行调试命令"><a href="#7、非逐行调试命令" class="headerlink" title="7、非逐行调试命令"></a>7、非逐行调试命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c              <span class="comment"># 持续执行下去，直到遇到一个断点</span></span><br><span class="line">unt lineno     <span class="comment"># 持续执行直到运行到指定行（或遇到断点）</span></span><br><span class="line">j lineno       <span class="comment"># 直接跳转到指定行（注意，被跳过的代码不执行）</span></span><br></pre></td></tr></table></figure><h2 id="8、查看函数参数"><a href="#8、查看函数参数" class="headerlink" title="8、查看函数参数"></a>8、查看函数参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a       <span class="comment"># 在函数中时打印函数的参数和参数的值</span></span><br></pre></td></tr></table></figure><h2 id="9、打印变量类型"><a href="#9、打印变量类型" class="headerlink" title="9、打印变量类型"></a>9、打印变量类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatis expression   <span class="comment"># 打印表达式的类型，常用来打印变量值</span></span><br></pre></td></tr></table></figure><h2 id="10、启动交互式解释器"><a href="#10、启动交互式解释器" class="headerlink" title="10、启动交互式解释器"></a>10、启动交互式解释器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interact </span><br><span class="line"><span class="comment"># 启动一个python的交互式解释器，使用当前代码的全局命名空间（使用ctrl+d返回pdb）</span></span><br></pre></td></tr></table></figure><h2 id="11、打印堆栈信息"><a href="#11、打印堆栈信息" class="headerlink" title="11、打印堆栈信息"></a>11、打印堆栈信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w   <span class="comment"># 打印堆栈信息，最新的帧在最底部。箭头表示当前帧。</span></span><br></pre></td></tr></table></figure><h2 id="12、退出pdb"><a href="#12、退出pdb" class="headerlink" title="12、退出pdb"></a>12、退出pdb</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q</span><br></pre></td></tr></table></figure><h3 id="13、其他"><a href="#13、其他" class="headerlink" title="13、其他"></a>13、其他</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">还有一种更好的方式, 叫ipdb. 用法和PDB很相似. 不过返回的输出是彩色的.</span><br><span class="line"></span><br><span class="line">ENTER (重复上次命令)</span><br><span class="line">c (继续)</span><br><span class="line">l (查找当前位于哪里)</span><br><span class="line">s (进入子程序,如果当前有一个函数调用，那么 s 会进入被调用的函数体)</span><br><span class="line">n(ext) 让程序运行下一行，如果当前语句有一个函数调用，用 n 是不会进入被调用的函数体中的</span><br><span class="line">r (运行直到子程序结束)</span><br><span class="line">!&lt;python 命令&gt;</span><br><span class="line">h (帮助)</span><br><span class="line">a(rgs) 打印当前函数的参数</span><br><span class="line">j(ump) 让程序跳转到指定的行数</span><br><span class="line">l(ist) 可以列出当前将要运行的代码块</span><br><span class="line">p(rint) 最有用的命令之一，打印某个变量</span><br><span class="line">q(uit) 退出调试</span><br><span class="line">r(eturn) 继续执行，直到函数体返回</span><br><span class="line">In [<span class="number">14</span>]</span><br><span class="line"><span class="comment"># 如发现环境中未安装, 可以运行下方代码来安装ipdb</span></span><br><span class="line"></span><br><span class="line">!pip install ipdb -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my Blog</title>
      <link href="/posts/3e6b40be.html"/>
      <url>/posts/3e6b40be.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="dc9bcb9a32b2b523ba684918d5480b9f34bc42af8839d93ecb752eacdbd7d3db"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> new page </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-函数对象</title>
      <link href="/posts/2ssc667f.html"/>
      <url>/posts/2ssc667f.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>重载函数调用操作符的类，其对象常称为函数对象，函数对象使用重载的（）时，行为类似函数调用，也叫仿函数，函数对象（仿函数）本质是一个类，不是一个函数</p><ul><li>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li><li>函数对象超出普通函数的盖帘，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递（例如容器中排序规则）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myprint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Myprint</span>()</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;count=<span class="number">0</span>;<span class="comment">//初值为0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string st)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          cout&lt;&lt;st&lt;&lt;endl;</span><br><span class="line">          <span class="keyword">this</span>-&gt;count++;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="type">int</span> count;<span class="comment">//记录实例化的函数对象调用多少次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Myadd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> v1+v2;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Myadd md;</span><br><span class="line"><span class="built_in">md</span>(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//输出结果30</span></span><br><span class="line"></span><br><span class="line">Myprint mp;</span><br><span class="line"><span class="built_in">mp</span>(<span class="string">&quot;Hello world!&quot;</span>);<span class="comment">//直接调用仿函数，输出为Hello world</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Myprint &amp;mp,string text)</span><span class="comment">//函数对象作为参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">mp</span>(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>返回bool类型的仿函数称为谓词</p><ul><li>一元谓词 ：如果operator（）接受一个参数，那么叫一元谓词</li><li>二元谓词：如果operator（）接受两个参数，那么叫二元谓词</li></ul><h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><p>STL中内建了一些函数对象：算数仿函数，关系仿函数，逻辑仿函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要使用内建仿函数，必须引入头文件#inlude&lt;functional&gt;</span></span><br><span class="line">negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line"><span class="built_in">n</span>(<span class="number">50</span>);<span class="comment">//取反，一元</span></span><br><span class="line">plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//二元</span></span><br></pre></td></tr></table></figure><p><img src="E:\23\markdown\算术仿函数.png" alt="image-20230726113441654"></p><p><img src="E:\23\markdown\关系仿函数.png" alt="image-20230726113856260"></p><p><img src="E:\23\markdown\逻辑仿函数.png" alt="image-20230726114252228"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-常用算法</title>
      <link href="/posts/653dw2ssa.html"/>
      <url>/posts/653dw2ssa.html</url>
      
        <content type="html"><![CDATA[<p>算法头文件是由&lt;algorithm&gt;&lt;functional&gt;&lt;numeric&gt;组成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">头文件</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print01</span><span class="params">(<span class="type">int</span> val1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;val1&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val1)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          cout&lt;&lt;val1&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for_each()<span class="comment">//遍历容器</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),print01);<span class="comment">//普通函数</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print02</span>());<span class="comment">//仿函数</span></span><br><span class="line"><span class="built_in">transform</span>()<span class="comment">//搬运容器到另外一个容器中</span></span><br><span class="line"><span class="built_in">transform</span>(vstart.<span class="built_in">begin</span>(),vstart.<span class="built_in">end</span>(),vtarget.<span class="built_in">begin</span>(),_Pred);</span><br><span class="line"><span class="comment">//func()用于指定搬运过程中指定的运算</span></span><br></pre></td></tr></table></figure><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),elem);<span class="comment">//查找元素，返回指定元素的迭代器，或者找不到返回结束迭代器</span></span><br><span class="line"><span class="comment">//查找自定义数据类型时，需要重载操作符==</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Person</span>(string name,<span class="type">int</span> age)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">         <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">     &#125;</span><br><span class="line">     string name;</span><br><span class="line">     <span class="type">int</span> age;</span><br><span class="line">     <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Person &amp;p1)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;name == p1.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p1.age)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;name&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">find_if</span>(iterator beg,iterator end,_pred);<span class="comment">//按条件查找元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreateFive</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> val&gt;<span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">GreateFive</span>());</span><br><span class="line"><span class="built_in">adjacent_find</span>(iterator beg,iterator end);<span class="comment">//查找周围相邻重复的元素</span></span><br><span class="line"><span class="built_in">binary_search</span>(iterator beg,iterator end,value);</span><br><span class="line"><span class="comment">//二分查找法,返回true或者false，在无序序列中无法使用</span></span><br><span class="line"><span class="built_in">count</span>(iterator beg,iterator end,value);<span class="comment">//统计元素个数，统计自定义时需要重载==号</span></span><br><span class="line"><span class="built_in">count_if</span>(iterator beg,iterator end,_Pred)<span class="comment">//按条件统计元素个数</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(iterator beg,iterator end,_Pred);<span class="comment">//对容器内元素进行排序</span></span><br><span class="line"><span class="comment">//最后谓词替换成greater&lt;int&gt;()后，变为从大到小排序</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(iterator beg,iterator end);<span class="comment">//洗牌，指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="built_in">merge</span>(beg1,end1,beg2,end2,dest);<span class="comment">//容器元素合并，并存储到另外一容器中(两个容器必须是有序的)</span></span><br><span class="line"><span class="built_in">reverse</span>(terator beg,iterator end);<span class="comment">//反转指定范围的元素</span></span><br></pre></td></tr></table></figure><h3 id="常用拷贝和替换算法"><a href="#常用拷贝和替换算法" class="headerlink" title="常用拷贝和替换算法"></a>常用拷贝和替换算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(iterator beg,iterator end,iterator dest);<span class="comment">//容器内指定范围的元素拷贝到另一容器中</span></span><br><span class="line"><span class="built_in">replace</span>(iterator beg,iterator end,oldvalue,newvalue);<span class="comment">//将容器内指定范围的旧元素修改为新元素</span></span><br><span class="line"><span class="built_in">replace_if</span>(iterator beg,iterator end,_pred,newvalue);</span><br><span class="line"><span class="comment">//容器内指定范围满足条件的元素改为新元素</span></span><br><span class="line"><span class="built_in">swap</span>(container c1,container c2);<span class="comment">//互换两个容器(同种容器)的元素</span></span><br></pre></td></tr></table></figure><h4 id="常用算数生成算法"><a href="#常用算数生成算法" class="headerlink" title="常用算数生成算法"></a>常用算数生成算法</h4><p>属于小型算法，使用时需要包含头文件#include&lt;numeric&gt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">accumulate</span>(iterator beg,iterator end,value);<span class="comment">//计算容器元素累计总和,参数三是起始的累加值</span></span><br><span class="line"><span class="built_in">fill</span>(iterator beg,iterator end,value);<span class="comment">//向容器中填充指定数据</span></span><br><span class="line"><span class="built_in">set_intersection</span>(beg1,end1,beg2,end2,dest);<span class="comment">//求两个集合的交集</span></span><br><span class="line"><span class="built_in">set_union</span>(beg1,end1,beg2,end2,dest);<span class="comment">//求两个集合的并集</span></span><br><span class="line"><span class="built_in">set_difference</span>(beg1,end1,beg2,end2,dest);<span class="comment">//求两个集合的差集（两个集合必须为有序序列）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础</title>
      <link href="/posts/xcvbsd5.html"/>
      <url>/posts/xcvbsd5.html</url>
      
        <content type="html"><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>作用：用于记录程序中不可更改的数据</p><ol><li><p>#define 宏常量： ‘#define 常量名 常量值’</p><p>通常在文件上方定义，表示一个常量</p></li><li><p>const修饰的常量 ‘const 数据类型 常量名 = 常量值’</p><p>通常在变量定义前加关键字const，修饰变量为常量，不可以修改</p></li></ol><p>字符串常量与其他常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name = <span class="string">&quot;Hello world&quot;</span>;<span class="comment">//&quot;Hello world&quot;即为字符串常量</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;字符串常量地址&quot;</span>&lt;&lt;&amp;<span class="string">&quot;Hello world&quot;</span>&lt;&lt;endl;<span class="comment">//字符串常量的地址</span></span><br></pre></td></tr></table></figure><p>const修饰的常量</p><ol><li>const修饰的全局变量</li><li>const修饰的局部变量</li></ol><h3 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h3><p>作用：使用sizeof求出数据类型占用的空间大小</p><p>语法：sizeof( 数据类型 / 类型 )</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a = <span class="number">3.14</span>;<span class="comment">//此时计算机将3.14视为double型，赋值时类型转换为float</span></span><br><span class="line"><span class="type">float</span> a = <span class="number">3.14f</span>; <span class="comment">//此时3.14为float型</span></span><br></pre></td></tr></table></figure><p><img src="E:\23\markdown\char.png" alt="img"></p><p>a的ASCII值为 97，A的ASCII值为65<img src="E:\23\markdown\整数除.png" alt="整数除"></p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>在32位系统中，指针所占的内存空间都为4个字节，在64位系统中，指针所占的内存空间为8个字节</p><h3 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h3><p>空指针：指针变量指向内存中编号为0的空间，用于初始化指针变量。空指针指向的内存不可访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;<span class="comment">//空指针，不可访问</span></span><br><span class="line"><span class="comment">//内存编号0-255位系统占用内存，用户不能使用</span></span><br></pre></td></tr></table></figure><p>野指针：指针变量指向非法的内存空间<br>空指针跟野指针都不是我们申请的空间，因此不要访问。</p><h3 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h3><ol><li><p>const修饰指针   —-常量指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;a;</span><br><span class="line"><span class="comment">//指针的指向可以修改，但是指针指向的值不可以改</span></span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//指针指向的值不可以修改，所以会报错</span></span><br><span class="line">p = &amp;b;<span class="comment">//指针的指向可以修改</span></span><br></pre></td></tr></table></figure></li><li><p>const修饰常量   —–指针常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br><span class="line"><span class="comment">//指针的指向不可以改，但是指针指向的值可以修改</span></span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//指针指向的值可以修改</span></span><br><span class="line">p = &amp;b;<span class="comment">//指针的指向不可以修改，所以会报错</span></span><br></pre></td></tr></table></figure></li><li><p>const既修饰指针，又修饰常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br><span class="line"><span class="comment">//指针的指向和指针指向的值都不可以修改</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="const在函数体修饰结构体指针防止误操作"><a href="#const在函数体修饰结构体指针防止误操作" class="headerlink" title="const在函数体修饰结构体指针防止误操作"></a>const在函数体修饰结构体指针防止误操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstu</span><span class="params">(<span class="type">const</span> stu *a)</span><span class="comment">//将函数中的形参改为指针，可以减少内存空间，不会复制处新的副本</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a-&gt;name = <span class="string">&quot;sisan&quot;</span>;<span class="comment">//此时修改会出现报错，防止误操作更改结构体的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序的四区模型"><a href="#程序的四区模型" class="headerlink" title="程序的四区模型"></a>程序的四区模型</h3><p><img src="E:\23\markdown\四区模型.png"></p><h3 id="程序运行前，未执行该程序时分为两个部分"><a href="#程序运行前，未执行该程序时分为两个部分" class="headerlink" title="程序运行前，未执行该程序时分为两个部分"></a>程序运行前，未执行该程序时分为两个部分</h3><p>代码区：</p><p>​    存放cpu执行的机器指令<br>​    代码区是共享的，共享的目的在于对于频繁执行的程序，只需要在内存中有一份代码即可<br>​    代码区是只读的，目的在于防止程序意外的修改了他的指令</p><p>全局区：</p><p>​    全局变量和静态变量存放于此<br>​    全局区还包括了常量区，字符串常量和其他常量也存放在此<br>​    该区域的数据在程序结束后由操作系统释放<br><img src="E:\23\markdown\全局区.png" alt="全局区"></p><p>栈区：</p><p>堆区：</p><p>​    在c++中，主要利用new在堆区中开辟内存，堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete。利用new创建的数据，会返回该数据对应的类型的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法 new 数据类型</span></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//创建一个int型变量，初值为10</span></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//释放内存p</span></span><br><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//创建一个int型数组，内含10个元素</span></span><br><span class="line"><span class="keyword">delete</span>[] arr;<span class="comment">//释放堆区数组，要加[]才可以</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>作用：给变量起别名</p><p>语法：数据类型  &amp;别名 = 原名</p><p>注意事项：引用必须初始化，引用在初始化后，不可以改变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int &amp;b;错误，必须要初始化</span></span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="type">int</span> c = <span class="number">20</span>;<span class="comment">//引用在初始化之后，不能更改</span></span><br><span class="line">b = c;<span class="comment">//复制操作，而不是更改引用</span></span><br></pre></td></tr></table></figure><h3 id="利用引用做函数参数"><a href="#利用引用做函数参数" class="headerlink" title="利用引用做函数参数"></a>利用引用做函数参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"><span class="comment">//利用引用作为函数形参，新参会修饰实参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用引用做函数返回值"><a href="#利用引用做函数返回值" class="headerlink" title="利用引用做函数返回值"></a>利用引用做函数返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不要返回局部变量的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//栈区，函数调用结束后内存被释放</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> &amp;ret = <span class="built_in">test1</span>();</span><br><span class="line">cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//第一次结果正确，因为编译器会保留一次结果</span></span><br><span class="line">cout&lt;&lt;ret&lt;&lt;endl;<span class="comment">//第二次结果错误，因为a的内存已经被释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的调用可以作为左值</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//全局区，程序运行结束后内存被释放</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> &amp;ret2 = <span class="built_in">test2</span>();</span><br><span class="line">cout&lt;&lt;ret2&lt;&lt;endl;<span class="comment">//结果正确,ret2 = 10</span></span><br><span class="line"><span class="built_in">test2</span>() = <span class="number">1000</span>;<span class="comment">//如果函数的返回值是一个引用，这个函数调用可以作为左值</span></span><br><span class="line">cout&lt;&lt;ret2&lt;&lt;endl;<span class="comment">//ret2 = 1000</span></span><br></pre></td></tr></table></figure><p>引用的本质是一个指针常量，指针的指向不可以更改，内部发现引用后，会自动把引用转换为指针</p><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用场景：用来修饰形参，防止出现误操作</span></span><br><span class="line"><span class="type">int</span> &amp;ref  =<span class="number">10</span>;<span class="comment">//出现报错，引用必须是一块合法的内存空间</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp; ref  = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//加上const之后，编译器将代码修改 int temp = 10;const int &amp;ref = temp;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showvalue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span><span class="comment">//修饰形参，防止修改val的值。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++函数</title>
      <link href="/posts/23sdc.html"/>
      <url>/posts/23sdc.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><ol><li><p>默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法： 返回值类型 函数名(形参 = 默认值)&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>,<span class="type">int</span> c=<span class="number">30</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">//如果传入数据，则使用传入数据，没有数据，则使用默认值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>如果某个位置已经存在默认参数，那么从这个位置往后，从左到右必须有默认值</li><li>函数的声明跟实现只能一个有默认参数，不能同时拥有</li></ol></li><li><p>占位参数</p><p>c++函数值中允许有占位参数，用来占位，调用函数时必须填补该位置</p><p>语法：返回值类型 函数名(数据类型){}</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数占位参数，站位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> cout&lt;&lt;<span class="string">&quot;func&quot;</span>&lt;&lt;endl;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>);<span class="comment">//调用func时，占位参数必须填补</span></span><br></pre></td></tr></table></figure></li><li><p>函数重载</p><p>作用：函数名可以相同，提高复用性</p><p>条件：</p><ol><li><p>在同一个作用域下</p></li><li><p>函数名相同</p></li><li><p>函数参数类型不同 或者个数不同 或者顺序不同</p></li><li><p>函数返回值不可以作为函数重载的条件</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li><p>引用作为重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>;<span class="comment">//可以发生重载</span></span><br><span class="line"><span class="type">int</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(a);<span class="comment">//调用第一个函数</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//调用都二个函数，原因为const int &amp;a = 10;而 int &amp;a = 10;会报错</span></span><br></pre></td></tr></table></figure></li><li><p>函数重载碰到默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时调用func(10)会出现函数二义性，应该尽量避免</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++文件流</title>
      <link href="/posts/32d88gg.html"/>
      <url>/posts/32d88gg.html</url>
      
        <content type="html"><![CDATA[<h2 id="c-文件流"><a href="#c-文件流" class="headerlink" title="c++文件流"></a>c++文件流</h2><p>c++对文件操作需要包括头文件<fstream></p><p>文件类型</p><ul><li>文本文件：文件以文本的ASCII码形式存放在计算机中</li><li>二进制文件：文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂他们</li></ul><p>操作文件的三大类：</p><ol><li>ofstream：写操作</li><li>ifstream：读操作</li><li>fstream： 读写操作</li></ol><ul><li>写文件操作</li></ul><p><img src="E:\23\markdown\文件写入.png" alt="文件"></p><p><img src="E:\23\markdown\打开方式.png" alt="打开方式"></p><ul><li><p>读文件操作</p><p><img src="E:\23\markdown\读文件.png" alt="读文件"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读文件的四种操作</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>,ios::in);</span><br><span class="line"><span class="keyword">if</span>(!ifs.<span class="built_in">is_open</span>())&#123;cout&lt;&lt;<span class="string">&quot;文件读取失败&quot;</span>;&#125;<span class="comment">//判断是否读取成功</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(ifs &gt;&gt; buf)&#123;cout&lt;&lt;buf;&#125;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">while</span>(ifs.<span class="built_in">getline</span>(buf,<span class="built_in">sizeof</span>(buf)))&#123;cout&lt;&lt;buf;&#125;</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">string buf2;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(ifs,buf2))&#123;cout&lt;&lt;buf2;&#125;</span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = ifs.<span class="built_in">get</span>()) != EOF)&#123;cout&lt;&lt;c;&#125;</span><br><span class="line">ifs.<span class="built_in">close</span>();<span class="comment">//关闭文件</span></span><br></pre></td></tr></table></figure><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p>二进制文件写文件操作主要利用流对象调用成员函数write()</p><p>函数原型：ostream&amp; write(const char *buffer ，int len)；</p><p>二进制文件读取利用成员函数read()</p><p>函数原型：istream&amp; read(char *buffer,int len);</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++模板</title>
      <link href="/posts/345sdfsd.html"/>
      <url>/posts/345sdfsd.html</url>
      
        <content type="html"><![CDATA[<h4 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h4><p>STL(标准模板库)，从广义上看可以分为：容器（container）算法（algorithm）迭代器（iterator），容器跟算法之间通过迭代器进行无缝连接，STL几乎所有模版都采用了模版类或者模版函数</p><h4 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h4><p>容器、算法、迭代器、仿函数、适配器(配接器)、空间适配器 </p><p><img src="E:\23\markdown\容器.png" alt="image-20230722172639272"></p><p>迭代器：容器跟算法之间的粘合剂</p><p>提供一种方法，使之能够依次寻访某个容器所含的各个元素，而又无需暴露该容器内部的表达方式。<br>每个容器都有自己专属的迭代器<br>迭代器的作用非常类似于指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果你传递过来一个const类型的容器，那么只能用const_iterator来遍历。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Method</span><span class="params">( <span class="type">const</span> vector&lt; <span class="type">int</span>&gt; vInt)</span> </span></span><br><span class="line"><span class="function"></span>&#123; vector&lt; <span class="type">int</span>&gt;::const_iterator iter; &#125;</span><br><span class="line"><span class="number">1.</span> iterator,const_iterator作用：遍历容器内的元素，并访问这些元素的值。iterator可以改元素值,但const_iterator不可改。跟C的指针有点像</span><br><span class="line">(容器均可以++iter,而vector还可以iter-n, iter+n,n为一整型,iter1-iter2:结果是difference_type类型，表两元素的距离.)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> const_iterator 对象可以用于<span class="type">const</span> vector 或非 <span class="type">const</span> vector,它自身的值可以改(可以指向其他元素),但不能改写其指向的元素值.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="type">const</span> iterator与const_iterator是不一样的：声明一个 <span class="type">const</span> iterator时，必须初始化它。一旦被初始化后，就不能改变它的值,它一旦被初始化后,只能用它来</span><br><span class="line"></span><br><span class="line">改它指的元素,不能使它指向其他元素。(因此<span class="type">const</span> iterator几乎没什么用途)</span><br><span class="line"></span><br><span class="line">例 <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// nums is nonconst</span></span><br><span class="line">     <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;::iterator cit = nums.<span class="built_in">begin</span>();</span><br><span class="line">     *cit = <span class="number">1</span>;               <span class="comment">// ok: cit can change its underlying element</span></span><br><span class="line">     ++cit;                  <span class="comment">// error: can&#x27;t change the value of cit</span></span><br></pre></td></tr></table></figure><ul><li><p>迭代器种类</p><p><img src="E:\23\markdown\迭代器种类.png" alt="image-20230723100259050"></p></li></ul><h3 id="容器vector"><a href="#容器vector" class="headerlink" title="容器vector"></a>容器vector</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; p;<span class="comment">//创建了一个vector容器，数组</span></span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="number">10</span>);<span class="comment">//像容器中插入数据</span></span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">p.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itbegin = p.<span class="built_in">begin</span>();<span class="comment">//起始迭代器，指向容器中的第一个元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itend = p.<span class="built_in">end</span>();<span class="comment">//结束迭代器，指向容器中最后一个元素的下一个元素</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator begin = p.<span class="built_in">begin</span>(); begin != p.<span class="built_in">end</span>(); begin++)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *begin &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line">foreach(itbegin,itend,func); </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      string name;</span><br><span class="line">      <span class="type">int</span> age;</span><br><span class="line">    <span class="built_in">Person</span>(string name,<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt; p2;<span class="comment">//自定义数据类型容器</span></span><br><span class="line"><span class="function">Person <span class="title">name1</span><span class="params">(<span class="string">&quot;张三&quot;</span>,<span class="number">1</span>)</span>,<span class="title">name2</span><span class="params">(<span class="string">&quot;李四&quot;</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">p2.<span class="built_in">push_back</span>(name1);</span><br><span class="line">p2.<span class="built_in">push_back</span>(name2);</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt;::iterator itbegin = p2.<span class="built_in">begin</span>();</span><br><span class="line">cout&lt;&lt;(*itbegin).name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;itbegin-&gt;age;<span class="comment">//类似于指针</span></span><br></pre></td></tr></table></figure><h4 id="容器嵌套容器"><a href="#容器嵌套容器" class="headerlink" title="容器嵌套容器"></a>容器嵌套容器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vector&lt; vector&lt;<span class="type">int</span>&gt;&gt;v;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(i+<span class="number">2</span>);</span><br><span class="line">    v3.<span class="built_in">push_back</span>(i+<span class="number">3</span>);</span><br><span class="line">    v4.<span class="built_in">push_back</span>(i+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">v.<span class="built_in">push_back</span>(v4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(vector&lt; vector&lt;<span class="type">int</span>&gt;&gt;::iterator it = v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator itb = (*it).<span class="built_in">begin</span>();itb!=(*it).<span class="built_in">end</span>();itb++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*itb&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">string构造函数原型</span></span><br><span class="line"><span class="comment">string();默认构造函数，创建一个空字符串</span></span><br><span class="line"><span class="comment">string(const char *s);使用字符串s初始化</span></span><br><span class="line"><span class="comment">string(const string &amp;s);拷贝构造函数，使用一个string类创建另外一个string类</span></span><br><span class="line"><span class="comment">string(int n,char c);使用n个字符c初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>string类赋值操作<img src="E:\23\markdown\string赋值.png" alt="image-20230723160722721"></p></li><li><p>string字符串拼接（在字符串末尾拼接字符串）<img src="E:\23\markdown\string拼接.png" alt="image-20230723160800710"></p></li><li><p>string字符串查找与替换</p><p><img src="E:\23\markdown\查找替换.png" alt="image-20230723163011076">find查找从左往右,rfind()查找从右往左<br>find找到字符串后返回查找到的第一个字符位置（下标），查找不到返回-1<br>replace在替换时，要指定从哪个位置开始，多少个字符，替换成为什么样的字符串</p></li><li><p>字符串比较</p><p><img src="E:\23\markdown\比较.png" alt="image-20230723165330102"></p></li><li><p>字符串字符存取，插入和删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> n);<span class="comment">//通过重载[]方式获取字符</span></span><br><span class="line"><span class="function"><span class="type">char</span>&amp; <span class="title">at</span><span class="params">(<span class="type">int</span> n)</span></span>;<span class="comment">//通过at方法获取</span></span><br><span class="line">string&amp; insert（<span class="type">int</span> pos,<span class="type">const</span> <span class="type">char</span>* s);<span class="comment">//插入字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">const</span> string&amp; str)</span></span>;</span><br><span class="line"><span class="function">string&amp; <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> n,<span class="type">char</span> c)</span></span>;<span class="comment">//从指定位置插入n个字符c</span></span><br><span class="line"><span class="function">string <span class="title">erase</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> n = npos)</span></span>;<span class="comment">//删除从pos开始的n个字符</span></span><br><span class="line"><span class="function">string <span class="title">substr</span><span class="params">(<span class="type">int</span> pos = <span class="number">0</span>,<span class="type">int</span> n = pos)</span></span>;<span class="comment">//返回由pos开始的n个字符组成的字符串</span></span><br><span class="line"><span class="comment">//首先使用find找到某个分隔符例如邮箱中“@”，后使用substr()可以返回前面的用户名</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>功能：vector数据结构跟数组非常相似，也称为单端数组</p><p>区别：数组是静态空间，vector可以动态拓展</p><p><img src="E:\23\markdown\动态扩展.png" alt="image-20230723200703163"></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v;<span class="comment">//默认构造函数，使用模版实现类实现</span></span><br><span class="line"><span class="built_in">vector</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());<span class="comment">//将v[begin(),end()]区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(n,elem);<span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="type">const</span> vector &amp;vec);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><h4 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&amp; <span class="keyword">operator</span>=(<span class="type">const</span> vector &amp;vec);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">assign</span>(beg,end);<span class="comment">//将[begin,end]区间中的数据拷贝赋值给本身</span></span><br><span class="line"><span class="built_in">assign</span>(n,elem);<span class="comment">//将n个elem拷贝赋值给本身</span></span><br></pre></td></tr></table></figure><h4 id="容量和大小"><a href="#容量和大小" class="headerlink" title="容量和大小"></a>容量和大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">capacity</span>();<span class="comment">//容器的容量</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num);<span class="comment">//重新指定容器的长度num，如果容器边长，则以默认值填充新位置</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num,elem);<span class="comment">//重新指定容器的长度num，如果容器边长，则以elem值填充新位置</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除</span></span><br></pre></td></tr></table></figure><h4 id="插入跟删除"><a href="#插入跟删除" class="headerlink" title="插入跟删除"></a>插入跟删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">push_back</span>(ele);<span class="comment">//尾部插入元素ele</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除最后一个元素</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,ele);<span class="comment">//迭代器指向位置pos插入元素ele</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,<span class="type">int</span> count,ele);<span class="comment">//迭代器指向位置插入count个元素ele</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator pos);<span class="comment">//删除迭代器指向的元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator start,const_iterator end);<span class="comment">//删除迭代机器从start到end之间的元素</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//删除容器中所有元素</span></span><br></pre></td></tr></table></figure><h4 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">at</span>(<span class="type">int</span> index);<span class="comment">//返回索引index所指的数据</span></span><br><span class="line">operater[];<span class="comment">//返回索引指向的数据</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回容器中第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回容器中最后一个元素</span></span><br></pre></td></tr></table></figure><h4 id="互换容器（实现两个容器内元素的互换）"><a href="#互换容器（实现两个容器内元素的互换）" class="headerlink" title="互换容器（实现两个容器内元素的互换）"></a>互换容器（实现两个容器内元素的互换）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">swap</span>(vec);<span class="comment">//将vec与本身的元素互换</span></span><br><span class="line"><span class="comment">//实际用途，巧用swap()可以收缩存储空间</span></span><br></pre></td></tr></table></figure><h4 id="预留空间"><a href="#预留空间" class="headerlink" title="预留空间"></a>预留空间</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//减少vector在动态拓展容量时拓展次数</span></span><br><span class="line"><span class="built_in">reserve</span>(<span class="type">int</span> len);<span class="comment">//容器预留len个元素长度，预留位置不初始化，元素不可以访问</span></span><br></pre></td></tr></table></figure><h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><p><img src="E:\23\markdown\deque容器.png" alt="image-20230724125333230"><br><img src="E:\23\markdown\deque内部工作原理.png" alt="image-20230724125558508"></p><p>构造函数，赋值操作，大小操作都与vector类似，但是没有capacity()，因为deque不存在容量<br>插入和删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两端插入删除操作：</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);<span class="comment">//容器尾部插入数据elem</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);<span class="comment">//容器首部插入数据elem</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();<span class="comment">//删除容器第一个数据</span></span><br><span class="line"><span class="comment">//指定位置操作</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,ele);<span class="comment">//迭代器指向位置pos插入元素ele</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,<span class="type">int</span> count,ele);<span class="comment">//迭代器指向位置插入count个元素ele</span></span><br><span class="line"><span class="built_in">insert</span>(pos,beg,end);<span class="comment">//在pos位置插入[beg,end]区间数据，无返回值</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator pos);<span class="comment">//删除迭代器指向的元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator start,const_iterator end);<span class="comment">//删除迭代机器从start到end之间的元素</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//删除容器中所有元素</span></span><br><span class="line"><span class="built_in">at</span>(<span class="type">int</span> index);<span class="comment">//返回索引处index所指数据</span></span><br><span class="line"><span class="keyword">operator</span>[];<span class="comment">//返回索引处数据</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回容器中最后一个数据</span></span><br><span class="line"><span class="comment">//deque排序算法,需要包含algorithm算法库</span></span><br><span class="line"><span class="built_in">sort</span>(iterator begin,iterator end);</span><br></pre></td></tr></table></figure><h3 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h3><p><img src="E:\23\markdown\stack.png" alt="image-20230724180414894"></p><h4 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; stl;<span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">stack</span>(<span class="type">const</span> stack&amp; stk);<span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line">stack &amp;<span class="keyword">operator</span>=(<span class="type">const</span> stack &amp;stk);<span class="comment">//重载=</span></span><br><span class="line"><span class="built_in">push</span>(elem);<span class="comment">//向栈顶添加一个元素</span></span><br><span class="line"><span class="built_in">pop</span>();<span class="comment">//从栈顶移除一个元素</span></span><br><span class="line"><span class="built_in">top</span>();<span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h3><p><img src="E:\23\markdown\queue.png" alt="image-20230724181331393"></p><h4 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口"></a>常用接口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; que;<span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">queue</span>(<span class="type">const</span> queue&amp; que);<span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line">queue &amp;<span class="keyword">operator</span>=(<span class="type">const</span> queue &amp;que);<span class="comment">//重载=</span></span><br><span class="line"><span class="built_in">push</span>(elem);<span class="comment">//向队尾添加元素</span></span><br><span class="line"><span class="built_in">pop</span>();<span class="comment">//从队头移除第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回最后一元素</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回第一个元素</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h3 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h3><p>STL链表是一个双向循环链表</p><p><img src="E:\23\markdown\链表.png" alt="image-20230724204312982"></p><h4 id="常用接口-2"><a href="#常用接口-2" class="headerlink" title="常用接口"></a>常用接口</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">list&lt;T&gt; lst;</span><br><span class="line"><span class="built_in">list</span>(beg,end);</span><br><span class="line"><span class="built_in">list</span>(n,elem);</span><br><span class="line"><span class="built_in">list</span>(<span class="type">const</span> list &amp;lst);</span><br><span class="line"><span class="comment">//赋值与交换</span></span><br><span class="line">list&amp; <span class="keyword">operator</span>=(<span class="type">const</span> list &amp;lst);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">assign</span>(beg,end);<span class="comment">//将[begin,end]区间中的数据拷贝赋值给本身</span></span><br><span class="line"><span class="built_in">assign</span>(n,elem);<span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line"><span class="built_in">swap</span>(lst);<span class="comment">//元素互换</span></span><br><span class="line"><span class="comment">//大小操作</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num);<span class="comment">//重新指定容器的长度num，如果容器边长，则以默认值填充新位置</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num,elem);<span class="comment">//重新指定容器的长度num，如果容器边长，则以elem值填充新位置</span></span><br><span class="line"><span class="comment">//如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);<span class="comment">//容器尾部插入数据elem</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);<span class="comment">//容器首部插入数据elem</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();<span class="comment">//删除容器第一个数据</span></span><br><span class="line"><span class="comment">//指定位置操作</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,ele);<span class="comment">//迭代器指向位置pos插入元素ele</span></span><br><span class="line"><span class="built_in">insert</span>(const_iterator pos,<span class="type">int</span> count,ele);<span class="comment">//迭代器指向位置插入count个元素ele</span></span><br><span class="line"><span class="built_in">insert</span>(pos,beg,end);<span class="comment">//在pos位置插入[beg,end]区间数据，无返回值</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator pos);<span class="comment">//删除迭代器指向的元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator start,const_iterator end);<span class="comment">//删除迭代机器从start到end之间的元素</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//删除容器中所有元素</span></span><br><span class="line"><span class="built_in">remove</span>(elem);<span class="comment">//删除容器中所有与elem相匹配的数据</span></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回最后一个元素</span></span><br><span class="line"><span class="comment">//反转与排序</span></span><br><span class="line"><span class="built_in">reverse</span>();<span class="comment">//反转链表，首尾对调</span></span><br><span class="line"><span class="built_in">sort</span>();<span class="comment">//链表排序,不能使用algorithm提供的sort(begin(),end())函数，因为不支持随机访问迭代器，排序时需要指定排序规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序规则</span></span><br><span class="line">List&lt;<span class="type">int</span>&gt; lst;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">mycompare</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//类似于仿函数，降序就让v1&gt;v2</span></span><br><span class="line">    <span class="keyword">return</span> v1&gt;v2;</span><br><span class="line">&#125;</span><br><span class="line">lst.<span class="built_in">sort</span>(mycompare);<span class="comment">//默认是升序排序，输入排序规则后改为降序</span></span><br></pre></td></tr></table></figure><h3 id="set-multiset容器"><a href="#set-multiset容器" class="headerlink" title="set/multiset容器"></a>set/multiset容器</h3><p>本质：set/multiset容器属于关联式容器，底层结构使用二叉树实现（所有元素在插入时会自动排序）</p><p>区别：</p><ul><li>set不允许容器中有重复的元素(插入数据会返回结果，表示是否插入成功)，multiset允许容器中有重复元素(不会检测插入数据)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">set&lt;T&gt; st;</span><br><span class="line"><span class="built_in">set</span>(<span class="type">const</span> set &amp;st);<span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line">set &amp;<span class="keyword">operator</span>=(<span class="type">const</span> set &amp;st);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="comment">//大小和交换</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素数目</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//容器是否为空</span></span><br><span class="line"><span class="built_in">swap</span>(st);<span class="comment">//交换两个集合容器</span></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos所指的元素，返回下一个元素迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(pos,end);<span class="comment">//删除区间内部的所有元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(elem);</span><br><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="built_in">find</span>(key);<span class="comment">//查找key是否存在，返回该键元素的迭代器；若不存在，则返回set.end()</span></span><br><span class="line"><span class="built_in">count</span>(key);<span class="comment">//统计key元素的个数</span></span><br><span class="line"><span class="comment">//set容器插入数据返回值</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">pair&lt;set&lt;<span class="type">int</span>&gt;::iterator , <span class="type">bool</span>&gt; ret = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(ret.second)&#123;cout&lt;&lt;<span class="string">&quot;第一次插入成功&quot;</span>;&#125;<span class="comment">//第一次插入成功</span></span><br><span class="line">ret = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(ret.second)&#123;cout&lt;&lt;<span class="string">&quot;第二次插入成功&quot;</span>;&#125;<span class="comment">//第二次会表示插入失败</span></span><br></pre></td></tr></table></figure><h3 id="pair队组创建"><a href="#pair队组创建" class="headerlink" title="pair队组创建"></a>pair队组创建</h3><p>功能描述：成对出现的数据，利用队组可以返回两个数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;type,type&gt; <span class="title">p</span> <span class="params">(value1,value2)</span></span>;</span><br><span class="line">pair&lt;type,type&gt; p = <span class="built_in">make_pair</span>(value1,value2);</span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Peter&quot;</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;p.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p.second&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h4 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set容器默认排序为从小到大，利用仿函数，可以改变排序规则（自定义数据必须指定排序规则）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mycompare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1&gt;v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;<span class="type">int</span>,Mycompare()&gt; v;</span><br><span class="line">v.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>,Mycompare&gt;::iterator it = v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)&#123;cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="comment">//输出即为降序排列的set</span></span><br></pre></td></tr></table></figure><h3 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="map/multimap容器"></a>map/multimap容器</h3><p><img src="E:\23\markdown\map.png" alt="image-20230725225027299"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造赋值函数</span></span><br><span class="line">map&lt;T1,T2&gt;mp;<span class="comment">//T1是key值，T2是value值</span></span><br><span class="line"><span class="built_in">map</span>(<span class="type">const</span> map &amp;mp);</span><br><span class="line">map &amp;<span class="keyword">operator</span>=(<span class="type">const</span> map &amp;mp);</span><br><span class="line"><span class="comment">//map&lt;int,int&gt;m;m.insert(pair&lt;int,int&gt;(1,10));//插入</span></span><br><span class="line"><span class="built_in">size</span>();<span class="built_in">empty</span>();<span class="built_in">swap</span>(mp);<span class="comment">//大小交换</span></span><br><span class="line"><span class="comment">//插入跟删除</span></span><br><span class="line"><span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos所指的元素，返回下一个元素迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(pos,end);<span class="comment">//删除区间内部的所有元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">erase</span>(key);</span><br><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="built_in">find</span>(key);<span class="comment">//查找key是否存在，返回该键元素的迭代器；若不存在，则返回map.end()</span></span><br><span class="line"><span class="built_in">count</span>(key);<span class="comment">//统计key元素的个数</span></span><br><span class="line"><span class="comment">//排序规则中的仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mycompare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>：</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1&gt;v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="type">int</span> <span class="type">int</span>, Mycompare()&gt;m;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++模板02</title>
      <link href="/posts/2sd6cx.html"/>
      <url>/posts/2sd6cx.html</url>
      
        <content type="html"><![CDATA[<h2 id="c-模版"><a href="#c-模版" class="headerlink" title="c++模版"></a>c++模版</h2><h3 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h3><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体定制，用一个虚拟的类型来代表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br><span class="line">    <span class="keyword">template</span> ---声明创造模版</span><br><span class="line">    <span class="keyword">typename</span> ---表明其后面符号为一种数据类型，可以使用<span class="keyword">class</span>代替</span><br><span class="line">    T  ---通用的数据类型，名称可以替换，通常为大写字母 </span><br><span class="line">实例：</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap</span><span class="params">(T &amp;a,T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp =a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用模版实现交换</span></span><br><span class="line"><span class="comment">//1.自动类型推导（必须推导出一致的数据类型才可以使用，即a和b数据类型必须一致）</span></span><br><span class="line"><span class="built_in">myswap</span>(a,b);</span><br><span class="line"><span class="comment">//2.自定义类型</span></span><br><span class="line"><span class="built_in">myswap</span>&lt;<span class="type">int</span>&gt;(a,b);</span><br></pre></td></tr></table></figure><p>模版必须要确定处T的数据类型，才可以使用</p><h3 id="调用规则"><a href="#调用规则" class="headerlink" title="调用规则"></a>调用规则</h3><ol><li><p>如果函数模版和普通函数都可以实现，优先调用普通函数</p></li><li><p>可以通过空模版参数列表来强制调用模版函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;cout&lt;&lt;a+b&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;cout&lt;&lt;a+b&lt;&lt;endl;&#125;</span><br><span class="line">myprint&lt;&gt;(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//空模版强制调用</span></span><br></pre></td></tr></table></figure></li><li><p>函数模块也可以发生重载(参数不同发生重载)</p></li><li><p>如果函数模块可以产生更好的匹配，优先调用函数模版</p></li></ol><h3 id="模版局限性"><a href="#模版局限性" class="headerlink" title="模版局限性"></a>模版局限性</h3><p>模版不是万能的，有些特定的数据类型，需要具体化方式做特殊实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> age;</span><br><span class="line">      <span class="built_in">Person</span>(<span class="type">int</span> a)&#123;<span class="keyword">this</span>-&gt;age=a;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(T &amp;a,T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span>,<span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;equal(p1,p2);此时运行代码时出现报错</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(Person &amp;a,Person &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.age==b.age)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">equal</span>(p1,p2);</span><br><span class="line"><span class="comment">//加上具体化实现后，函数正常运行</span></span><br></pre></td></tr></table></figure><h3 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">类名</span><br><span class="line">    </span><br><span class="line">注意事项：</span><br><span class="line">    类模版没有自动类型推导的使用方式（必须自定义）</span><br><span class="line">    类模版在模版参数列表中可以有默认参数</span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">nametype</span>,<span class="keyword">class</span> <span class="title class_">agetype</span> = <span class="type">int</span>)<span class="comment">//可以指定默认参数</span></span><br><span class="line">    <span class="keyword">class</span> Person</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">          nametype name;</span><br><span class="line">          agetype age;</span><br><span class="line">          <span class="built_in">Person</span>(nametype a,agetype b)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">this</span>-&gt;name = a;</span><br><span class="line">              <span class="keyword">this</span>-&gt;age = b;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Person&lt;string ,<span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;傻狗&quot;</span>,<span class="number">999</span>);<span class="comment">//调用类模版创建对象</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;shsgou&quot;</span>,<span class="number">999</span>)</span><span class="comment">//函数调用会报错</span></span></span><br><span class="line"><span class="function">    Person&lt;string&gt;<span class="title">p1</span><span class="params">(<span class="string">&quot;shagou&quot;</span>,<span class="number">999</span>)</span><span class="comment">//调用默认</span></span></span><br><span class="line"><span class="function">    </span></span><br></pre></td></tr></table></figure><h4 id="类模版对象作为函数参数对象"><a href="#类模版对象作为函数参数对象" class="headerlink" title="类模版对象作为函数参数对象"></a>类模版对象作为函数参数对象</h4><ol><li><p>指定传入的类型    —直接显示对象的数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printp1</span><span class="params">(Person&lt;string <span class="type">int</span>&gt;&amp;p)</span><span class="comment">//直接指定传入类型为&lt;string int&gt;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;p1.name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p1.age;</span><br><span class="line">&#125;</span><br><span class="line">Person&lt;string <span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>参数模板化           —将对象中的参数变为模板进行传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> t1,<span class="keyword">class</span> t2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printp2</span><span class="params">(Person&lt;t1,t2&gt;&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;p1.name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p1.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>整个类模板化       —将这个对象类型模版化进行传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printp3</span><span class="params">(T &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout&lt;&lt;p1.name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p1.age;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="类模版与继承"><a href="#类模版与继承" class="headerlink" title="类模版与继承"></a>类模版与继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//class Son:public Base //错误，必须指定父类中的T类型，才能继承给子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> obj; </span><br><span class="line">&#125;；</span><br><span class="line"><span class="comment">//如果想灵活指定父类中的T类型，子类也需要变类模版</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>:<span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line">    T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line">Son s1;<span class="comment">//直接可以创建对象</span></span><br><span class="line">Son2&lt;<span class="type">int</span> <span class="type">char</span>&gt;S2;<span class="comment">//int指定T1，为子类中类型，char为T2，父类中类型</span></span><br></pre></td></tr></table></figure><h3 id="类模版成员函数类外实现"><a href="#类模版成员函数类外实现" class="headerlink" title="类模版成员函数类外实现"></a>类模版成员函数类外实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">t1</span>,<span class="keyword">class</span> <span class="title class_">t2</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      t1 name;</span><br><span class="line">      t2 age;</span><br><span class="line">      <span class="built_in">Person</span>(t1 a,t2 b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数类外实现，成员函数类外实现也一致，在类名后增加模版参数列表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">t1</span>,<span class="keyword">class</span> <span class="title class_">t2</span>&gt;</span><br><span class="line">Person&lt;t1,t2&gt;::<span class="built_in">Person</span>(t1 name,t2 age)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模版分文件编写"><a href="#类模版分文件编写" class="headerlink" title="类模版分文件编写"></a>类模版分文件编写</h4><p>出现问题：</p><ul><li>类模版中成员函数创建时机是在调用阶段，导致份文件编写时链接不到</li></ul><p>解决方法：</p><ul><li><p>第一种解决方法，直接包含源文件#include”Person.cpp”</p></li><li><p>第二种解决方法，将.h和.cpp中的内容合并写到一起，将后缀名改为.hpp，包含文件#include”Person.hpp”</p></li></ul><h4 id="类模版与友元"><a href="#类模版与友元" class="headerlink" title="类模版与友元"></a>类模版与友元</h4><p><img src="E:\23\markdown\类外实现友元函数.png" alt="类外实现友元函数"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++类和对象01</title>
      <link href="/posts/vbdfg65.html"/>
      <url>/posts/vbdfg65.html</url>
      
        <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>c++面向对象的三大特性为：封装，继承，多态</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>作用：</p><ol><li>将属性和行为作为一个整体，表现生活中的事务</li><li>将属性和行为加以权限控制</li></ol><p>语法： class 类名{访问权限：属性  /    行为}；</p><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>三种权限：</p><ol><li>公共权限 public         成员 类内可以访问 类外可以访问</li><li>保护权限 protected   成员 类内可以访问 类外不可以访问 儿子可以访问父亲的保护内容</li><li>私有权限 private       成员 类内可以访问 类外不可以访问 儿子不可以访问父亲的私有内容</li></ol><p>class默认权限是private，struct默认权限是public</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;<span class="comment">//默认权限是public</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;<span class="comment">//默认权限是private</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将类的属性一般设置为private，设置接口调用</p><h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><p>对象的初始化和清理是两个非常重要的安全问题，一个对象或者变量没有初始状态，直接使用后果未知，使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题。</p><p>c++利用构造和析构函数来解决上述问题，这两个函数会被编译器自动调用，完成对象初始化和清理工作。如果我们不提供构造和析构函数，编译器会提供，编译器提供的构造函数和析构函数是空实现。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>主要用于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用</p><p>语法： 类名(){};</p><ol><li>没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时会自动调用构造函数，无需手动且只会调用一次</li></ol><p>分类</p><ol><li><p>按照参数分类     无参构造（默认构造函数） 和 有参构造</p></li><li><p>按照类型分类     普通构造函数 拷贝构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span>:</span><br><span class="line">         <span class="built_in">person</span>()&#123;&#125;<span class="comment">//无参构造</span></span><br><span class="line">         <span class="built_in">person</span>(<span class="type">int</span> age)&#123;a = age;&#125;<span class="comment">//普通构造，有参构造</span></span><br><span class="line">         <span class="built_in">person</span>(<span class="type">const</span> person &amp;nb)&#123;a = nb.a;&#125;<span class="comment">//拷贝构造函数</span></span><br><span class="line">       <span class="keyword">private</span>:</span><br><span class="line">         <span class="type">int</span> a;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//调用构造函数</span></span><br><span class="line">   <span class="comment">//括号法</span></span><br><span class="line">   person p1;<span class="comment">//调用默认构造函数</span></span><br><span class="line">   <span class="function">person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//有参构造函数</span></span><br><span class="line">   <span class="function">person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数</span></span><br><span class="line">   <span class="comment">//注意：在调用默认构造函数时，不要加括号。</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//显示法</span></span><br><span class="line">   person p1;</span><br><span class="line">   person p2 = <span class="built_in">person</span>(<span class="number">10</span>);<span class="comment">//有参构造</span></span><br><span class="line">   person p3 = <span class="built_in">person</span>(p2);<span class="comment">//拷贝构造</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">person</span>(<span class="number">10</span>);<span class="comment">//匿名对象，特点：当前行执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line">   <span class="comment">/*注意：</span></span><br><span class="line"><span class="comment">   不要利用拷贝构造函数初始化匿名对象，编译器会认为 person(p3) === person p3;触发重定义</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="built_in">person</span>(p3);<span class="comment">//错误</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//隐式转换法</span></span><br><span class="line">   person p4 = <span class="number">10</span>;<span class="comment">//相当于写了 person p4 = person(10);</span></span><br><span class="line">person p5 = p4;<span class="comment">//相当于写了 person p5 = person(4);</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p>浅拷贝：简单的赋值拷贝操作</p><p><img src="E:\23\markdown\深拷贝.png" alt="深拷贝"></p><p><img src="E:\23\markdown\浅拷贝.png" alt="浅拷贝"></p></li></ol><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>主要用于对象销毁前系统自动调用，执行一些清理工作</p><p><img src="E:\23\markdown\析构.png" alt="析构"></p><p>语法：~类名(){}</p><ol><li>没有返回值也不写void</li><li>函数名称与类名相同，在名称前加上符号 ~</li><li>构造函数不能有参数，不可以发生重载</li><li>程序在对象销毁前会主动调用析构函数，无需手动且只会调用一次</li></ol><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>c++提供了初始化列表语法，用来初始化属性</p><p>语法：构造函数():属性1（值1），属性2（值2）…{}</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">person</span>():<span class="built_in">m_a</span>(<span class="number">10</span>),<span class="built_in">m_b</span>(<span class="number">20</span>),<span class="built_in">m_c</span>(<span class="number">30</span>)&#123;&#125;</span><br><span class="line">      <span class="built_in">person</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b),<span class="built_in">m_c</span>(c)&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> m_a;</span><br><span class="line">      <span class="type">int</span> m_b;</span><br><span class="line">      <span class="type">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line">person p1;<span class="comment">//初值为10,20,30</span></span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;<span class="comment">//初值为1，2,3</span></span><br></pre></td></tr></table></figure><h3 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      string name;</span><br><span class="line">      phone phone1;<span class="comment">//手机的一个对象作为person类的一个成员</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*当其他类对象作为本类成员，构造时候有限构造类对象，再构造自身(先构造phone，然后构造person)，析构顺序跟构造顺序相反</span></span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员变量</p><ol><li><p>所有对象共享同一份数据,不属于某个对象上</p></li><li><p>在编译阶段分配内存（存储在全局区）</p></li><li><p>类内声明，类外初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">static</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">static</span> <span class="type">int</span> num;<span class="comment">//静态成员变量也存在权限，num在类外不可访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::age = <span class="number">100</span>;<span class="comment">//在类外进行初始化</span></span><br><span class="line"><span class="type">int</span> Person::num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//静态成员的两种访问方式</span></span><br><span class="line"><span class="comment">//1.通过对象进行访问</span></span><br><span class="line">Person zhansan;</span><br><span class="line">cout&lt;&lt;zhansan.age&lt;&lt;end;</span><br><span class="line"><span class="comment">//2.通过类名进行访问</span></span><br><span class="line">cout&lt;&lt;Person::age&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol><p>静态成员函数</p><ol><li>所有对象共享一个函数</li><li>静态成员函数只能访问静态成员变量，不可以访问非静态成员变量</li><li>静态成员函数能通过对象跟类名进行访问 </li></ol><p>成员变量和成员函数分开存储，只有非静态成员变量属于类的对象上，其他的均只存储一份，空对象会占用内存1字节，这是c++编译器为了区分空对象占内存的位置，给分配的一个字节空间，每个空对象有一个独一无二的内存地址</p><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p><img src="E:\23\markdown\this指针.png" alt="img1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> age;</span><br><span class="line">      <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;age = age;<span class="comment">//解决名称冲突</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function">Person&amp; <span class="title">Personaddage</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p-&gt;age;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//返回对象本身，可以实现P2.Personaddage(p1).Personaddage(p1)...,链式编程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h3><p>常函数：</p><ol><li><p>成员函数后加const后我们称这个函数是常函数</p></li><li><p>常函数不可以修改成员属性</p></li><li><p>成员属性声明时加关键字mutable后，在常函数中依然可以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> age;</span><br><span class="line">      <span class="keyword">mutable</span> <span class="type">int</span> num;<span class="comment">//常函数可以修改</span></span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">      <span class="comment">//常函数</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>-&gt;age = <span class="number">100</span>;<span class="comment">//报错，不可以修改成员属性</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> Person a;<span class="comment">//在对象前加mutable，变为常对象，其中num可以修改，age不可以修改</span></span><br></pre></td></tr></table></figure></li></ol><p>常对象</p><ol><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++类和对象02</title>
      <link href="/posts/vbnr434.html"/>
      <url>/posts/vbnr434.html</url>
      
        <content type="html"><![CDATA[<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>友元的目的就是让一个函数或者类访问另外一个类中的私有成员</p><p>关键字： friend</p><p>友元的三种实现</p><ol><li><p>全局函数做友元</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">showname</span><span class="params">(Person &amp;per)</span></span>;</span><br><span class="line">    <span class="comment">//在类内添加友元函数声明，就可以访问到私有变量name;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showname</span><span class="params">(Person &amp;per)</span></span>&#123;cout&lt;&lt;per-&gt;name&lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure></li><li><p>类做友元</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">human</span>;</span><br><span class="line">    <span class="comment">//在类内添加友元类声明，就可以访问到私有变量name;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">humman</span></span><br><span class="line">&#123;</span><br><span class="line">    pass;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>成员函数做友元</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">humman::visit</span><span class="params">(Person &amp;per)</span></span>;</span><br><span class="line">    <span class="comment">//在类内添加友元成员函数声明，就可以访问到私有变量name;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">humman</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(Person &amp;per)</span></span>&#123;cout&lt;&lt;per-&gt;name;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>对已有的运算符重新进行定义，赋予其另外一种功能，以适应不同的数据类型</p><ol><li><p>加号运算符重载(运算符重载可以进行函数重载)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fushu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> a;</span><br><span class="line">      <span class="type">int</span> b;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;cout&lt;&lt;a&lt;&lt;<span class="string">&quot; + &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;i&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">      Fushu <span class="keyword">operator</span>+(Fushu &amp;f2)</span><br><span class="line">      <span class="comment">//成员函数重载，可以实现Fushu f3 = f2+f1;</span></span><br><span class="line">      &#123;</span><br><span class="line">          Fushu temp;</span><br><span class="line">      temp.a = <span class="keyword">this</span>.a+f2.a;</span><br><span class="line">      temp.b = <span class="keyword">this</span>.b+f2.b;</span><br><span class="line">      <span class="keyword">return</span> temp;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Fushu <span class="keyword">operator</span>+(Fushu &amp;f1,Fushu &amp;f2)</span><br><span class="line">&#123;</span><br><span class="line">    Fushu temp;</span><br><span class="line">    temp.a = f1.a+f2.a;</span><br><span class="line">    temp.b = f1.b+f2.b;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局函数重载，也可以实现Fushu f3 = f2+f1;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>左移运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fushu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> a;</span><br><span class="line">      <span class="type">int</span> b;</span><br><span class="line">&#125;;<span class="comment">//不利用成员函数重载左移运算符</span></span><br><span class="line">    ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,<span class="type">const</span> Fushu &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;p.a&lt;&lt;<span class="string">&quot; + &quot;</span>&lt;&lt;p.b&lt;&lt;<span class="string">&quot;i&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//此时可以直接使用cout&lt;&lt;f1&lt;&lt;endl;输出</span></span><br></pre></td></tr></table></figure><p>左移运算符配合重载，友元可以输出自定义内容</p><ol start="3"><li><p>递增运算符重载</p><p><img src="E:\23\markdown\前置++.png" alt="前置递增"></p><p>后置++中函数中的参数为占位参数，用于区分前后置（此处只能使用int）<img src="E:\23\markdown\后置++.png" alt="后置递增"></p></li><li><p>赋值运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)&#123;m_age = <span class="keyword">new</span> <span class="built_in">int</span>(age);<span class="comment">/*将年龄数据开辟到堆区*/</span>&#125;</span><br><span class="line">    Person &amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_age != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_age;</span><br><span class="line">            m_age = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_age);<span class="comment">//深拷贝，解决浅拷贝问题</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_age!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_age;</span><br><span class="line">            m_age = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> *m_age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关系运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)&#123;m_age = age;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(Person &amp;p)<span class="comment">//其余关系运算符思路相同</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> m_age &gt; p.m_age ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> m_age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数调用符重载</p><p>函数调用符（）也可以重载，由于重载后使用的方式非常像函数的调用，因此称为仿函数，仿函数没有固定写法，非常灵活</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myprint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span></span>&#123;cout&lt;&lt;text&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myadd</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="keyword">return</span> a+b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">myprint myfun;</span><br><span class="line"><span class="built_in">myfun</span>(<span class="string">&quot;Hello,world!&quot;</span>);<span class="comment">//输出Hello,world!</span></span><br><span class="line"><span class="built_in">myadd</span>()(<span class="number">3</span>,<span class="number">5</span>);<span class="comment">//前面的myadd()为创建一个匿名对象</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++类和对象03</title>
      <link href="/posts/fgfb3ws.html"/>
      <url>/posts/fgfb3ws.html</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是面向对象的三大特性之一，可以减少重复代码</p><p>基本语法:  class 子类(派生类)：继承方式   父类(基类）</p><p>派生类中的成员，分为两大部分：一部分是从基类继承过来的（公共的），一部分是自己增加的（独有的）成员，从基类继承过来的表现其共性，二新增成员表现其个性</p><p>继承的三种方式</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="E:\23\markdown\继承方式.png" alt="继承方式"></p><p>继承中构造与析构的顺序如下：<br>先构造父类，再构造子类，析构的顺序跟构造顺序完全相反</p><h3 id="继承中同名成员的处理"><a href="#继承中同名成员的处理" class="headerlink" title="继承中同名成员的处理"></a>继承中同名成员的处理</h3><ul><li><p>访问子类同名成员 直接访问即可</p></li><li><p>访问子类中继承的父类的同名成员，需要添加作用域</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> m_a;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;cout&lt;&lt;m_a&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">int</span> m_a;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;cout&lt;&lt;m_a&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">son s;<span class="comment">//实例化一个对象</span></span><br><span class="line">cout&lt;&lt;s.m_a&lt;&lt;endl;<span class="comment">//直接访问成员属性即可</span></span><br><span class="line">cout&lt;&lt;s.Base::m_a&lt;&lt;endl;<span class="comment">//需要声明成员属性的作用域</span></span><br><span class="line"><span class="comment">//同名函数的处理与同名成员属性相同</span></span><br><span class="line">s.<span class="built_in">show</span>();<span class="comment">//直接访问</span></span><br><span class="line">s.Base::<span class="built_in">show</span>();<span class="comment">//声明作用域</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>如果子类中出现跟父类同名的成员函数，子类的同名成员会隐藏掉父类中的所有同名函数（重载），如果想访问弗雷中被隐藏的同名成员函数，需要增加作用域</p></li><li><p>继承同名静态成员处理方式与其他同名成员处理方式一致</p><p><img src="E:\23\markdown\继承.png" alt="png"></p></li></ul></li></ul><h3 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h3><p>c++允许一个类继承多个类</p><p>语法：class 子类：继承方式 父类1，继承方式 父类2，继承方式 父类3{}</p><p>当多个父类中出现同名成员，需要访问时需要加作用域区分</p><p><img src="E:\23\markdown\菱形继承.png" alt="菱形继承"></p><p>菱形继承中，两个父类拥有相同的数据，需要加以作用域进行区分，菱形继承导致继承的数据有两份，会造成空间浪费，利用虚继承，可以解决菱形继承的问题</p><p>语法：继承之前加上关键字 virtual 变成虚继承，最上面的父类称为虚基类</p><p><img src="E:\23\markdown\虚基类.png" alt="jpg"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是c++面向对象的三大特性之一</p><p>多态分为两类：</p><ul><li><p>静态多态：函数重载 和 运算符重载属于静态多态，复用函数名</p></li><li><p>动态多态：派生类和虚函数实现运行时多态</p></li></ul><p>区别：</p><ul><li>静态多态的函数地址早绑定 -编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 -运行阶段确定函数地址<br><img src="E:\23\markdown\多态3.png" alt="多态1"><br><img src="E:\23\markdown\多态2.png" alt="多态2"><br><img src="E:\23\markdown\多态1.png" alt="多态3"></li></ul><p>重写</p><p><img src="E:\23\markdown\重写.png" alt="重写"></p><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><p>在多态中，通常父类中的虚函数的实现都是毫无意义的，主要是对子类中重写的内容，因此可以将虚函数改为纯虚函数</p><p>语法：virtual 返回值类型 函数名 （参数列表） = 0；</p><p>当类中有了纯虚函数，这个类也叫做抽象类</p><p>抽象类特点</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">caculater</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">add</span>:<span class="keyword">public</span> caculater</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> num1+num2;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caculater *abc = <span class="keyword">new</span> add;<span class="comment">//子类对象赋给父类指针</span></span><br><span class="line">abc.<span class="built_in">getresult</span>(<span class="number">10</span>,<span class="number">10</span>);<span class="comment">//调用子类中重写的getresult()函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="虚析构与纯虚析构"><a href="#虚析构与纯虚析构" class="headerlink" title="虚析构与纯虚析构"></a>虚析构与纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类中的析构函数</p><p>解决方法：将父类中的析构函数改为虚析构或者纯虚析构</p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>区别：如果是纯虚析构，该类属于抽象类，无法实例化对象</p><p>语法：</p><ul><li>虚析构：virtual ~类名（）{}</li><li>纯虚析构：virtual <del>类名（）=0；类名：：</del>类名（）{}</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>()<span class="comment">//虚析构</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Animal指针调用析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//利用虚析构可以解决父类指针释放子类对象时不干净问题</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//virtual ~Animal() = 0;纯虚析构,在一个类中，虚析构与纯虚析构只能出现一个</span></span><br><span class="line">&#125;</span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line"><span class="comment">//纯虚析构需要声明也需要具体实现</span></span><br><span class="line">&#123;</span><br><span class="line">    out&lt;&lt;<span class="string">&quot;Animal指针调用析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM对象</title>
      <link href="/posts/sisnf34.html"/>
      <url>/posts/sisnf34.html</url>
      
        <content type="html"><![CDATA[<p><img src="E:\23\字节训练营前端基础\BOM.png" alt="image-20240207170616379"></p><p>就是Window对象，最大的对象</p><ol><li>window的screen对象</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html与css</title>
      <link href="/posts/65756dfz.html"/>
      <url>/posts/65756dfz.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-超文本标记语言"><a href="#HTML-超文本标记语言" class="headerlink" title="HTML  超文本标记语言"></a>HTML  超文本标记语言</h2><p>[toc]</p><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档声明，用于告知游览器网页版本html，html5等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">html标签，网页的根标签，一个网页只有一个根标签，且网页所有内容都应写在根标签内</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&#x27;UTF-8&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">head标签，该标签中的内容不会在网页中直接显示，用于帮助游览器解析页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">title网页的标题标签，默认显示在游览器的标题栏中</span></span><br><span class="line"><span class="comment">搜索引擎检索页面时，会首先检索title标签中的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">body标签用于设置网页的主体内容，网页中所有可见的内容，都应在body中编写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">标题标签，一共有六级标签,其中h1最重要，仅次于title，会影响到搜索引擎的排名，一个页面只能写一个h1</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                段落标签，段与段之间会有间距</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--br标签可以表示一个换行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span><span class="comment">&lt;!--hr标签生成一条水平线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h4><p>在html中，一些如&lt;  &gt;这中特殊字符不能直接使用，需要使用一些特殊的符号来表示这些特殊字符，这些特殊符号称为转义字符串（实体）<a href="https://www.w3school.com.cn/tags/html_ref_entities.html">转义字符串集</a>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>             &lt;</span><br><span class="line"><span class="symbol">&amp;gt;</span>             &gt;</span><br><span class="line"><span class="symbol">&amp;nbsp;</span>          空格</span><br></pre></td></tr></table></figure><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;图片的相对路径&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;图片的描述&quot;</span> <span class="attr">width</span> = <span class="string">&quot;宽度&quot;</span>  <span class="attr">height</span> = <span class="string">&quot;长度&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在图片不能显示时，对图片的描述，搜索引擎通过alt属性对图片进行收录,若不写alt属性，则不对图片进行收录。</span></span><br><span class="line"><span class="comment">如果只改变长度或者宽度，宽度，长度也相应变化</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span> = <span class="string">&quot;路径&quot;</span> <span class="attr">contorls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> = <span class="string">&quot;路径&quot;</span> <span class="attr">contorls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="id属性，class属性"><a href="#id属性，class属性" class="headerlink" title="id属性，class属性"></a>id属性，class属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在html中，每一个标签都可以设置id，该属性可以作为标签的唯一标识，id属性在同一个页面中不能有重复</span><br><span class="line">可以为标签设置class属性，class属性与id相似，但是一个页面内可以重复,拥有相同class属性的元素称为一组元素</span><br><span class="line">同时，一个元素可以设置多个class值，多个值之间用空格隔开</span><br></pre></td></tr></table></figure><h4 id="网页字符集，关键字，描述-请求的重定向"><a href="#网页字符集，关键字，描述-请求的重定向" class="headerlink" title="网页字符集，关键字，描述,请求的重定向"></a>网页字符集，关键字，描述,请求的重定向</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">name</span> = <span class="string">&quot;keywords&quot;</span> <span class="attr">content</span> = <span class="string">&quot;关键字&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">&quot;description&quot;</span> <span class="attr">content</span> = <span class="string">&quot;描述(句子或词)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span> = <span class="string">&quot;秒数;url = 目标路径&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span> = <span class="string">&quot;网页路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一般不使用，引入一个外部的页面，有width，height，name的属性--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;网页链接（相对路径或者绝对路径）&quot;</span>&gt;</span>网页名称<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">target属性可以用来指定打开连接的位置</span></span><br><span class="line"><span class="comment">可选值：</span></span><br><span class="line"><span class="comment">        _self:在当前窗口打开链接（默认值）</span></span><br><span class="line"><span class="comment">        _blank:在新窗口打开链接</span></span><br><span class="line"><span class="comment">        可设置一个内联框架name的属性值，链接将会在内联框架中打开。target = &quot;内联框架name值&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;#&quot;，则回到当前页面的顶部--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;#id(#后面加id属性)&quot;，则可以回到该页面该id属性标签的位置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;mailto:邮箱地址&quot;，则打开默认电子邮件客户端，并设置收件人为设置的邮箱地址--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    内联样式表</span></span><br><span class="line"><span class="comment">css样式可以编写到元素的style属性当中,将样式直接编写到style属性中，这种样式我们称为内联样式，内联样式只对当前元素内容起作用，不便于后期维护，不方便重复</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">如：</span><br><span class="line">&lt;<span class="selector-tag">p</span> style = &quot;<span class="attribute">color</span>:red;<span class="attribute">font-size</span>:<span class="number">40px</span>;&quot;&gt;&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内部样式表</span></span><br><span class="line"><span class="comment">    可以将css样式编写到head中的style标签中</span></span><br><span class="line"><span class="comment">将样式表编写到head中的style标签内，然后通过css选择器选中指定元素，将这些元素一起设置样式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">如：</span><br><span class="line">&lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    sont-size:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">外部样式表</span></span><br><span class="line"><span class="comment">还可将样式表编写在外部的css文件中，然后通过link标签来将外部的css文件引入到当前页面中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href = &quot;css文件名&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="CSS注释，选择器与声明块"><a href="#CSS注释，选择器与声明块" class="headerlink" title="CSS注释，选择器与声明块"></a>CSS注释，选择器与声明块</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择器：通过选择器可以选中页面中指定的元素，</span></span><br><span class="line"><span class="comment">并将声明块中的样式应用在选择器对应的元素上</span></span><br><span class="line"><span class="comment">声明块：紧跟在选择器后面，使用一对&#123;&#125;括起来</span></span><br><span class="line"><span class="comment">实际上声明块就是一组组名值对结构，</span></span><br><span class="line"><span class="comment">每个声明之间用;隔开，名和值之间用：连接</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="块元素与内联元素"><a href="#块元素与内联元素" class="headerlink" title="块元素与内联元素"></a>块元素与内联元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">块元素，独占一整行，无任何语义，且块元素不会对里面的元素设置任何默认样式，主要用来对页面进行布局。</span></span><br><span class="line"><span class="comment">常见块元素：p h div</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sapn</span>&gt;</span>内联元素<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">span也不存在任何语义，主要用来选中文本，为文本设置样式</span></span><br><span class="line"><span class="comment">行内元素：只占自身大小的元素，不会占用一行</span></span><br><span class="line"><span class="comment">常见内联元素： a img iframe span</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">一般用块元素包含内联元素，而不使用内联元素包含块元素，a元素可以包含除自身外所有元素，p元素不能包含任何块元素</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="元素之间的关系"><a href="#元素之间的关系" class="headerlink" title="元素之间的关系"></a>元素之间的关系</h4><p>父元素：直接包含子元素的元素</p><p>子元素：直接被父元素包含的元素</p><p>祖先元素：直接或者间接包含后代元素的元素，父元素也是祖先元素</p><p>后代元素：直接或间接被祖先元素包含的元素，子元素也是后代元素</p><p>兄弟元素：拥有相同父元素的元素叫兄弟元素</p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.元素选择器</span><br><span class="line">作用: 通过元素选择器可以选择页面中的所有指定元素</span><br><span class="line">语法：标签名&#123;&#125;</span><br><span class="line">如：</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;<span class="comment">/*选中所有的p元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span><span class="selector-class">.id</span>选择器</span><br><span class="line">作用：通过元素的id属性值选中唯一的一个元素</span><br><span class="line">语法：<span class="selector-id">#id</span>属性值&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span><span class="selector-class">.class</span>选择器<span class="comment">/*类选择器*/</span></span><br><span class="line">作用：通过元素的class属性值选中一组元素</span><br><span class="line">语法：<span class="selector-class">.class</span>属性值&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.选择器分组</span><br><span class="line">作用：通过选择器分组可以同时选中多个选择器对应的元素</span><br><span class="line">语法：选择器<span class="number">1</span>，选择器<span class="number">2</span>，选择器<span class="number">3</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.通配选择器</span><br><span class="line">作用：选中页面内所有的元素，通过通配选择器可以清除游览器默认值</span><br><span class="line">语法：*&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.复合选择器<span class="comment">/*交集选择器*/</span></span><br><span class="line">作用：可以选中同时满足多个选择器的元素</span><br><span class="line">语法：选择器<span class="number">1</span>选择器<span class="number">2</span>选择器<span class="number">3</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.后代元素选择器</span><br><span class="line">作用：选定指定元素的指定后代元素</span><br><span class="line">语法：祖先元素 后代元素&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.子元素选择器</span><br><span class="line">作用：选中指定父元素的指定子元素</span><br><span class="line">语法：父元素&gt;子元素&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="number">9</span>.伪类元素选择器</span><br><span class="line">伪类用来表示元素的一种特殊状态，如访问过的超链接与普通的链接，获取焦点的文本框</span><br><span class="line">当需要为处在这些特殊状态下的元素设置样式时，就可以使用伪类</span><br><span class="line"><span class="selector-pseudo">:link</span>  正常链接（未访问未点击）</span><br><span class="line"><span class="selector-pseudo">:visited</span> 表示访问过的链接<span class="comment">/*由于隐私问题，:visited伪类只能设置字体颜色*/</span></span><br><span class="line"><span class="selector-pseudo">:active</span> 超链接被点击时状态</span><br><span class="line"><span class="selector-pseudo">:hover</span> 鼠标移入时状态</span><br><span class="line"><span class="selector-pseudo">:focus</span> 获取焦点时状态</span><br><span class="line"><span class="selector-pseudo">::selection</span> 选中的文本</span><br><span class="line"><span class="selector-pseudo">:lang</span></span><br><span class="line"><span class="selector-pseudo">:first</span>-child 可以选中第一个子元素（所有子元素的第一个）</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 可以选中最后一个子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span> 可以选中任意位置的子元素，该选择器可以传一个参数，指定要选中第几个子元素</span><br><span class="line">even 表示选中偶数位置的子元素</span><br><span class="line">odd 表示选中奇数位置的子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(even)  <span class="selector-pseudo">:nth-child</span>(odd)</span><br><span class="line"><span class="selector-pseudo">:first</span>-of-type 选中当前类型的子元素中第一个</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span></span><br><span class="line"><span class="selector-pseudo">:nth-of-type</span></span><br><span class="line">如：</span><br><span class="line">&lt;<span class="selector-tag">a</span> href = &quot;http://www.baidu.com<span class="string">&quot;&gt;Baidu&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;input type = &quot;</span>text<span class="string">&quot;&gt;/*创建一个文本输入框*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style type = &quot;</span>text/css<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">a:link&#123;</span></span><br><span class="line"><span class="string">    color:blue;/*设置未访问过的链接为蓝色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:visited&#123;</span></span><br><span class="line"><span class="string">    color:purple;/*设置访问过的链接为紫色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:active&#123;</span></span><br><span class="line"><span class="string">    color:skyblue;/*设置超链接被点击时链接颜色为天蓝色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:hover&#123;</span></span><br><span class="line"><span class="string">    color:green;/*设置鼠标移入时链接颜色为绿色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">input:focus&#123;</span></span><br><span class="line"><span class="string">    background-color:glue;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10. 伪元素选择器</span></span><br><span class="line"><span class="string">使用伪元素来表示元素的一些特殊位置</span></span><br><span class="line"><span class="string">:first-letter 元素的第一列</span></span><br><span class="line"><span class="string">:first-line 元素的第一行</span></span><br><span class="line"><span class="string">:before 元素的最前端部分，一般与content样式一起使用，可以通过content向before和after的位置添加一些东西</span></span><br><span class="line"><span class="string">:after 元素的最后部分</span></span><br><span class="line"><span class="string">p:after&#123;</span></span><br><span class="line"><span class="string">    content:&quot;</span>我会出现在元素的最后端<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    color:skyblue;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11.属性选择器</span></span><br><span class="line"><span class="string">title属性，可以给任何标签指定，当鼠标移入元素上时，会作为文字提示</span></span><br><span class="line"><span class="string">作用：可以根据元素中的属性或属性值来选取指定元素</span></span><br><span class="line"><span class="string">语法：[属性名]  选取含有指定属性的元素</span></span><br><span class="line"><span class="string"> [属性名=&quot;</span>属性值<span class="string">&quot;]   选取含有指定属性值的元素</span></span><br><span class="line"><span class="string">     [属性名^=&quot;</span>属性值<span class="string">&quot;]  选取属性值以指定内容开头的元素</span></span><br><span class="line"><span class="string">     [属性名$=&quot;</span>属性值<span class="string">&quot;]  选取属性值以指定内容结尾的元素</span></span><br><span class="line"><span class="string">     [属性名*=&quot;</span>属性值<span class="string">&quot;]  选取属性值包含指定内容的元素</span></span><br><span class="line"><span class="string">如：</span></span><br><span class="line"><span class="string">p[title = &quot;</span>abcd<span class="string">&quot;]&#123;&#125;</span></span><br><span class="line"><span class="string">&lt;p title = &quot;</span>abcd<span class="string">&quot;&gt;这是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12.兄弟元素选择器</span></span><br><span class="line"><span class="string">1. 后一个兄弟元素选择器</span></span><br><span class="line"><span class="string">作用：可以选中一个元素后面紧挨着的指定的兄弟元素</span></span><br><span class="line"><span class="string">语法：前一个元素 + 后一个元素&#123;&#125;</span></span><br><span class="line"><span class="string">2.所有</span></span><br><span class="line"><span class="string">作用：选中一个元素后所有指定的兄弟元素</span></span><br><span class="line"><span class="string">语法：前一个元素~后边所有&#123;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13.否定伪类</span></span><br><span class="line"><span class="string">作用：可以从已经选中的元素中剔除掉某些元素</span></span><br><span class="line"><span class="string">语法： :not(选择器)</span></span><br></pre></td></tr></table></figure><h4 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h4><p>在CSS中，祖先元素上的样式，会被他的后代元素所继承<br>利用继承，可以将一些基本样式设置给祖先元素，这样所有后代元素将会自动继承这些样式<br>但不是所有的样式都会被继承，比如与背景相关，边框相关，定位相关的样式都不会被继承<br>如果想让子元素继承这些样式，可以使用inherit关键字进行显示继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><p>在CSS中，每一个属性都有初始值，可以使用initial关键字显示重置为初始值，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:initial</span><br></pre></td></tr></table></figure><h4 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h4><p>当使用不同的选择器选中同一元素，并设置同一样式时，会发生冲突，此时样式会表现为优先级高的选择器设置的样式</p><p>优先级规则</p><p>内联样式         优先级 1000</p><p>id选择器          优先级 100</p><p>类和伪类         优先级 10</p><p>元素选择器     优先级 1</p><p>通配选择器     优先级 0</p><p>继承的样式     无优先级</p><p>当选择器包含多种选择器时，需要将多种选择器的优先级相加再进行比较，但是选择器的优先级计算不会超过他的最大数量级，如果选择器的优先级一样，则使用靠后的样式。</p><p>并集选择器的优先级单独运算</p><p>可以在样式的最后加一个!important，则该样式获得最高优先级。</p><p>选择器组合<br><img src="E:\23\字节训练营前端基础\选择器组合.png" alt="选择器组合"></p><h4 id="文本标签和样式"><a href="#文本标签和样式" class="headerlink" title="文本标签和样式"></a>文本标签和样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">em和strong标签</span><br><span class="line">两个标签均表示强调的内容</span><br><span class="line">em主要表示语气上的强调，在游览器中默认用斜体显示</span><br><span class="line">strong表示强调的内容，在游览器中默认用粗体显示，比em更强烈</span><br><span class="line"></span><br><span class="line">i标签中的内容会以斜体显示</span><br><span class="line">b标签中的内容会以粗体显示</span><br><span class="line">b标签和i标签无语意，不注重内容，单纯加粗或斜体</span><br><span class="line"></span><br><span class="line">small标签中的内容会比他的父元素中的文字小一些，来表示一些细则一类的内容，比如网站的版权声明，合同中的小字</span><br><span class="line"></span><br><span class="line">cite标签 所有加书名号的内容都可以使用cite标签，标识参考的内容</span><br><span class="line">如 书名，电影名，歌名，话剧名</span><br><span class="line">q标签 标识一个短引用，自动给内容加引号</span><br><span class="line">blockquote标签 表示一个长引用（块集引用）</span><br><span class="line"></span><br><span class="line">sup标签 使用sup标签来设置一个上标</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">sub标签 使用sub标签来设置一个下标</span><br><span class="line"></span><br><span class="line">del标签 使用del标签来表示一个删除的内容，del标签中的内容，会自动添加删除线</span><br><span class="line">ins标签 ins标签表示一个插入的内容，ins中的内容，会自动添加下划线</span><br><span class="line"></span><br><span class="line">pre标签 预格式标签，在pre标签内编写代码时，会将代码中的格式保存，不忽略多个空格</span><br><span class="line">code标签 代码标签，专门来表示代码，但是不保留格式，通常与pre结合使用</span><br></pre></td></tr></table></figure><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.无序列表</span><br><span class="line">使用<span class="selector-tag">ul</span>标签创建一个无序列表，使用<span class="selector-tag">li</span>标签在<span class="selector-tag">ul</span>创建一个个列表项，一个<span class="selector-tag">li</span>标签就是一个列表项</span><br><span class="line">通过type属性可以修改无序列表的项目符号</span><br><span class="line">可选值：</span><br><span class="line">disc           默认值，实心的圆点</span><br><span class="line">square         实心的方块</span><br><span class="line">circle         空心的圆</span><br><span class="line">但一般不使用默认的项目符号，如需设置项目符号，可以通过css设置背景图片的方式来设置</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.有序列表</span><br><span class="line">使用<span class="selector-tag">ol</span>标签创建一个有序列表，使用<span class="selector-tag">li</span>标签创建列表项，有序列表使用有序的序号作为项目符号</span><br><span class="line">type属性，可以指定序号的类型</span><br><span class="line">可选值：</span><br><span class="line"><span class="number">1</span>              默认值，阿拉伯数字</span><br><span class="line"><span class="selector-tag">a</span>/<span class="selector-tag">A</span>            采用大写或者小写的</span><br><span class="line">英文字母</span><br><span class="line"><span class="selector-tag">i</span>              罗马数字</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.定义列表</span><br><span class="line">使用<span class="selector-tag">dl</span>标签来创建一个定义列表，<span class="selector-tag">dl</span>中存在两个子标签</span><br><span class="line"><span class="selector-tag">dt</span>：被定义的内容</span><br><span class="line"><span class="selector-tag">dd</span>：对定义内容的描述</span><br><span class="line"></span><br><span class="line">列表之间可以相互嵌套，无序列表可嵌套有序列表，有序列表也可以嵌套无序列表</span><br></pre></td></tr></table></figure><h4 id="单位制"><a href="#单位制" class="headerlink" title="单位制"></a>单位制</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.长度单位</span><br><span class="line">像素 px</span><br><span class="line"><span class="number">1px</span>即为一个像素点</span><br><span class="line"></span><br><span class="line">百分比 %</span><br><span class="line">可以将单位设置为一个百分比形式，这样游览器会根据其父元素的样式来计算该值，当父元素的属性值发生变化时，子元素也会按照比例发生变化，通常用来创建自适应页面</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span>和百分比类似，它是相对于当前元素的字体大小来计算的，<span class="number">1em</span> = <span class="number">1</span>font-size</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.颜色单位</span><br><span class="line">可以直接使用颜色的单词来表示不同的颜色</span><br><span class="line"></span><br><span class="line">也可以使用RGB值来表示不同的颜色</span><br><span class="line">所谓RGB值是指通过Red Green Blue三元色的不同浓度，来表示不同的颜色</span><br><span class="line">语法：rgb(红色的浓度，绿色的浓度，蓝色的浓度);</span><br><span class="line">颜色的浓度需要一个<span class="number">0</span>~<span class="number">255</span>之间的值，<span class="number">255</span>表示最大浓度，<span class="number">0</span>表示最小浓度</span><br><span class="line">也可以采用一个百分数来设置，百分数最终也会转换为<span class="number">0</span>~<span class="number">255</span>之间的数字，<span class="number">0%</span>表示<span class="number">0</span>,<span class="number">100%</span>表示<span class="number">255</span></span><br><span class="line"></span><br><span class="line">也可以使用<span class="number">16</span>进制的数来替代，使用三组两位的十六进制数组来表示一个颜色</span><br><span class="line">语法：#红色蓝色绿色</span><br><span class="line">每组表示一个颜色的浓度，范围从<span class="number">00</span>~ff</span><br><span class="line"><span class="number">00</span>表示没有，相当于rgb中的<span class="number">0</span></span><br><span class="line">ff表示最大，相当于rgb中的<span class="number">255</span></span><br><span class="line">如果两位两位数字重复(如<span class="selector-id">#aabbcc</span>),可以简写(<span class="selector-id">#abc</span>)</span><br></pre></td></tr></table></figure><h4 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>         用<span class="attribute">color</span>来设置字体的颜色</span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>     用<span class="attribute">font-size</span>来间接设置文字大小。默认大小为<span class="number">16px</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-family</span>    用<span class="attribute">font-family</span>来设置字体当采用某种字体时，如果游览器支持该字体，则使用该字体，如果不支持，则使用默认字体。该样式可以指定多个字体，每个字体间用逗号隔开，当使用多个字体时，会优先使用前面的字体，如果不支持则采用下一个字体，直到最后使用可用的字体或者默认字体</span><br><span class="line">或者使用<span class="keyword">@font-face</span>的方式，将字体文件放置在服务器文件中吗，指定字体名字，通过url下载文件，然后游览器进行渲染</span><br><span class="line"></span><br><span class="line">font-style 可以设置文字的斜体</span><br><span class="line">可选值： normal  默认值，文字正常显示</span><br><span class="line">    italic  斜体，文字以斜体显示</span><br><span class="line">    oblique 倾斜，文字以倾斜的效果显示</span><br><span class="line">大部分游览器都不会对倾斜和斜体作区分，文字展现的效果一样，因此一般只使用italic</span><br><span class="line">font-weight  可以设置文字的加粗显示</span><br><span class="line">可选值： normal  默认值 文字正常显示</span><br><span class="line">        bold    加粗 文字加粗显示</span><br><span class="line">该样式也可以指定<span class="number">100</span>~<span class="number">900</span>之间的<span class="number">9</span>个值，但是一般用户电脑字体大小没有<span class="number">9</span>级，无法达到想要的效果</span><br><span class="line">font-variant 可以设置小型大写字母</span><br><span class="line">可选值： normal 默认值 文本正常显示</span><br><span class="line">small-caps 文本以小型大写字母显示</span><br><span class="line">小型大写字母：将所有的字母都以大写字母显示，但是小写字母要比大写字母小</span><br><span class="line">font 使用该样式可以设置字体的所有样式</span><br><span class="line">可以将字体的样式的值，统一写在font样式中，不同的值之间用空格隔开</span><br><span class="line">使用font设置字体样式时，斜体，加粗，大小写字母，没有顺序要求，甚至可写可不写，如果不写则采用默认值，但是要求文字的大小和字体必须设置，而且字体在最后一个，大小在倒数第二个</span><br><span class="line">line-height 设置行高，通过设置行高间接设置行间距</span><br><span class="line">text-transform 设置文本的大小写</span><br><span class="line">可选值：none  默认值 文本按原有大小写显示</span><br><span class="line">   capitalize 单词的首字母大写，通过空格来识别单词</span><br><span class="line">   uppercase 所有字母大写</span><br><span class="line">       lowercase 所有字母小写</span><br><span class="line">text-decoration 设置文本的修饰</span><br><span class="line">可选值： none 默认值 不添加任何修饰，正常显示</span><br><span class="line">        underline 为文本添加下划线</span><br><span class="line">        overline 为文本添加上划线</span><br><span class="line">        line-through 为文本添加删除线</span><br><span class="line">letter-spacing 指定字符间距</span><br><span class="line">word-spacing 设置单词间的间距，即单词间的空格大小</span><br><span class="line">text-align 可以设置文字的对齐方式</span><br><span class="line">可选值：left 默认值 文本左端对齐</span><br><span class="line">   right  文本右端对齐</span><br><span class="line">   center 文本居中对齐</span><br><span class="line">   justify  两端对齐</span><br><span class="line">text-indent 设置文本的首行缩进，将它设置为正值时，会自动向右移动指定像素，设置为负值时，向左移动指定像素，可用来隐藏一些文字</span><br><span class="line">white-space 选择是否保留空格</span><br></pre></td></tr></table></figure><h2 id="盒子模型-框模型"><a href="#盒子模型-框模型" class="headerlink" title="盒子模型(框模型)"></a>盒子模型(框模型)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">一个盒子分为四部分:内容区(content),内边距(padding),边框(border),外边距(margin)</span><br><span class="line"></span><br><span class="line">为元素设置边框</span><br><span class="line">border-width: 边框的宽度，使用border-width可以分别设置四个边框的宽度，如果用·border-width指定了四个值，按照顺时针方向上 右 下 左分别设置宽度</span><br><span class="line">此外还存在border-xxx-width分别设置四个边框的宽度，xxx的值分别为right，left，top，bottom</span><br><span class="line">border-color: 边框的颜色，规则与width一致</span><br><span class="line">border-style: 边框的样式，规则与width也一致</span><br><span class="line">可选值：  none 默认值 没有边框</span><br><span class="line">         solid 实线</span><br><span class="line">     dotted 点状边框</span><br><span class="line">         dashed 虚线边框</span><br><span class="line">     double 双线边框</span><br><span class="line">border：简写样式，可以同时设置四个边框的颜色，宽度，样式，无任何顺序要求，但不能分别指定</span><br><span class="line">border-xxx：xxx值为top，bottom，left，right</span><br><span class="line"></span><br><span class="line">内边距，内容区与边框之间的距离</span><br><span class="line">可以通过padding-right，padding-left，padding-top，padding-bottom分别设置四个方向的内边距，使用padding可以同时设置四个内边距的大小，规则与width一致</span><br><span class="line"></span><br><span class="line">外边距：当前盒子与另外的盒子之间的距离</span><br><span class="line">可以通过margin-top，margin-bottom，margin-left，margin-right来设置四个方向的外边距</span><br><span class="line">还可以将值设置为auto，auto一般只设置给水平方向的margin，如果只指定，左外边距和右外边距的margin为auto会将外边距设置为最大值,垂直方向外边距如果设置为auto，则外边距默认为<span class="number">0</span>。</span><br><span class="line">如果将外边距left和right同时设置为auto，则会将左右两侧外边距设置为相同的值</span><br><span class="line">应用：将左右外边距都设置为auto，使得子元素在父元素中水平居中</span><br><span class="line">外边距也存在简写样式margin，规则同padding</span><br></pre></td></tr></table></figure><h4 id="垂直外边距重叠问题"><a href="#垂直外边距重叠问题" class="headerlink" title="垂直外边距重叠问题"></a>垂直外边距重叠问题</h4><p>在网页中相邻的垂直方向的外边距会发生外边距重叠，外边距重叠指的是兄弟元素间的相邻外边距会取而不是取和。如果父子元素的垂直外边距相邻了，则子元素的外边距会设置给父元素。可以通过设置样式将外边距隔开，或者使用内边距或者其他来避免出现重叠问题</p><h4 id="dispaly标签"><a href="#dispaly标签" class="headerlink" title="dispaly标签"></a>dispaly标签</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>标签 </span><br><span class="line">作用:可以将一个元素的类型改变</span><br><span class="line">可选值：</span><br><span class="line">none:不显示元素，并且元素不会在页面中继续占有位置</span><br><span class="line">inline:将一个元素作为内联元素显示</span><br><span class="line">block:将一个元素作为块元素显示</span><br><span class="line">inline-block:将一个元素转换为行内块元素(可以使一个元素既有行内元素的特点，也有块元素的特点，即可以设置宽高，也不会独占一行)</span><br><span class="line"></span><br><span class="line">visibility标签</span><br><span class="line">作用：可以设置元素的隐藏和显示的状态</span><br><span class="line">可选值：</span><br><span class="line">visible：默认值，默认值，元素默认会在页面显示</span><br><span class="line">hidden：元素会隐藏不会显示，但是该元素的位置仍会保留</span><br><span class="line"></span><br><span class="line">overflow标签</span><br><span class="line">作用:处理溢出的子元素部分</span><br><span class="line">可选值：</span><br><span class="line">visible: 默认值，对溢出部分不进行处理，元素会在父元素之外的位置显示</span><br><span class="line">hidden: 溢出的内容会被修剪，不会显示</span><br><span class="line">scroll: 会为父元素添加滚动条,但是不智能</span><br><span class="line">auto: 自动添加滚动条，在垂直方向超出则在垂直方向加滚动条，在水平方向超出则在水平方向添加滚动条</span><br><span class="line"></span><br><span class="line">float标签</span><br><span class="line">作用: 使元素浮动，脱离文档流</span><br><span class="line">可选值:  </span><br><span class="line">none: 默认值，元素在文档流中</span><br><span class="line">left: 元素会立即脱离文档流，向左浮动</span><br><span class="line">right: 元素立即脱离文档流，向右浮动</span><br><span class="line">当一个元素设置浮动后(float的值是一个非none的值)，元素会立即脱离文档流，元素脱离文档流后，他下面的元素会向上浮，元素浮动以后，会尽量向页面的左上角或者右上角浮动，直到遇到父元素边框或者其他浮动元素</span><br><span class="line">如果浮动元素是一个没有浮动的块元素，则浮动元素不会超过块元素,且浮动元素不会超过它上面的兄弟元素，最多一边齐平。</span><br><span class="line">浮动的元素不会盖住文字，文字会环绕在浮动元素边。当块元素脱离文档流后，高度和宽度都由内容撑开，内联元素脱离文档流后，就会变成块元素，可以设置宽和高。</span><br><span class="line"></span><br><span class="line">clear标签</span><br><span class="line">作用：清除其他元素浮动对该元素的影响</span><br><span class="line">可选值：</span><br><span class="line">none 默认值，不清除浮动</span><br><span class="line">left:清除左侧浮动元素对当前元素的影响</span><br><span class="line">right:清除右侧浮动元素对当前元素的影响</span><br><span class="line">both:清除两侧浮动元素对当前元素产生的影响(清除影响最大的浮动元素的影响)</span><br></pre></td></tr></table></figure><h4 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在文档流中，父元素的高度是被子元素撑开的，但是当子元素设置为浮动后，子元素完全脱离开文档流，无法撑起父元素，导致父元素的高度塌陷。而由于父元素高度塌陷，父元素下面的所有元素都会向上移动，导致页面布局混乱。</span><br><span class="line"></span><br><span class="line">根据W3C的标准，在页面中元素都有一个隐藏的属性Block Formatting Context，简称BFC，该属性可以设置打开或者关闭，默认关闭。</span><br><span class="line"></span><br><span class="line">当开启BFC以后，元素将会具有以下特性：</span><br><span class="line"><span class="number">1</span>.父元素的垂直外边距不会与子元素重叠</span><br><span class="line"><span class="number">2</span>.开启BFC的元素不会被浮动的元素覆盖</span><br><span class="line"><span class="number">3</span>.开启BFC的元素可以包含浮动的子元素</span><br><span class="line"></span><br><span class="line">开启元素的BFC</span><br><span class="line"><span class="number">1</span>.设置元素的浮动</span><br><span class="line">使用这种方式开启，可以撑开父元素，但是会导致父元素的宽度缺失，而且元素浮动导致的元素上移，无法通过这种方式解决</span><br><span class="line"><span class="number">2</span>.设置元素的绝对定位</span><br><span class="line"><span class="number">3</span>.设置元素为inline-block</span><br><span class="line">可以解决问题，但是会导致元素的宽度丢失</span><br><span class="line"><span class="number">4</span>.将元素的<span class="attribute">overflow</span>设置为一个非visible的值(推荐将值设置为hidden，副作用最小开启BFC)</span><br><span class="line"></span><br><span class="line">在高度塌陷的父元素的最后，添加一个空白的<span class="selector-tag">div</span>，然后对这个<span class="selector-tag">div</span>元素进行<span class="attribute">clear</span>浮动清理，就可以通过这个空白的<span class="selector-tag">div</span>撑开父元素的高度，基本没有副作用的解决塌陷问题</span><br><span class="line"></span><br><span class="line">通过after伪类元素最后添加一个空白的块元素，然后对其清除浮动</span><br><span class="line">.父元素名<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相对定位与绝对定位"><a href="#相对定位与绝对定位" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">定位：</span><br><span class="line">定位是指将指定的元素摆放在页面的任意位置，通过<span class="attribute">position</span>属性来设置元素的定位</span><br><span class="line">可选值：</span><br><span class="line">static 默认值，元素没有开启定位</span><br><span class="line">relative 开启元素的绝对定位</span><br><span class="line">absolute 开启元素的绝对定位</span><br><span class="line">fixed 开启元素的固定定位(也是绝对定位的一种)</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为relative时，则开启了元素的相对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.相对定位是相对于元素在文档流中原来的位置进行定位</span><br><span class="line"><span class="number">3</span>.相对定位的元素不会脱离文档流</span><br><span class="line"><span class="number">4</span>.相对定位会是元素提升一个层级</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为absolute时，则开启了元素的绝对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的绝对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.开启绝对定位，会使元素脱离文档流</span><br><span class="line"><span class="number">3</span>.元素的绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的(一般情况，开启了子元素绝对定位都会同时开启父元素的相对定位)</span><br><span class="line">如果所有的祖先元素都没有开启定位，则会相对于游览器的窗口进行定位</span><br><span class="line"><span class="number">4</span>.绝对定位会使元素提升一个层级</span><br><span class="line"><span class="number">5</span>.绝对定位会改变元素的性质，内联元素变成块元素，块元素的高度和宽度都被内容撑开</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为fixed时，则开启了元素的固定定位</span><br><span class="line">固定定位也是一种绝对定位，他的大部分特点和绝对定位一样</span><br><span class="line">不同点：</span><br><span class="line">固定定位永远都会相对于游览器窗口进行定位</span><br><span class="line">固定定位会固定在游览器窗口的某个位置，不会随滚动条滚动</span><br><span class="line">当开启了元素的定位(<span class="attribute">position</span>属性值是一个非static的值)时</span><br><span class="line">可以通过<span class="attribute">left</span>，<span class="attribute">right</span>，<span class="attribute">top</span>，<span class="attribute">bottom</span>四个属性来设置元素的偏移量</span><br><span class="line"><span class="attribute">left</span>:元素相对于其定位位置的左侧偏移量</span><br><span class="line">right:元素相对于其定位位置的右侧偏移量</span><br><span class="line">top:元素相对于其定位位置上边的偏移量</span><br><span class="line">bottom:元素相对于其定位位置的下方的偏移量</span><br><span class="line">通常偏移量只需要两个就可以对一个元素进行定位，一般通过水平方向的一个偏移量和垂直方向的一个偏移量来进行定位</span><br><span class="line"></span><br><span class="line">如果定位元素的层级相同，则下面的元素会盖住上面的元素而通过z-index属性可以设置元素的层级</span><br><span class="line">z-index标签</span><br><span class="line">可以通过给z-index指定一个正整数作为值，该值将会作为当前元素的层级，层级越高，越优先显示</span><br><span class="line">但是父元素层级再高，也不会盖住子元素</span><br><span class="line">对于没有开启定位的元素，不能使用z-index属性</span><br></pre></td></tr></table></figure><h4 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置元素的透明背景</span><br><span class="line">opacity可以用来设置元素背景的透明，它需要一个0~1之间的值</span><br><span class="line">0表示完全透明，1表示完全不透明0.5表示半透明</span><br><span class="line">opacity属性在IE8及以下的游览器不支持，需要用alpha(opacity=透明度)来设置</span><br><span class="line">透明度需要采用一个0~100之间的值</span><br></pre></td></tr></table></figure><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">背景颜色 <span class="attribute">background-color</span></span><br><span class="line">背景图片 <span class="attribute">background-image</span></span><br><span class="line">语法：</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">图片相对路径</span>);</span><br><span class="line">当背景图片大于元素，默认会显示图片的左上角</span><br><span class="line">当背景图片和元素一样大，将会将图片先全部显示</span><br><span class="line">当背景图片比元素小，则默认会将图片平铺以充满元素</span><br><span class="line"></span><br><span class="line">可以让同时为一个元素指定背景颜色和背景图片，这样背景颜色将会作为背景图片的底色</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-repeat</span>标签</span><br><span class="line">作用：设置背景图片的重复方式</span><br><span class="line">可选值:</span><br><span class="line">repeat 默认值，背景图片会双方向重复</span><br><span class="line">no-repeat 背景图片不会重复，以原图显示</span><br><span class="line">repeat-x 背景图片沿水平方向重复</span><br><span class="line">repeat-y 背景图片沿垂直方向重复</span><br><span class="line"></span><br><span class="line">background-position标签</span><br><span class="line">作用：调整背景图片在元素中的位置</span><br><span class="line">可选值：</span><br><span class="line">该属性可以使用top right bottom left center中的两个值来指定一个背景图片的位置</span><br><span class="line">top left 左上 top center 中上，如果只指出一个值，则第二个值默认为center</span><br><span class="line">也可以直接指定背景图片的偏移量，第一个偏移量是水平偏移量，第二个偏移量是垂直偏移量</span><br><span class="line">语法：background-position:top center;</span><br><span class="line"> <span class="attribute">background-position</span>:水平偏移量 垂直偏移量;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-attachment</span>标签</span><br><span class="line">作用：用来设置背景图片是否随页面一起滚动</span><br><span class="line">可选值：</span><br><span class="line">scroll，默认值，背景图片随窗口一起滚动</span><br><span class="line">fixed，背景图片会固定在某一位置，不随页面滚动，一般只给<span class="selector-tag">body</span>设置</span><br><span class="line"></span><br><span class="line">简写属性<span class="attribute">background</span></span><br><span class="line">作用：通过该属性可以直接设置所有背景相关的样式</span><br><span class="line">无顺序要求，也没有数量要求，没写的属性就采用默认值</span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>标签</span><br><span class="line">作用：用来创建一个表格，表示一些格式化数据，如：课程表等</span><br><span class="line">在<span class="selector-tag">table</span>标签中使用<span class="selector-tag">th</span>标签来表示表头中的内容</span><br><span class="line">使用<span class="selector-tag">tr</span>来表示表格的一行，有几行就有几个<span class="selector-tag">tr</span>标签</span><br><span class="line">在<span class="selector-tag">tr</span>标签中需要使用<span class="selector-tag">td</span>标签来创建一个单元格，有几个单元格就有几个<span class="selector-tag">td</span>(列)</span><br><span class="line"></span><br><span class="line">在一些情况下表格是非常长的，需要将表格分为三部分，表头，表格的主体内容，表格底部，在这种情况下，<span class="selector-tag">html</span>提供了三个标签</span><br><span class="line"><span class="selector-tag">thead</span> 表头，永远显示在表格的头部</span><br><span class="line"><span class="selector-tag">tbody</span> 表格主体，永远显示在表格中间</span><br><span class="line"><span class="selector-tag">tfoot</span> 表格底部，永远显示在表格底部</span><br><span class="line"></span><br><span class="line">这三个标签的作用，是用来区分表格的不同部分，都是<span class="selector-tag">table</span>的子标签，都需要直接写在<span class="selector-tag">table</span>中，<span class="selector-tag">tr</span>需要写在这些标签中。如果表格中没有写<span class="selector-tag">tbody</span>，游览器则会自动添加<span class="selector-tag">tbody</span>，并且将所有的<span class="selector-tag">tr</span>都存放在<span class="selector-tag">tbody</span>中，所以<span class="selector-tag">tr</span>不是<span class="selector-tag">table</span>的子元素，而是<span class="selector-tag">tbody</span>的子元素，无法通过<span class="selector-tag">table</span> &gt; <span class="selector-tag">tr</span>选中</span><br><span class="line"></span><br><span class="line">colspan标签</span><br><span class="line">作用：将横向单元格合并</span><br><span class="line">语法：colspan = &quot;合并单元格数&quot;</span><br><span class="line"></span><br><span class="line">rowspan标签</span><br><span class="line">作用：将纵向单元格合并</span><br><span class="line">语法：rowspan = &quot;合并单元格数&quot;</span><br><span class="line"></span><br><span class="line">表格样式</span><br><span class="line"><span class="selector-tag">table</span>是一个块元素，可以设置宽度，<span class="selector-tag">table</span>和<span class="selector-tag">td</span>边框之间默认有一个距离，通过<span class="attribute">border-spacing</span>属性可以设置这个距离，可以通过<span class="attribute">border-collapse</span>来设置表格的边框合并(<span class="attribute">border-collapse</span>:collapse;)，如果设置了边框合并，则<span class="attribute">border-spacing</span>属性自动失效</span><br></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">表单的作用就是用来将用户的信息提交给服务器，例如百度的搜索栏 注册 登录等操作都要填写表单</span><br><span class="line"><span class="selector-tag">form</span>标签</span><br><span class="line">作用：创建一个表单提交数据</span><br><span class="line"><span class="selector-tag">form</span>标签必须指定一个action属性，该属性指向一个服务器的地址，当提交表单时将会提交到action属性指向的地址。使用<span class="selector-tag">form</span>创建的仅仅是一个空白的表单，我们还需要<span class="selector-tag">form</span>中添加不同的表单项</span><br><span class="line">使用<span class="selector-tag">input</span>创建一个文本框，他的type属性值是text,如果需要将表单中的数据提交给服务器，还必须给表单项指定一个name属性值，name表示提交内容的名字</span><br><span class="line">用户填写的信息会附在url地址后边以查询字符串的形式发送给服务器</span><br><span class="line">url地址?查询字符串</span><br><span class="line">格式： 属性名 = 属性值&amp;属性名 = 属性值&amp;属性名 = 属性值</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;text&quot; name = &quot;name&quot; /&gt;</span><br><span class="line"></span><br><span class="line">使用<span class="selector-tag">input</span>创建一个密码框，他的type属性值是password</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;password&quot; name = &quot;password&quot; /&gt;</span><br><span class="line"></span><br><span class="line">提交按钮可以将表单中的信息提交给服务器，使用<span class="selector-tag">input</span>创建一个提交按钮，它的type属性值是submit，在提交按钮中可以通过value属性来指定在按钮上的文字</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;submit&quot; value = &quot;注册&quot; /&gt;</span><br><span class="line">在文本框中也可以指定value，value值作为默认值</span><br><span class="line"></span><br><span class="line">单选按钮</span><br><span class="line">使用<span class="selector-tag">input</span>来创建一个单选按钮，它的type属性值是radio，单选按钮通过name来进行分组，name属性值相同的一组是一组按钮，这种不需要用户直接填写内容的表单项，还必修指定一个value属性，这样被选中的表单项的value属性值最终会提交给服务器</span><br><span class="line">多选框</span><br><span class="line">使用<span class="selector-tag">input</span>来创建一个多选框，它的type属性值是checkbox</span><br><span class="line">如果希望在单选框或者多选框中指定默认选项，则可以在该希望选中的项中添加checked = &quot;checked&quot;属性</span><br><span class="line"></span><br><span class="line">下拉列表</span><br><span class="line">使用select来创建一个下拉列表，在下拉列表中使用option标签来创建一个一个列表项，下拉列表的name属性需要指定给select，而value属性则需要指定给option</span><br><span class="line">可以通过在option中添加selected=&quot;selected&quot;来将选项设置为默认选中</span><br><span class="line">当为select添加multiple=&quot;multiple&quot;属性，将下拉列表变为一个多选下拉列表</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;选项值&lt;option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">在select中可以使用optgroup来对选项进行分组，同一个optgroup中的选项是一组，通过<span class="selector-tag">label</span>属性来指定分组的名字</span><br><span class="line"></span><br><span class="line">list属性,在用户输入时提供一个默认的输入（提示，提供一些快捷输入）</span><br><span class="line">实例：</span><br><span class="line">&lt;<span class="selector-tag">input</span> list=&quot;属性名&quot;&gt;</span><br><span class="line">&lt;datalist id = &quot;属性名&quot;&gt;</span><br><span class="line">&lt;option&gt;值<span class="number">1</span>&lt;/option&gt;</span><br><span class="line">&lt;option&gt;值<span class="number">2</span>&lt;/option&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br><span class="line">使用<span class="selector-tag">textarea</span>来创建一个多行文本域</span><br><span class="line">&lt;<span class="selector-tag">textarea</span> name = &quot;name&quot;&gt; &lt;/<span class="selector-tag">textarea</span>&gt;</span><br><span class="line"></span><br><span class="line">重置按钮</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;reset&quot; /&gt;可以创建一个重置按钮，点击后表单中内容将会恢复为默认值</span><br><span class="line">创建一个单纯的按钮，按钮无任何功能，只能用来点击(一般结合js使用)</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;<span class="selector-tag">button</span>&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>标签</span><br><span class="line">可以使用&lt;<span class="selector-tag">button</span> type = &quot;属性值&quot;&gt;&lt;/<span class="selector-tag">button</span>&gt;来创建按钮，效果根据属性值定义，更加灵活</span><br><span class="line"></span><br><span class="line">在<span class="selector-tag">html</span>中提供了<span class="selector-tag">label</span>标签，用来选中表单中提示文字(可以为提示文字设置样式)</span><br><span class="line">&lt;<span class="selector-tag">label</span>&gt;提示文字&lt;/<span class="selector-tag">label</span>&gt;</span><br><span class="line">该标签可以指定一个for属性，该属性的值需要制定一个表单项的id值</span><br><span class="line"></span><br><span class="line">在表单中可以使用<span class="selector-tag">fieldset</span>来为表单项进行分组，可以将表单项的同一组放入到一个<span class="selector-tag">fieldset</span>的标签中。在<span class="selector-tag">fieldset</span>中可以使用<span class="selector-tag">legend</span>子标签来指定组名</span><br><span class="line">&lt;<span class="selector-tag">legend</span>&gt;组名&lt;/ <span class="selector-tag">legend</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有一些情况，有些特殊代码我们只需要在某些特殊的游览器中执行，而在其他的游览器中不需要执行，这样就可以使用CSS Hack来解决问题</span><br><span class="line">CSS Hack实际上是一个特殊的代码，这段代码只在某些游览器中可以识别，而其他游览器则不能识别，通过这种方式，来为一些游览器设置特殊代码.......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM</title>
      <link href="/posts/dsacx3.html"/>
      <url>/posts/dsacx3.html</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript与DOM事件"><a href="#JavaScript与DOM事件" class="headerlink" title="JavaScript与DOM事件"></a>JavaScript与DOM事件</h3><p>DOM（文档对象模型）Document Object Model<br>当网页被加载时，游览器会创建DOM，DOM属于BOM的一部分，对document进行操作</p><h4 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h4><ul><li>nodeType 节点属性</li><li>nodeName 节点名称</li><li>nodeValue 节点值</li></ul><p>JavaScript中的DOM（文档对象模型）提供了一组节点类型和相应的操作方法，用于访问、创建、修改和删除HTML文档中的元素和内容。以下是常见的DOM节点类型及其操作方法：</p><ol><li><p>Document节点：</p><ul><li>获取Document节点：<code>document</code>。</li><li>创建Element节点：<code>document.createElement(tagName)</code>。</li><li>创建Text节点：<code>document.createTextNode(text)</code>。</li><li>创建Comment节点：<code>document.createComment(text)</code>。</li><li>创建Attribute节点：<code>document.createAttribute(name)</code>。</li><li>创建DocumentFragment节点：<code>document.createDocumentFragment()</code>。</li></ul></li><li><p>Element节点：</p><ul><li>获取Element节点：通过选择器、标签名、类名、id等方式。<ul><li><code>document.querySelector(selector)</code>：根据CSS选择器获取第一个匹配的Element节点。</li><li><code>document.querySelectorAll(selector)</code>：根据CSS选择器获取所有匹配的Element节点。</li><li><code>document.getElementsByTagName(tagName)</code>：根据标签名获取一组Element节点。</li><li><code>document.getElementsByClassName(className)</code>：根据类名获取一组Element节点。</li><li><code>document.getElementById(id)</code>：根据id获取Element节点。</li></ul></li><li>创建子节点：<ul><li><code>element.appendChild(node)</code>：将一个节点添加为当前Element节点的子节点。</li><li><code>element.insertBefore(newNode, referenceNode)</code>：在当前Element节点的子节点列表中的某个节点之前插入一个新节点。</li></ul></li><li>修改属性：<ul><li><code>element.getAttribute(name)</code>：获取Element节点的属性值。</li><li><code>element.setAttribute(name, value)</code>：设置Element节点的属性值。</li><li><code>element.removeAttribute(name)</code>：移除Element节点的属性。</li></ul></li><li>克隆节点：<ul><li><code>element.cloneNode(deep)</code>：克隆当前Element节点，deep参数指定是否克隆子节点。</li></ul></li><li>替换节点：<ul><li><code>element.replaceChild(newNode, oldNode)</code>：用一个新节点替换当前Element节点的某个子节点。</li></ul></li><li>移除节点：<ul><li><code>element.removeChild(node)</code>：从当前Element节点的子节点列表中移除一个节点。</li></ul></li></ul></li><li><p>Text节点：</p><ul><li>获取Text节点的内容：<code>textNode.textContent</code>。</li><li>设置Text节点的内容：<code>textNode.textContent = newText</code>。</li></ul></li><li><p>Comment节点：</p><ul><li>获取Comment节点的内容：<code>commentNode.textContent</code>。</li><li>设置Comment节点的内容：<code>commentNode.textContent = newComment</code>。</li></ul></li><li><p>Attribute节点：</p><ul><li>获取Attribute节点的名称：<code>attributeNode.name</code>。</li><li>获取Attribute节点的值：<code>attributeNode.value</code>。</li></ul></li><li><p>DocumentFragment节点：</p><ul><li>创建DocumentFragment节点：<code>document.createDocumentFragment()</code>。</li><li>添加子节点：与Element节点的<code>appendChild</code>、<code>insertBefore</code>方法相同。</li></ul></li><li><p>NodeList节点列表：</p><ul><li>获取NodeList节点列表：通过选择器、标签名、类名等方式。<ul><li><code>document.querySelectorAll(selector)</code>：根据CSS选择器获取所有匹配的节点列表。</li><li><code>element.getElementsByTagName(tagName)</code>：根据标签名获取一组节点列表。</li><li><code>element.getElementsByClassName(className)</code>：根据类名获取一组节点列表。</li></ul></li><li>遍历节点列表：可以使用<code>for...of</code>循环或索引访问。</li></ul></li></ol><p>JavaScript可以通过DOM改变hTML元素，HTML文本，HTML属性，CSS样式等，根据事件做出反应</p><ol><li><p>DOM操作HTML</p><ul><li><p>DOM获取元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过DOM获取元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过标签名，类名，id进行获取</span></span><br><span class="line"><span class="comment">//1. 通过id名获取 getElementById(&quot;id&quot;)  只有唯一一个</span></span><br><span class="line"><span class="keyword">var</span> oid = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id名&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 通过class获取 一个或多个 getELementsByClassName(&quot;class名&quot;) 获取HTMLCollection集合，类似于数组，使用下标访问</span></span><br><span class="line"><span class="keyword">var</span> oclass = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;class名&quot;</span>)</span><br><span class="line">oclass[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击第一个class元素&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过标签名获取元素 一个或多个 getElementsByTagName(&quot;标签名&quot;) HTMLCollection</span></span><br><span class="line"><span class="keyword">var</span> oItem = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签名&quot;</span>);</span><br><span class="line">oItem[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;yellow&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过name获取元素 主要使用form表单 getElementsByName(&quot;name名&quot;) 返回NodeList，类数组</span></span><br><span class="line"><span class="keyword">var</span> oname = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;name名&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过选择器的方式获取 selsctor,通过css选择器来获取元素</span></span><br><span class="line"><span class="comment">//只返回第一个元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelsctor</span>(css选择器，一个或者多个，中间使用逗号隔开)</span><br><span class="line"><span class="comment">//返回一个Nodelist，使用类似数组下标访问</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(css选择器，一个或多个，使用逗号隔开)</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\DOM获取.png" alt="image-20230912163006063"></p><ul><li><p>DOM获取属性 元素.getAttribute(“属性名”)</p><p>属性名必须在元素内部才能被查询到，不然返回NULL</p><p><img src="E:\23\字节训练营前端基础\获取元素属性.png" alt="image-20230924094924335"></p></li><li><p>设置属性     元素.setAttribute(“属性名”，属性值)</p></li><li><p>移除属性     元素.removeAttribute(“属性名”)</p></li></ul></li></ul></li><li><p>DOM改变HTML</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变HTML输出流</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;p&gt;段落&lt;/p&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;hello , world&quot;</span>);<span class="comment">//会对HTML输出流进行一个覆盖</span></span><br><span class="line"><span class="comment">//改变HTML内容</span></span><br><span class="line"><span class="comment">//innerHTML 获取/设置元素的内容  包含标签</span></span><br><span class="line"><span class="keyword">var</span> oBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oBox.<span class="property">innerHTML</span>);<span class="comment">//获取</span></span><br><span class="line">oBox.<span class="property">innerHTML</span> = <span class="string">&quot;这是一个盒子&quot;</span>;</span><br><span class="line"><span class="title class_">OBox</span>.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;h2&gt;改变盒子的内容&lt;/h2&gt;&quot;</span></span><br><span class="line"><span class="comment">//outerHTML 获取/设置元素的内容 包含标签，包含自身</span></span><br><span class="line">oBox.<span class="property">outerHTML</span> = <span class="string">&quot;&lt;span&gt;文本标签&lt;/span&gt;&quot;</span><span class="comment">//将oBox元素改为&lt;span&gt;</span></span><br><span class="line"><span class="comment">//innerText  获取/设置元素的文本内容</span></span><br><span class="line">oBox.<span class="property">innerText</span>=<span class="string">&quot;标签内的文本内容&quot;</span></span><br><span class="line"><span class="comment">//改变CSS</span></span><br><span class="line"><span class="comment">//获取style element.style</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oBox.<span class="property">style</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oHeader.<span class="property">style</span>);<span class="comment">//只能获取行内样式</span></span><br><span class="line"><span class="comment">//设置style element.style.property</span></span><br><span class="line">oBox.<span class="property">style</span> = <span class="string">&quot;font-size:30px;color:red;&quot;</span></span><br><span class="line">oBox.<span class="property">style</span>.<span class="property">font</span>-size = <span class="string">&quot;30px&quot;</span>;<span class="comment">//出现报错，左值不能使用连字符-</span></span><br><span class="line">oBox.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;30px&quot;</span>;<span class="comment">//使用驼峰命名法</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>JavaScript中this关键字</p><p><img src="E:\23\字节训练营前端基础\this关键字.png" alt="image-20230924142426998"></p><ul><li><p>JavaScript中的继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;zjamh&quot;</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span>;</span><br><span class="line">    <span class="attr">func</span>:<span class="keyword">function</span>(<span class="params"><span class="keyword">from</span>, to</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;年龄 ：&quot;</span>+age+<span class="keyword">from</span>+<span class="string">&quot; &quot;</span>+to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;assad&quot;</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> perwf = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xvsd&quot;</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">func</span>(<span class="string">&quot;ASd&quot;</span>,<span class="string">&quot;sdfsd&quot;</span>);<span class="comment">//直接调用方法</span></span><br><span class="line">person1.<span class="property">func</span>.<span class="title function_">call</span>(stack,<span class="string">&quot;scxv&quot;</span>,<span class="string">&quot;asfdv&quot;</span>);<span class="comment">//继承调用</span></span><br><span class="line">person1.<span class="property">func</span>.<span class="title function_">apply</span>(stack,[<span class="string">&quot;xcsvfd&quot;</span>,<span class="string">&quot;dfsdf&quot;</span>]);</span><br><span class="line">person1.<span class="property">func</span>.<span class="title function_">bind</span>(stack,<span class="string">&quot;sdasd&quot;</span>,<span class="string">&quot;erew&quot;</span>)();</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="DOM增删改查（遍历）"><a href="#DOM增删改查（遍历）" class="headerlink" title="DOM增删改查（遍历）"></a>DOM增删改查（遍历）</h4><ol><li><p>遍历</p><p>通过一个元素查找另外一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//children 返回(元素)子节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oWrap.<span class="property">children</span>);</span><br><span class="line"><span class="comment">//childNodes 返回子节点，包含了空节点（text,包括标签与标签之间被解析成空格的换行）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oWrap.<span class="property">childNodes</span>)</span><br><span class="line"><span class="comment">//firstElementChild   返回第一个子元素节点</span></span><br><span class="line"><span class="comment">//firstChild          返回第一个子节点</span></span><br><span class="line"><span class="comment">//lastChild           返回最后一个子节点</span></span><br><span class="line"><span class="comment">//lastElementChild    返回最后一个子元素节点</span></span><br><span class="line"><span class="comment">//parentNode          返回父节点（与parentElementNode返回一致）</span></span><br><span class="line"><span class="comment">//offsetParent        定义关系，第一个有定位属性的父节点，如果没有，则返回body</span></span><br></pre></td></tr></table></figure><p>兄弟元素（同胞元素）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nextElementSibling     返回下一个兄弟（元素）节点</span></span><br><span class="line"><span class="comment">//nextSibling     返回下一个兄弟节点</span></span><br><span class="line"><span class="comment">//previousElementSibling     返回上一个兄弟（元素）节点</span></span><br><span class="line"><span class="comment">//previousSibling     返回上一个兄弟节点</span></span><br></pre></td></tr></table></figure></li><li><p>创建元素（节点）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;P&quot;</span>)<span class="comment">//创建一个p标签，标签名必须大写</span></span><br><span class="line">newp.<span class="property">innerText</span> = <span class="string">&quot;这是新建的段落&quot;</span></span><br><span class="line">newp.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;pink&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加元素（节点）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parentNode.appendChild(添加的节点)   向父元素子节点的末尾添加</span></span><br><span class="line"><span class="comment">//parentNode.insertBefore(添加的节点,参考的兄弟元素)  向兄弟元素前面添加</span></span><br></pre></td></tr></table></figure></li><li><p>修改元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parentNode.replaceChild(新元素，旧元素) 使用新元素替换掉旧元素</span></span><br></pre></td></tr></table></figure></li><li><p>移除节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parentNode.removeChild(要移除的节点)</span></span><br></pre></td></tr></table></figure></li><li><p>DOM事件</p><ul><li><p>鼠标事件</p><p><img src="E:\23\字节训练营前端基础\鼠标事件.png" alt="image-20230926172414777"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//mouseleave   当鼠标指针移出元素时被触发</span></span><br><span class="line"><span class="comment">//mouseenter   当鼠标指针移动到元素上时触发</span></span><br><span class="line">  <span class="comment">//与mouseover,mouseout之间的区别是，mouseover跟mouseout进出子元素时也会触发事件，而leave与enter不会</span></span><br><span class="line"><span class="comment">//wheel事件    鼠标在元素上上下滚动时触发</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> oBj = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  oBj.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"> <span class="comment">//使用on+事件调用</span></span><br></pre></td></tr></table></figure><p><a href="https://zh.javascript.info/mouse-events-basics" title="鼠标事件">鼠标事件</a></p></li><li><p>键盘事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keydown         某个键盘按键被按下</span></span><br><span class="line"><span class="comment">//keyup           某个键盘被按下并且松开</span></span><br><span class="line"><span class="comment">//keypress        某个键盘按键被按下并松开，不识别（上下左右，alt，shift，ctrl，backspace）</span></span><br><span class="line"><span class="keyword">var</span> aBox = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> oDown = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;down&quot;</span>);</span><br><span class="line">oDwn.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;首先必须获取焦点，然后才能触发键盘事件&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表单事件</p><p><img src="E:\23\字节训练营前端基础\表单事件.png" alt="image-20230926192759725"></p></li><li><p>剪切板事件<br><img src="E:\23\字节训练营前端基础\剪切板事件.png" alt="image-20230926195701262"></p></li><li><p>拖拽事件</p><p><img src="E:\23\字节训练营前端基础\拖拽事件.png" alt="image-20230926195940898"></p></li><li><p>媒体事件，框架/对象事件</p></li></ul></li></ol><h4 id="event-事件对象"><a href="#event-事件对象" class="headerlink" title="event 事件对象"></a>event 事件对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件对象，每一个事件都是对象</span></span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">oBtn[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    event = event||<span class="variable language_">window</span>.<span class="property">event</span>;<span class="comment">//浏览器兼容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//键盘事件</span></span><br><span class="line"><span class="comment">//登录   搜索   回车</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">    ev = ev||<span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ev)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//altKey     返回当事件被触发时，&quot;ALT&quot;是否被按下</span></span><br><span class="line"><span class="comment">//ctrlKey    返回当事件被触发时，&quot;CTRL&quot;是否被按下</span></span><br></pre></td></tr></table></figure><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p><img src="E:\23\字节训练营前端基础\事件冒泡.png" alt="image-20240123161359534"></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ev&amp;&amp;ev.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">    ev.<span class="title function_">stopPropagation</span>();<span class="comment">//在IE游览器中取消冒泡事件</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ev.<span class="property">cancelBUbble</span> = <span class="literal">true</span>;<span class="comment">//将冒泡事件取消</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\冒泡.png" alt="image-20240123163433586"><img src="E:\23\字节训练营前端基础\冒泡2.png" alt="image-20240123163520019"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/posts/754dfdw.html"/>
      <url>/posts/754dfdw.html</url>
      
        <content type="html"><![CDATA[<p>以下是 ES6 中的全部新规则：</p><ol><li>块级作用域：引入了 <code>let</code> 和 <code>const</code> 关键字，可以在块级作用域内声明变量，使得变量的作用域更加清晰和可控<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>箭头函数：引入了箭头函数的语法，提供了更简洁的函数定义方式，并且箭头函数内部的 <code>this</code> 值是根据函数定义时的上下文确定的，而不是函数被调用时的上下文<strong>箭头函数没有自己的 <code>this</code> 绑定，它无法访问到对象的实例属性和原型属性</strong>。<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>默认参数：函数参数可以设置默认值，当调用函数时没有传递对应参数时，将使用默认值<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>扩展运算符：使用 <code>...</code> 语法可以将数组或对象展开，方便地进行数组合并、对象合并、函数调用等操作<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>解构赋值：可以通过解构赋值从数组或对象中提取值，并将其赋给变量，使得代码更简洁易读<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>模板字符串：使用反引号 ` 包裹字符串，可以在字符串中插入变量或表达式，更方便地进行字符串拼接<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>类和模块：引入了 <code>class</code> 关键字，可以使用面向对象的方式来定义类和创建对象。同时，引入了模块化的概念，可以使用 <code>import</code> 和 <code>export</code> 关键字导入和导出模块<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>Promise：引入了 Promise 对象，用于处理异步操作，使得异步代码更加可读和易于维护<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>简化的对象字面量：可以使用更简洁的语法来定义对象字面量，包括省略冒号和函数关键字等<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>for…of 循环：引入了 <code>for...of</code> 循环，用于遍历可迭代对象（如数组、字符串、Set、Map 等）的元素<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>Generator：引入了 Generator 函数，可以创建迭代器对象，使得迭代过程更加灵活和可控<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>Symbol：引入了 Symbol 数据类型，用于创建唯一的标识符，可以用作对象的属性名<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>Proxy 和 Reflect：引入了 Proxy 和 Reflect 对象，可以拦截和修改对象的操作，提供了更强大的元编程能力<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li><li>数组和对象的新方法：引入了许多新的数组和对象的方法，如数组的 <code>find</code>、<code>findIndex</code>、<code>includes</code> 方法，对象的 <code>Object.assign</code>、<code>Object.keys</code>、<code>Object.values</code> 等方法，使得对数组和对象的操作更加方便和高效<a href="https://www.w3schools.com/js/js_es6.asp">1</a>。</li></ol><p>在 ES6 中，<code>const</code> 是一个声明变量的关键字，用于声明一个常量。常量是指一旦被赋值后就不能再被修改的变量。</p><p><code>const</code> 声明的常量具有以下特点：</p><ol><li><p>声明时必须同时进行初始化赋值，且不能再次赋值。例如：<code>const PI = 3.14;</code>。如果在声明时没有进行初始化赋值，或者尝试对常量进行再次赋值，都会导致语法错误。</p></li><li><p>常量的作用域与 <code>let</code> 相同，都是块级作用域。常量在声明的块级作用域内有效，超出作用域范围后就无法访问。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 报错，x is not defined</span></span><br></pre></td></tr></table></figure></li><li><p><code>const</code> 声明的常量不会被提升（hoisting）。这意味着常量必须在使用之前先进行声明和赋值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 报错，x is not defined</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>const</code> 声明的常量是块级作用域，但对于复合类型（对象、数组）的常量来说，常量保存的是引用地址，而不是值本身。这意味着，虽然不能对常量重新赋值，但可以修改常量指向的对象或数组的属性。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>; <span class="comment">// 可以修改常量 obj 的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 输出 &#123; name: &#x27;Bob&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 可以修改常量 arr 的数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><p>总结起来，<code>const</code> 关键字用于声明一个常量，常量的值一旦被赋值后就不能再被修改。常量具有块级作用域，不会被提升，但对于复合类型的常量来说，可以修改常量指向的对象或数组的属性。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript语法</title>
      <link href="/posts/iuygh56.html"/>
      <url>/posts/iuygh56.html</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><p>前端分为三层：结构层，表现层，行为层<br>javascript主要作用：定义网页的行为。<br>主要组成部分：</p><ol><li>ECMAScript(js核心部分)</li><li>DOM（文档对象模型）Document Obect Model</li><li>BOM（浏览器对象模型）Browser Object Model<br>主要运行在浏览器，node，Adobe flash上<br>浏览器内核/    渲染引擎：<br>浏览器引擎：网页浏览器引擎俗称浏览器内核，又叫排版引擎或者渲染引擎，是一套处理标记语言（例如html，xml，图片文件等）和格式化信息（例如CSS，xsl，xml）并进行内容展现的应用软件组件。<br>javascipt的引入方式</li><li>通过script标签引入外部js文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=”index.<span class="property">js</span>” type=<span class="string">&quot;text/javascrpt&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>使用script标签编写内部js代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;这是内部编写的js代码&quot;</span>)&lt;/scipt&gt;</span><br></pre></td></tr></table></figure></li><li>内联方式（一般不使用）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclck=<span class="string">&quot;alert(&quot;</span><span class="title class_">Hello</span><span class="string">&quot;)&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 单行注释使用<span class="comment">//</span></span><br><span class="line"><span class="number">2.</span> 多行注释使用<span class="comment">/*注释*/</span></span><br></pre></td></tr></table></figure><h4 id="javascrip的输出方式"><a href="#javascrip的输出方式" class="headerlink" title="javascrip的输出方式"></a>javascrip的输出方式</h4></li><li>文档输出：docment<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(”text”).<span class="property">innerHTML</span>=<span class="string">&quot;&lt;p&gt;输出内容&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//输出文本单元</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(”text”).<span class="property">innerText</span>=”文本”;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(”内容”);</span><br><span class="line"><span class="comment">//会将body内容全部替换</span></span><br></pre></td></tr></table></figure></li><li>控制台输出：console<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(”控制台输出”)；</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(”控制台错误”)；</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;控制台警告&quot;</span>);</span><br><span class="line"><span class="comment">//计算代码执行的时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>();<span class="comment">//计时开始，置于代码前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>();<span class="comment">//计时结束，置于代码后</span></span><br></pre></td></tr></table></figure></li><li>窗口输出：window<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;这是警告框&quot;</span>)；</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">confirm</span>(”这是确认框”);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">prmpt</span>(”这是提示框”)；</span><br></pre></td></tr></table></figure><h4 id="javascript变量"><a href="#javascript变量" class="headerlink" title="javascript变量"></a>javascript变量</h4>变量：用来储存变量的容器</li></ol><p>变量声明：var(变量)          let(es6新增声明变量)       const(声明常量)</p><p><strong>变量没有声明直接赋值，为全局变量，未声明的js变量会自动作为windows的属性。</strong></p><p>var a；//声明变量a<br>const b；//声明常量b<br>let c = 10；//变量c具有块级作用域，只在块内有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">10</span>; <span class="comment">// 在函数作用域中声明变量 x</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>; <span class="comment">// 在块级作用域中声明变量 y</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出 10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 输出 20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出 10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 报错，y 在块级作用域之外不可见</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>();</span><br><span class="line"><span class="comment">//与之前的 var 关键字相比，let 声明的变量具有块级作用域，而不是函数作用域。这意味着 let 声明的变量只在声明的块（例如，if语句、循环或函数内部的块）中可见，而不是整个函数或全局作用域。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作用域指的是在 JavaScript 中，变量的作用域范围仅限于函数内部。也就是说，在函数内部声明的变量在函数外部是不可见的。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>; <span class="comment">// 在函数作用域中声明变量 x</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 报错，x 在函数外部不可见</span></span><br></pre></td></tr></table></figure><p>变量赋值：<br>a=10；//变量赋值<br>b=20；//常量赋值后就不能被更改</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ol><li><p>值类型(Number,Boolean,String,undefined,Null,Symbol)</p></li><li><p>引用数据类型(Object,Array,Function）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number:数字</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//String:字符串</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;string1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;string2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">`string3`</span>;<span class="comment">//反引号，es6中新增模版字符串,更好地进行拼接字符串</span></span><br><span class="line"><span class="comment">//可以在字符串中直接加入变量，输出与使用+拼接字符串一致</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`字符串拼接<span class="subst">$&#123;str1&#125;</span>,<span class="subst">$&#123;str2&#125;</span>`</span>)</span><br><span class="line"><span class="comment">//Boolean:布尔值</span></span><br><span class="line"><span class="keyword">var</span> bool1=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> bool2=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//undefined:未定义（有声明未赋值）</span></span><br><span class="line"><span class="keyword">var</span> un;</span><br><span class="line"><span class="comment">//Null:对空</span></span><br><span class="line"><span class="keyword">var</span> kong=<span class="literal">null</span>;<span class="comment">//清空变量</span></span><br><span class="line"><span class="comment">//Symbol:ES6中新增的原始数据类型，表示独一无二的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object:对象</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;;<span class="comment">//键值对</span></span><br><span class="line"><span class="comment">//Array:数组</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;]</span><br><span class="line"><span class="comment">//Function:函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">/*1.内建对象</span></span><br><span class="line"><span class="comment">-由ES标准中定义的对象，在任何ES中都可以使用</span></span><br><span class="line"><span class="comment">-比如：Math String Number Boolean Function Object...</span></span><br><span class="line"><span class="comment">2.宿主对象</span></span><br><span class="line"><span class="comment">-由JS运行环境提供的对象，目前来讲主要是有游览器提供的对象</span></span><br><span class="line"><span class="comment">-比如：BOM DOM</span></span><br><span class="line"><span class="comment">3.自定义对象</span></span><br><span class="line"><span class="comment">-有开发人员自己创建的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//创建一个对象：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">//使用对象字面量来创建一个对象：</span></span><br><span class="line"><span class="keyword">var</span> obj =&#123;&#125;;</span><br><span class="line"><span class="comment">/*向对象中添加一个属性</span></span><br><span class="line"><span class="comment">语法：对象.属性名 = 属性值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要使用特殊的属性名，不能采用.的方式来操作，需要使用另外一种方式：</span></span><br><span class="line"><span class="comment">语法：对象[&quot;属性名&quot;] = 属性值</span></span><br><span class="line"><span class="comment">读取时也需要采用这种方式：对象[&quot;属性名&quot;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">删除对象的属性</span></span><br><span class="line"><span class="comment">语法：delete 对象.属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj.<span class="property">key</span> = value;</span><br><span class="line"><span class="comment">//也可以在使用字面对象量创建对象时，直接指定对象中的属性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：var obj = &#123;属性名：属性值,属性名：属性值。。。&#125;</span></span><br><span class="line"><span class="comment">对象字面量的属性名可以加引号也可以不加，建议不加，</span></span><br><span class="line"><span class="comment">但如果使用一些特殊的名字，则必须加引号</span></span><br><span class="line"><span class="comment">对象内部也可以包含对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">key1</span>:value1,<span class="attr">key2</span>:value2....&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>检测对象中是否存在某一个属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">in 运算符：</span></span><br><span class="line"><span class="comment">-通过该运算符可以检查一个对象内部是否包含指定的属性</span></span><br><span class="line"><span class="comment">如果存在则返回true，不存在则返回false</span></span><br><span class="line"><span class="comment">-语法：</span></span><br><span class="line"><span class="comment">&quot;属性名&quot; in 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj对象中存在name属性&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj对象中不存在name属性&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>JS中的变量都是保存在栈内存中间的，基本数据类型的值直接存储在栈内存中，值与值之间独立存在，修改一个不会影响到另外一个值</p><p>对象是保存在堆内存中，每创建一个新的对象，就会在堆内存中间开辟一个新的空间而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是一个对象引用，当通过一个变量修改对象的值时，另外一个也会相应的改变    </p><p><img src="E:\practice\修真四万年\html\1.png" alt="1"></p><ul><li><p>javascript数据类型的判断<br>typeof操作符：用于获取一个变量或者表达式的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&quot;string&quot;</span>;</span><br><span class="line"><span class="comment">//使用空格或者（）来调用typeof</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num);</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="title function_">typeof</span>(str1));</span><br></pre></td></tr></table></figure><p>instanceof操作符：用于判断一个引用类型属于哪个数据类型（只适用于引用类型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//instanceof 前者是否是后者的引用，返回true或者false</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br></pre></td></tr></table></figure></li><li><p>数据类型转换</p><ol><li><p>显示类型转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(变量) 将变量转换为数字类型</span><br><span class="line"><span class="title class_">String</span>(变量) 将变量转换为字符串类型</span><br><span class="line"><span class="title class_">Boolean</span>(变量) 将变量转换为bool类型，除<span class="number">0</span> <span class="string">&quot;&quot;</span> <span class="title class_">Null</span> undifined <span class="title class_">NaN</span>之外都返回<span class="literal">true</span></span><br><span class="line"><span class="built_in">parseFloat</span>(变量) 将变量转换为浮点类型</span><br><span class="line"><span class="built_in">parseInt</span>(变量)  将变量转换为整数类型</span><br><span class="line"><span class="keyword">var</span> a  =<span class="string">&quot;123b4&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);<span class="comment">//转换后a = 123，发生截断</span></span><br><span class="line">将其它数据类型转换为<span class="title class_">String</span></span><br><span class="line">方式一：</span><br><span class="line"> 调用被转换数据类型的<span class="title function_">toString</span>()方法，该方法不会影响原变量，但是注意<span class="literal">null</span>与<span class="literal">undefined</span>没有<span class="title function_">toString</span>()方法，如果调用，则会报错。</span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"> <span class="keyword">var</span> b = a.<span class="title function_">toString</span>();<span class="comment">//b为Sring类别，a仍然为number类型</span></span><br><span class="line"> 方式二：</span><br><span class="line">   调用<span class="title class_">String</span>()函数，并将被转换数据作为实参传入函数</span><br><span class="line"> <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"> a = <span class="title class_">String</span>(a);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="JavaScript运算符"><a href="#JavaScript运算符" class="headerlink" title="JavaScript运算符"></a>JavaScript运算符</h4><ul><li>运算符：<ol><li>赋值运算符     = </li><li>算术运算符     +   -   *   /   %</li><li>比较运算符     &gt;   &lt;   &gt;=   &lt;=   ==   !=   ===   !==<br> ===判断是否绝对等于（根据数值与数据类型，全相等才返回true）<br> !==判断是否不绝对等于</li><li>逻辑运算符    &amp;&amp;        ||          ！</li><li>一元运算符    ++        –</li><li>二元运算符    +=        -=          *=          /=          %=</li><li>三元运算符    ?:   </li></ol></li><li>运算符的应用<ol><li>算术运算符  +  可以用于拼接字符串</li><li>二元运算符   += 也可以拼接字符串</li><li>数据类型强制转换（硬性转换）</li></ol></li><li>运算符优先级<br>算术运算符&gt;比较运算符&gt;逻辑运算符&gt;赋值运算符</li></ul><h4 id="初级事件绑定（给元素绑定事件）"><a href="#初级事件绑定（给元素绑定事件）" class="headerlink" title="初级事件绑定（给元素绑定事件）"></a>初级事件绑定（给元素绑定事件）</h4><p>HTML事件时发生在HTML元素上的事情，在当HTML页面中使用JavaScript时，js可以触发这些事件。HTML事件可以是<strong>游览器行为</strong>，也可以是<strong>用户行为</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>通过id名获取HTML元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">document.getElementById(&quot;id名&quot;);</span><br><span class="line">onload事件，游览器事件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//入口函数，当页面加载完毕后就执行该处代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obtn = <span class="variable language_">document</span>.<span class="title function_">getElemnetById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    obtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;aha&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\事件初绑定.png" alt="image-20230826210119218"></p><h4 id="分支与循环"><a href="#分支与循环" class="headerlink" title="分支与循环"></a>分支与循环</h4><p>JavaScript的分支if，switch等与C语言一致，for循环，while循环，do…while循环语法与C语言一致。<br>for….in循环，用于遍历对象的属性，多用于对象，数组等数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//执行代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">函数<span class="keyword">function</span></span><br><span class="line">函数也是一个对象</span><br><span class="line">函数中间、可以封装一些功能（代码），在需要时可以执行这些功能（代码）</span><br><span class="line"></span><br><span class="line">创建一个函数对象，可以将要封装的代码以字符串的形式传递给构造函数</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;Hello,这是我弟一个函数&#x27;);&quot;</span>);</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,这是我第二个函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line">立即执行函数：</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    函数实体</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JavaScript</span>函数通过<span class="keyword">function</span>关键词进行定义，其后是函数名和括号 ()</span><br><span class="line">语法：</span><br><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>，参数<span class="number">2</span>，参数<span class="number">3</span>)&#123;</span><br><span class="line">函数实体</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h4><ul><li><p>有无函数名分类</p><ol><li><p>命名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//函数实体，执行过程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.变量储存函数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//函数实体，执行过程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.事件调用函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//事件调用匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//立即执行变量储存函数</span></span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"><span class="comment">//事件调用变量储存函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = func;<span class="comment">//不需要增加（）</span></span><br><span class="line"><span class="comment">//自执行函数</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;自执行函数&quot;</span>)</span><br><span class="line">&#125;)()<span class="comment">//直接进行该函数 </span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>有无参数分类</p><ol><li>有参数函数</li><li>无参数函数</li></ol></li></ul><h4 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h4><p>闭包函数是指在一个函数内部定义另一个函数，并且这个内部函数可以访问到外部函数的变量。换句话说，闭包函数可以记住并访问它被创建时的上下文环境。</p><p>闭包函数的具体解释如下：</p><ol><li>在外部函数内部定义一个内部函数。</li><li>内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。</li><li>内部函数可以访问外部函数的参数和局部变量，以及外部函数中定义的其他函数。</li><li>内部函数可以在外部函数执行完毕后被调用，仍然可以访问外部函数的变量。</li><li>外部函数的返回值是<strong>内部函数本身</strong>，或者是对<strong>内部函数的引用</strong>。</li></ol><p>闭包函数的一个常见应用场景是在事件处理函数中，例如在循环中给多个元素添加点击事件，使用闭包函数可以解决循环变量共享的问题。</p><p>闭包函数的优点是可以<strong>实现数据的封装和隐藏</strong>，避免全局变量的污染，同时可以<strong>延长变量的生命周期</strong>。</p><p>需要注意的是，由于闭包函数可以访问外部函数的变量，如果闭包函数持有外部函数中的大量变量，可能会导致内存泄漏的问题，因此在使用闭包函数时需要注意内存管理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包 = 内层函数 + 引用的外层函数变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数闭包不一定有return,函数闭包不一定会有内存泄漏</span></span><br><span class="line"><span class="comment">//闭包形式，统计函数调用的次数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span>  i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数被调用了$&#123;i&#125;次&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">count</span>();<span class="comment">//调用一次i增加一次</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性</title>
      <link href="/posts/hghgs3.html"/>
      <url>/posts/hghgs3.html</url>
      
        <content type="html"><![CDATA[<h4 id="块元素与内联元素"><a href="#块元素与内联元素" class="headerlink" title="块元素与内联元素"></a>块元素与内联元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">块元素，独占一整行，无任何语义，且块元素不会对里面的元素设置任何默认样式，主要用来对页面进行布局。</span></span><br><span class="line"><span class="comment">常见块元素：p h div</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sapn</span>&gt;</span>内联元素<span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">span也不存在任何语义，主要用来选中文本，为文本设置样式</span></span><br><span class="line"><span class="comment">行内元素：只占自身大小的元素，不会占用一行</span></span><br><span class="line"><span class="comment">常见内联元素： a img iframe span</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">一般用块元素包含内联元素，而不使用内联元素包含块元素，a元素可以包含除自身外所有元素，p元素不能包含任何块元素</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文本标签和样式"><a href="#文本标签和样式" class="headerlink" title="文本标签和样式"></a>文本标签和样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">em和strong标签</span><br><span class="line">两个标签均表示强调的内容</span><br><span class="line">em主要表示语气上的强调，在游览器中默认用斜体显示</span><br><span class="line">strong表示强调的内容，在游览器中默认用粗体显示，比em更强烈</span><br><span class="line"></span><br><span class="line">i标签中的内容会以斜体显示</span><br><span class="line">b标签中的内容会以粗体显示</span><br><span class="line">b标签和i标签无语意，不注重内容，单纯加粗或斜体</span><br><span class="line">s标签 定义横线</span><br><span class="line">small标签中的内容会比他的父元素中的文字小一些，来表示一些细则一类的内容，比如网站的版权声明，合同中的小字</span><br><span class="line"></span><br><span class="line">cite标签 所有加书名号的内容都可以使用cite标签，标识参考的内容</span><br><span class="line">如 书名，电影名，歌名，话剧名</span><br><span class="line">q标签 标识一个短引用，自动给内容加引号</span><br><span class="line">blockquote标签 表示一个长引用（块集引用）</span><br><span class="line"></span><br><span class="line">sup标签 使用sup标签来设置一个上标</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">sub标签 使用sub标签来设置一个下标</span><br><span class="line"></span><br><span class="line">span标签 span不存在任何语义，主要用来选中文本，为文本设置样式</span><br><span class="line">del标签 使用del标签来表示一个删除的内容，del标签中的内容，会自动添加删除线</span><br><span class="line">ins标签 ins标签表示一个插入的内容，ins中的内容，会自动添加下划线</span><br><span class="line"></span><br><span class="line">pre标签 预格式标签，在pre标签内编写代码时，会将代码中的格式保存，不忽略多个空格</span><br><span class="line">code标签 代码标签，专门来表示代码，但是不保留格式，通常与pre结合使用</span><br></pre></td></tr></table></figure><h4 id="单位制"><a href="#单位制" class="headerlink" title="单位制"></a>单位制</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.长度单位</span><br><span class="line">像素 px</span><br><span class="line"><span class="number">1px</span>即为一个像素点</span><br><span class="line"></span><br><span class="line">百分比 %</span><br><span class="line">可以将单位设置为一个百分比形式，这样游览器会根据其父元素的样式来计算该值，当父元素的属性值发生变化时，子元素也会按照比例发生变化，通常用来创建自适应页面</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span>和百分比类似，它是相对于当前元素的字体大小来计算的，<span class="number">1em</span> = <span class="number">1</span>font-size</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.颜色单位</span><br><span class="line">可以直接使用颜色的单词来表示不同的颜色</span><br><span class="line"></span><br><span class="line">也可以使用RGB值来表示不同的颜色</span><br><span class="line">所谓RGB值是指通过Red Green Blue三元色的不同浓度，来表示不同的颜色</span><br><span class="line">语法：rgb(红色的浓度，绿色的浓度，蓝色的浓度);</span><br><span class="line">颜色的浓度需要一个<span class="number">0</span>~<span class="number">255</span>之间的值，<span class="number">255</span>表示最大浓度，<span class="number">0</span>表示最小浓度</span><br><span class="line">也可以采用一个百分数来设置，百分数最终也会转换为<span class="number">0</span>~<span class="number">255</span>之间的数字，<span class="number">0%</span>表示<span class="number">0</span>,<span class="number">100%</span>表示<span class="number">255</span></span><br><span class="line"></span><br><span class="line">也可以使用<span class="number">16</span>进制的数来替代，使用三组两位的十六进制数组来表示一个颜色</span><br><span class="line">语法：#红色蓝色绿色</span><br><span class="line">每组表示一个颜色的浓度，范围从<span class="number">00</span>~ff</span><br><span class="line"><span class="number">00</span>表示没有，相当于rgb中的<span class="number">0</span></span><br><span class="line">ff表示最大，相当于rgb中的<span class="number">255</span></span><br><span class="line">如果两位两位数字重复(如<span class="selector-id">#aabbcc</span>),可以简写(<span class="selector-id">#abc</span>)</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\颜色.png" alt="颜色的另一种方式"></p><h4 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>         用<span class="attribute">color</span>来设置字体的颜色</span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>     用<span class="attribute">font-size</span>来间接设置文字大小。默认大小为<span class="number">16px</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-family</span>    用<span class="attribute">font-family</span>来设置字体当采用某种字体时，如果游览器支持该字体，则使用该字体，如果不支持，则使用默认字体。该样式可以指定多个字体，每个字体间用逗号隔开，当使用多个字体时，会优先使用前面的字体，如果不支持则采用下一个字体，直到最后使用可用的字体或者默认字体</span><br><span class="line">或者使用<span class="keyword">@font-face</span>的方式，将字体文件放置在服务器文件中吗，指定字体名字，通过url下载文件，然后游览器进行渲染</span><br><span class="line"></span><br><span class="line">font-style 可以设置文字的斜体</span><br><span class="line">可选值： normal  默认值，文字正常显示</span><br><span class="line">    italic  斜体，文字以斜体显示</span><br><span class="line">    oblique 倾斜，文字以倾斜的效果显示</span><br><span class="line">大部分游览器都不会对倾斜和斜体作区分，文字展现的效果一样，因此一般只使用italic</span><br><span class="line">font-weight  可以设置文字的加粗显示</span><br><span class="line">可选值： normal  默认值 文字正常显示</span><br><span class="line">        bold    加粗 文字加粗显示</span><br><span class="line">该样式也可以指定<span class="number">100</span>~<span class="number">900</span>之间的<span class="number">9</span>个值，但是一般用户电脑字体大小没有<span class="number">9</span>级，无法达到想要的效果</span><br><span class="line">font-variant 可以设置小型大写字母</span><br><span class="line">可选值： normal 默认值 文本正常显示</span><br><span class="line">small-caps 文本以小型大写字母显示</span><br><span class="line">小型大写字母：将所有的字母都以大写字母显示，但是小写字母要比大写字母小</span><br><span class="line">font 使用该样式可以设置字体的所有样式</span><br><span class="line">可以将字体的样式的值，统一写在font样式中，不同的值之间用空格隔开</span><br><span class="line">使用font设置字体样式时，斜体，加粗，大小写字母，没有顺序要求，甚至可写可不写，如果不写则采用默认值，但是要求文字的大小和字体必须设置，而且字体在最后一个，大小在倒数第二个</span><br><span class="line">line-height 设置行高，通过设置行高间接设置行间距</span><br><span class="line">text-transform 设置文本的大小写</span><br><span class="line">可选值：none  默认值 文本按原有大小写显示</span><br><span class="line">   capitalize 单词的首字母大写，通过空格来识别单词</span><br><span class="line">   uppercase 所有字母大写</span><br><span class="line">       lowercase 所有字母小写</span><br><span class="line">text-decoration 设置文本的修饰</span><br><span class="line">可选值： none 默认值 不添加任何修饰，正常显示</span><br><span class="line">        underline 为文本添加下划线</span><br><span class="line">        overline 为文本添加上划线</span><br><span class="line">        line-through 为文本添加删除线</span><br><span class="line">letter-spacing 指定字符间距</span><br><span class="line">word-spacing 设置单词间的间距，即单词间的空格大小</span><br><span class="line">text-align 可以设置文字的对齐方式</span><br><span class="line">可选值：left 默认值 文本左端对齐</span><br><span class="line">   right  文本右端对齐</span><br><span class="line">   center 文本居中对齐</span><br><span class="line">   justify  两端对齐</span><br><span class="line">text-indent 设置文本的首行缩进，将它设置为正值时，会自动向右移动指定像素，设置为负值时，向左移动指定像素，可用来隐藏一些文字</span><br><span class="line">white-space 选择是否保留空格</span><br></pre></td></tr></table></figure><h2 id="盒子模型-框模型"><a href="#盒子模型-框模型" class="headerlink" title="盒子模型(框模型)"></a>盒子模型(框模型)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">一个盒子分为四部分:内容区(content),内边距(padding),边框(border),外边距(margin)</span><br><span class="line"></span><br><span class="line">为元素设置边框</span><br><span class="line">border-width: 边框的宽度，使用border-width可以分别设置四个边框的宽度，如果用·border-width指定了四个值，按照顺时针方向上 右 下 左分别设置宽度</span><br><span class="line">此外还存在border-xxx-width分别设置四个边框的宽度，xxx的值分别为right，left，top，bottom</span><br><span class="line">border-color: 边框的颜色，规则与width一致</span><br><span class="line">border-style: 边框的样式，规则与width也一致</span><br><span class="line">可选值：  none 默认值 没有边框</span><br><span class="line">         solid 实线</span><br><span class="line">     dotted 点状边框</span><br><span class="line">         dashed 虚线边框</span><br><span class="line">     double 双线边框</span><br><span class="line">border：简写样式，可以同时设置四个边框的颜色，宽度，样式，无任何顺序要求，也可以分别指定</span><br><span class="line">border-xxx：xxx值为top，bottom，left，right</span><br><span class="line">将元素width，height设置为<span class="number">0</span>，可得到全为边框，可以利用这种方式设置不同图形</span><br><span class="line"></span><br><span class="line">内边距，内容区与边框之间的距离</span><br><span class="line">可以通过padding-right，padding-left，padding-top，padding-bottom分别设置四个方向的内边距，使用padding可以同时设置四个内边距的大小，规则与width一致</span><br><span class="line"></span><br><span class="line">外边距：当前盒子与另外的盒子之间的距离</span><br><span class="line">可以通过margin-top，margin-bottom，margin-left，margin-right来设置四个方向的外边距</span><br><span class="line">还可以将值设置为auto，auto一般只设置给水平方向的margin，如果只指定，左外边距和右外边距的margin为auto会将外边距设置为最大值,垂直方向外边距如果设置为auto，则外边距默认为<span class="number">0</span>。</span><br><span class="line">如果将外边距left和right同时设置为auto，则会将左右两侧外边距设置为相同的值</span><br><span class="line">应用：将左右外边距都设置为auto，使得子元素在父元素中水平居中</span><br><span class="line">外边距也存在简写样式margin，规则同padding</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\border.png" alt="border"></p><h4 id="垂直外边距重叠问题"><a href="#垂直外边距重叠问题" class="headerlink" title="垂直外边距重叠问题"></a>垂直外边距重叠问题</h4><p>在网页中相邻的垂直方向的外边距会发生外边距重叠，外边距重叠指的是兄弟元素间的相邻外边距会取而不是取和。如果父子元素的垂直外边距相邻了，则子元素的外边距会设置给父元素。可以通过设置样式将外边距隔开，或者使用内边距或者其他来避免出现重叠问题</p><h4 id="dispaly标签"><a href="#dispaly标签" class="headerlink" title="dispaly标签"></a>dispaly标签</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>标签 </span><br><span class="line">作用:可以将一个元素的类型改变</span><br><span class="line">可选值：</span><br><span class="line">none:不显示元素，并且元素不会在页面中继续占有位置</span><br><span class="line">inline:将一个元素作为内联元素显示</span><br><span class="line">block:将一个元素作为块元素显示</span><br><span class="line">inline-block:将一个元素转换为行内块元素(可以使一个元素既有行内（内联）元素的特点，也有块元素的特点，即可以设置宽高，也不会独占一行)，作为一个整体不会被拆散成多行</span><br><span class="line"></span><br><span class="line">visibility标签</span><br><span class="line">作用：可以设置元素的隐藏和显示的状态</span><br><span class="line">可选值：</span><br><span class="line">visible：默认值，默认值，元素默认会在页面显示</span><br><span class="line">hidden：元素会隐藏不会显示，但是该元素的位置仍会保留</span><br><span class="line"></span><br><span class="line">overflow标签</span><br><span class="line">作用:处理溢出的子元素部分</span><br><span class="line">可选值：</span><br><span class="line">visible: 默认值，对溢出部分不进行处理，元素会在父元素之外的位置显示</span><br><span class="line">hidden: 溢出的内容会被修剪，不会显示</span><br><span class="line">scroll: 会为父元素添加滚动条,但是不智能</span><br><span class="line">auto: 自动添加滚动条，在垂直方向超出则在垂直方向加滚动条，在水平方向超出则在水平方向添加滚动条</span><br><span class="line"></span><br><span class="line">float标签</span><br><span class="line">作用: 使元素浮动，脱离文档流</span><br><span class="line">可选值:  </span><br><span class="line">none: 默认值，元素在文档流中</span><br><span class="line">left: 元素会立即脱离文档流，向左浮动</span><br><span class="line">right: 元素立即脱离文档流，向右浮动</span><br><span class="line">当一个元素设置浮动后(float的值是一个非none的值)，元素会立即脱离文档流，元素脱离文档流后，他下面的元素会向上浮，元素浮动以后，会尽量向页面的左上角或者右上角浮动，直到遇到父元素边框或者其他浮动元素</span><br><span class="line">如果浮动元素的父元素是一个没有浮动的块元素，则浮动元素不会超过块元素,且浮动元素不会超过它上面的兄弟元素，最多一边齐平。</span><br><span class="line">浮动的元素不会盖住文字，文字会环绕在浮动元素边。当块元素脱离文档流后，高度和宽度都由内容撑开，内联元素脱离文档流后，就会变成块元素，可以设置宽和高。</span><br><span class="line"></span><br><span class="line">clear标签</span><br><span class="line">作用：清除其他元素浮动对该元素的影响</span><br><span class="line">可选值：</span><br><span class="line">none 默认值，不清除浮动</span><br><span class="line">left:清除左侧浮动元素对当前元素的影响</span><br><span class="line">right:清除右侧浮动元素对当前元素的影响</span><br><span class="line">both:清除两侧浮动元素对当前元素产生的影响(清除影响最大的浮动元素的影响)</span><br></pre></td></tr></table></figure><h4 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在文档流中，父元素的高度是被子元素撑开的，但是当子元素设置为浮动后，子元素完全脱离开文档流，无法撑起父元素，导致父元素的高度塌陷。而由于父元素高度塌陷，父元素下面的所有元素都会向上移动，导致页面布局混乱。</span><br><span class="line"></span><br><span class="line">根据W3C的标准，在页面中元素都有一个隐藏的属性Block Formatting Context，简称BFC，该属性可以设置打开或者关闭，默认关闭。</span><br><span class="line"></span><br><span class="line">当开启BFC以后，元素将会具有以下特性：</span><br><span class="line"><span class="number">1</span>.父元素的垂直外边距不会与子元素重叠</span><br><span class="line"><span class="number">2</span>.开启BFC的元素不会被浮动的元素覆盖</span><br><span class="line"><span class="number">3</span>.开启BFC的元素可以包含浮动的子元素</span><br><span class="line"></span><br><span class="line">开启元素的BFC</span><br><span class="line"><span class="number">1</span>.设置元素的浮动</span><br><span class="line">使用这种方式开启，可以撑开父元素，但是会导致父元素的宽度缺失，而且元素浮动导致的元素上移，无法通过这种方式解决</span><br><span class="line"><span class="number">2</span>.设置元素的绝对定位</span><br><span class="line"><span class="number">3</span>.设置元素为inline-block</span><br><span class="line">可以解决问题，但是会导致元素的宽度丢失</span><br><span class="line"><span class="number">4</span>.将元素的<span class="attribute">overflow</span>设置为一个非visible的值(推荐将值设置为hidden，副作用最小开启BFC)</span><br><span class="line"></span><br><span class="line">在高度塌陷的父元素的最后，添加一个空白的<span class="selector-tag">div</span>，然后对这个<span class="selector-tag">div</span>元素进行<span class="attribute">clear</span>浮动清理，就可以通过这个空白的<span class="selector-tag">div</span>撑开父元素的高度，基本没有副作用的解决塌陷问题</span><br><span class="line"></span><br><span class="line">通过after伪类元素最后添加一个空白的块元素，然后对其清除浮动</span><br><span class="line">.父元素名<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相对定位与绝对定位"><a href="#相对定位与绝对定位" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">定位：</span><br><span class="line">定位是指将指定的元素摆放在页面的任意位置，通过<span class="attribute">position</span>属性来设置元素的定位</span><br><span class="line">可选值：</span><br><span class="line">static 默认值，元素没有开启定位</span><br><span class="line">relative 开启元素的相对定位</span><br><span class="line">absolute 开启元素的绝对定位</span><br><span class="line">fixed 开启元素的固定定位(也是绝对定位的一种)</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为relative时，则开启了元素的相对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.相对定位是相对于元素在文档流中原来的位置进行定位</span><br><span class="line"><span class="number">3</span>.相对定位的元素不会脱离文档流</span><br><span class="line"><span class="number">4</span>.相对定位会是元素提升一个层级</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为absolute时，则开启了元素的绝对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的绝对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.开启绝对定位，会使元素脱离文档流</span><br><span class="line"><span class="number">3</span>.元素的绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的(一般情况，开启了子元素绝对定位都会同时开启父元素的相对定位)</span><br><span class="line">如果所有的祖先元素都没有开启定位，则会相对于游览器的窗口进行定位</span><br><span class="line"><span class="number">4</span>.绝对定位会使元素提升一个层级</span><br><span class="line"><span class="number">5</span>.绝对定位会改变元素的性质，内联元素变成块元素，块元素的高度和宽度都被内容撑开</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为fixed时，则开启了元素的固定定位</span><br><span class="line">固定定位也是一种绝对定位，他的大部分特点和绝对定位一样</span><br><span class="line">不同点：</span><br><span class="line">固定定位永远都会相对于游览器窗口进行定位</span><br><span class="line">固定定位会固定在游览器窗口的某个位置，不会随滚动条滚动</span><br><span class="line">当开启了元素的定位(<span class="attribute">position</span>属性值是一个非static的值)时</span><br><span class="line">可以通过<span class="attribute">left</span>，<span class="attribute">right</span>，<span class="attribute">top</span>，<span class="attribute">bottom</span>四个属性来设置元素的偏移量</span><br><span class="line"><span class="attribute">left</span>:元素相对于其定位位置的左侧偏移量</span><br><span class="line">right:元素相对于其定位位置的右侧偏移量</span><br><span class="line">top:元素相对于其定位位置上边的偏移量</span><br><span class="line">bottom:元素相对于其定位位置的下方的偏移量</span><br><span class="line">通常偏移量只需要两个就可以对一个元素进行定位，一般通过水平方向的一个偏移量和垂直方向的一个偏移量来进行定位</span><br><span class="line"></span><br><span class="line">如果定位元素的层级相同，则在html文档中下面的标签元素会盖住上面的元素，而通过z-index属性可以设置元素的层级</span><br><span class="line">z-index标签</span><br><span class="line">可以通过给z-index指定一个正整数作为值，该值将会作为当前元素的层级，层级越高，越优先显示</span><br><span class="line">但是父元素层级再高，也不会盖住子元素</span><br><span class="line">对于没有开启定位的元素，不能使用z-index属性</span><br></pre></td></tr></table></figure><h4 id="透明背景"><a href="#透明背景" class="headerlink" title="透明背景"></a>透明背景</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置元素的透明背景</span><br><span class="line">opacity可以用来设置元素背景的透明，它需要一个0~1之间的值</span><br><span class="line">0表示完全透明，1表示完全不透明0.5表示半透明</span><br><span class="line">opacity属性在IE8及以下的游览器不支持，需要用alpha(opacity=透明度)来设置</span><br><span class="line">透明度需要采用一个0~100之间的值</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\颜色设置方式.png" alt="透明度"></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">背景颜色 <span class="attribute">background-color</span></span><br><span class="line">背景图片 <span class="attribute">background-image</span></span><br><span class="line">语法：</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">图片相对路径</span>);</span><br><span class="line">当背景图片大于元素，默认会显示图片的左上角</span><br><span class="line">当背景图片和元素一样大，将会将图片先全部显示</span><br><span class="line">当背景图片比元素小，则默认会将图片平铺以充满元素</span><br><span class="line"></span><br><span class="line">可以让同时为一个元素指定背景颜色和背景图片，这样背景颜色将会作为背景图片的底色</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-repeat</span>标签</span><br><span class="line">作用：设置背景图片的重复方式</span><br><span class="line">可选值:</span><br><span class="line">repeat 默认值，背景图片会双方向重复</span><br><span class="line">no-repeat 背景图片不会重复，以原图显示</span><br><span class="line">repeat-x 背景图片沿水平方向重复</span><br><span class="line">repeat-y 背景图片沿垂直方向重复</span><br><span class="line"></span><br><span class="line">background-position标签</span><br><span class="line">作用：调整背景图片在元素中的位置</span><br><span class="line">可选值：</span><br><span class="line">该属性可以使用top right bottom left center中的两个值来指定一个背景图片的位置</span><br><span class="line">top left 左上 top center 中上，如果只指出一个值，则第二个值默认为center</span><br><span class="line">也可以直接指定背景图片的偏移量，第一个偏移量是水平偏移量，第二个偏移量是垂直偏移量</span><br><span class="line">语法：background-position:top center;</span><br><span class="line"> <span class="attribute">background-position</span>:水平偏移量 垂直偏移量;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-attachment</span>标签</span><br><span class="line">作用：用来设置背景图片是否随页面一起滚动</span><br><span class="line">可选值：</span><br><span class="line">scroll，默认值，背景图片随窗口一起滚动</span><br><span class="line">fixed，背景图片会固定在某一位置，不随页面滚动，一般只给<span class="selector-tag">body</span>设置</span><br><span class="line"></span><br><span class="line">简写属性<span class="attribute">background</span></span><br><span class="line">作用：通过该属性可以直接设置所有背景相关的样式</span><br><span class="line">无顺序要求，也没有数量要求，没写的属性就采用默认值</span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>标签</span><br><span class="line">作用：用来创建一个表格，表示一些格式化数据，如：课程表等</span><br><span class="line">在<span class="selector-tag">table</span>标签中使用<span class="selector-tag">th</span>标签来表示表头中的内容</span><br><span class="line">使用<span class="selector-tag">tr</span>来表示表格的一行，有几行就有几个<span class="selector-tag">tr</span>标签</span><br><span class="line">在<span class="selector-tag">tr</span>标签中需要使用<span class="selector-tag">td</span>标签来创建一个单元格，有几个单元格就有几个<span class="selector-tag">td</span>(列)</span><br><span class="line"></span><br><span class="line">在一些情况下表格是非常长的，需要将表格分为三部分，表头，表格的主体内容，表格底部，在这种情况下，<span class="selector-tag">html</span>提供了三个标签</span><br><span class="line"><span class="selector-tag">thead</span> 表头，永远显示在表格的头部</span><br><span class="line"><span class="selector-tag">tbody</span> 表格主体，永远显示在表格中间</span><br><span class="line"><span class="selector-tag">tfoot</span> 表格底部，永远显示在表格底部</span><br><span class="line"></span><br><span class="line">这三个标签的作用，是用来区分表格的不同部分，都是<span class="selector-tag">table</span>的子标签，都需要直接写在<span class="selector-tag">table</span>中，<span class="selector-tag">tr</span>需要写在这些标签中。如果表格中没有写<span class="selector-tag">tbody</span>，游览器则会自动添加<span class="selector-tag">tbody</span>，并且将所有的<span class="selector-tag">tr</span>都存放在<span class="selector-tag">tbody</span>中，所以<span class="selector-tag">tr</span>不是<span class="selector-tag">table</span>的子元素，而是<span class="selector-tag">tbody</span>的子元素，无法通过<span class="selector-tag">table</span> &gt; <span class="selector-tag">tr</span>选中</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">caption</span>标签</span><br><span class="line">定义表格的主题</span><br><span class="line">colspan标签</span><br><span class="line">作用：将横向单元格合并</span><br><span class="line">语法：colspan = &quot;合并单元格数&quot;</span><br><span class="line"></span><br><span class="line">rowspan标签</span><br><span class="line">作用：将纵向单元格合并</span><br><span class="line">语法：rowspan = &quot;合并单元格数&quot;</span><br><span class="line"></span><br><span class="line">表格样式</span><br><span class="line"><span class="selector-tag">table</span>是一个块元素，可以设置宽度，<span class="selector-tag">table</span>和<span class="selector-tag">td</span>边框之间默认有一个距离，通过<span class="attribute">border-spacing</span>属性可以设置这个距离，可以通过<span class="attribute">border-collapse</span>来设置表格的边框合并(<span class="attribute">border-collapse</span>:collapse;)，如果设置了边框合并，则<span class="attribute">border-spacing</span>属性自动失效</span><br></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">表单的作用就是用来将用户的信息提交给服务器，例如百度的搜索栏 注册 登录等操作都要填写表单</span><br><span class="line"><span class="selector-tag">form</span>标签</span><br><span class="line">作用：创建一个表单提交数据</span><br><span class="line"><span class="selector-tag">form</span>标签必须指定一个action属性，该属性指向一个服务器的地址，当提交表单时将会提交到action属性指向的地址。使用<span class="selector-tag">form</span>创建的仅仅是一个空白的表单，我们还需要<span class="selector-tag">form</span>中添加不同的表单项</span><br><span class="line">使用<span class="selector-tag">input</span>创建一个文本框，他的type属性值是text,如果需要将表单中的数据提交给服务器，还必须给表单项指定一个name属性值，name表示提交内容的名字</span><br><span class="line">用户填写的信息会附在url地址后边以查询字符串的形式发送给服务器</span><br><span class="line">url地址?查询字符串</span><br><span class="line">格式： 属性名 = 属性值&amp;属性名 = 属性值&amp;属性名 = 属性值</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;text&quot; name = &quot;name&quot; /&gt;</span><br><span class="line"></span><br><span class="line">使用<span class="selector-tag">input</span>创建一个密码框，他的type属性值是password</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;password&quot; name = &quot;password&quot; /&gt;</span><br><span class="line"></span><br><span class="line">提交按钮可以将表单中的信息提交给服务器，使用<span class="selector-tag">input</span>创建一个提交按钮，它的type属性值是submit，在提交按钮中可以通过value属性来指定在按钮上的文字</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;submit&quot; value = &quot;注册&quot; /&gt;</span><br><span class="line">在文本框中也可以指定value，value值作为默认值</span><br><span class="line"></span><br><span class="line">单选按钮</span><br><span class="line">使用<span class="selector-tag">input</span>来创建一个单选按钮，它的type属性值是radio，单选按钮通过name来进行分组，name属性值相同的一组是一组按钮，这种不需要用户直接填写内容的表单项，还必修指定一个value属性，这样被选中的表单项的value属性值最终会提交给服务器</span><br><span class="line">多选框</span><br><span class="line">使用<span class="selector-tag">input</span>来创建一个多选框，它的type属性值是checkbox</span><br><span class="line">如果希望在单选框或者多选框中指定默认选项，则可以在该希望选中的项中添加checked = &quot;checked&quot;属性</span><br><span class="line"></span><br><span class="line">下拉列表</span><br><span class="line">使用select来创建一个下拉列表，在下拉列表中使用option标签来创建一个一个列表项，下拉列表的name属性需要指定给select，而value属性则需要指定给option</span><br><span class="line">可以通过在option中添加selected=&quot;selected&quot;来将选项设置为默认选中</span><br><span class="line">当为select添加multiple=&quot;multiple&quot;属性，将下拉列表变为一个多选下拉列表</span><br><span class="line">autofoucs属性 页面加载时按钮应当自动获得焦点</span><br><span class="line">disabled属性 规定禁用的选项或者选项组</span><br><span class="line">实例：</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;选项值&lt;option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">在select中可以使用optgroup来对选项进行分组，同一个optgroup中的选项是一组，通过<span class="selector-tag">label</span>属性来指定分组的名字</span><br><span class="line"></span><br><span class="line">list属性,在用户输入时提供一个默认的输入（提示，提供一些快捷输入）</span><br><span class="line">实例：</span><br><span class="line">&lt;<span class="selector-tag">input</span> list=&quot;属性名&quot;&gt;</span><br><span class="line">&lt;datalist id = &quot;属性名&quot;&gt;</span><br><span class="line">&lt;option&gt;值<span class="number">1</span>&lt;/option&gt;</span><br><span class="line">&lt;option&gt;值<span class="number">2</span>&lt;/option&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br><span class="line">使用<span class="selector-tag">textarea</span>来创建一个多行文本域</span><br><span class="line">&lt;<span class="selector-tag">textarea</span> name = &quot;name&quot;&gt; &lt;/<span class="selector-tag">textarea</span>&gt;</span><br><span class="line"></span><br><span class="line">重置按钮</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;reset&quot; /&gt;可以创建一个重置按钮，点击后表单中内容将会恢复为默认值</span><br><span class="line">创建一个单纯的按钮，按钮无任何功能，只能用来点击(一般结合js使用)</span><br><span class="line">&lt;<span class="selector-tag">input</span> type = &quot;<span class="selector-tag">button</span>&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>标签</span><br><span class="line">可以使用&lt;<span class="selector-tag">button</span> type = &quot;属性值&quot;&gt;&lt;/<span class="selector-tag">button</span>&gt;来创建按钮，效果根据属性值定义，更加灵活</span><br><span class="line"></span><br><span class="line">在<span class="selector-tag">html</span>中提供了<span class="selector-tag">label</span>标签，用来选中表单中提示文字(可以为提示文字设置样式)</span><br><span class="line">&lt;<span class="selector-tag">label</span>&gt;提示文字&lt;/<span class="selector-tag">label</span>&gt;</span><br><span class="line">该标签可以指定一个for属性，该属性的值需要制定一个表单项的id值</span><br><span class="line"></span><br><span class="line">在表单中可以使用<span class="selector-tag">fieldset</span>来为表单项进行分组，可以将表单项的同一组放入到一个<span class="selector-tag">fieldset</span>的标签中。在<span class="selector-tag">fieldset</span>中可以使用<span class="selector-tag">legend</span>子标签来指定组名</span><br><span class="line">&lt;<span class="selector-tag">legend</span>&gt;组名&lt;/ <span class="selector-tag">legend</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有一些情况，有些特殊代码我们只需要在某些特殊的游览器中执行，而在其他的游览器中不需要执行，这样就可以使用CSS Hack来解决问题</span><br><span class="line">CSS Hack实际上是一个特殊的代码，这段代码只在某些游览器中可以识别，而其他游览器则不能识别，通过这种方式，来为一些游览器设置特殊代码.......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript数组</title>
      <link href="/posts/mhvgb76.html"/>
      <url>/posts/mhvgb76.html</url>
      
        <content type="html"><![CDATA[<h3 id="Javascript数组"><a href="#Javascript数组" class="headerlink" title="Javascript数组"></a>Javascript数组</h3><h4 id="数组创建方式"><a href="#数组创建方式" class="headerlink" title="数组创建方式"></a>数组创建方式</h4><ol><li><p>字面量创建  【】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>常规方式 使用构造函数 new关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br></pre></td></tr></table></figure></li><li><p>常规方式 简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;ahah&quot;</span>,<span class="string">&quot;213&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h4><p><strong>constructor</strong> 返回创建数组对象的原型函数<br><strong>length</strong> 设置或者返回数组的元素个数<br><strong>prototype</strong>  允许向数组中添加属性或者方法</p><h4 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">concat</span>(...args)：将两个或多个数组合并成一个新数组。</span><br><span class="line"><span class="title function_">copyWithin</span>(target, start, end)：将数组中指定位置的元素复制到其他指定位置上，并返回修改后的数组。</span><br><span class="line"><span class="title function_">entries</span>()：返回一个包含数组键值对的迭代器对象。</span><br><span class="line"><span class="title function_">every</span>(callbackFn, thisArg)：检测数组中的所有元素是否满足指定条件。</span><br><span class="line"><span class="title function_">fill</span>(value, start, end)：用静态值填充数组的所有元素。</span><br><span class="line"><span class="title function_">filter</span>(callbackFn, thisArg)：创建一个新数组，其中包含通过指定函数测试的所有元素。</span><br><span class="line"><span class="title function_">find</span>(callbackFn, thisArg)：返回数组中满足提供的测试函数的第一个元素的值。</span><br><span class="line"><span class="title function_">findIndex</span>(callbackFn, thisArg)：返回数组中满足提供的测试函数的第一个元素的索引。</span><br><span class="line"><span class="title function_">flat</span>(depth)：将嵌套的数组结构变为一维数组。</span><br><span class="line"><span class="title function_">flatMap</span>(callbackFn, thisArg)：首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</span><br><span class="line"><span class="title function_">forEach</span>(callbackFn, thisArg)：对数组中的每个元素执行指定的函数。</span><br><span class="line"><span class="title function_">from</span>(arrayLike, mapFn, thisArg)：通过将类似数组或可迭代对象转换为数组来创建一个新数组。</span><br><span class="line"><span class="title function_">includes</span>(searchElement, fromIndex)：判断数组是否包含指定元素，返回布尔值。</span><br><span class="line"></span><br><span class="line"><span class="title function_">indexOf</span>(searchElement, fromIndex)：返回数组中指定元素的第一个索引，如果不存在则返回-<span class="number">1</span>。</span><br><span class="line"><span class="title function_">lastIndexOf</span>(searchElement, fromIndex)：返回数组中指定元素的最后一个索引，如果不存在则返回-<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="title function_">join</span>(separator)：将数组的所有元素连接成一个字符串。</span><br><span class="line"><span class="title function_">keys</span>()：返回一个包含数组键的迭代器对象。</span><br><span class="line"></span><br><span class="line"><span class="title function_">map</span>(callbackFn, thisArg)：创建一个新数组，其中包含对原始数组中的每个元素应用指定函数的结果。</span><br><span class="line"></span><br><span class="line"><span class="title function_">pop</span>()：删除数组的最后一个元素，并返回该元素的值。</span><br><span class="line"><span class="title function_">push</span>(element1, element2, ..., elementN)：向数组的末尾添加一个或多个元素，并返回新的长度。</span><br><span class="line"><span class="title function_">shift</span>()：删除数组的第一个元素，并返回该元素的值。</span><br><span class="line"></span><br><span class="line"><span class="title function_">reduce</span>(callbackFn, initialValue)：对数组中的所有元素执行一个指定的累加器函数，并返回一个值。</span><br><span class="line"><span class="title function_">reduceRight</span>(callbackFn, initialValue)：对数组中的所有元素执行一个指定的累加器函数（从右到左遍历），并返回一个值。</span><br><span class="line"><span class="title function_">reverse</span>()：颠倒数组中元素的顺序。</span><br><span class="line"><span class="title function_">unshift</span>(element1, element2, ..., elementN)：向数组的开头添加一个或多个元素，并返回新的长度。</span><br><span class="line"></span><br><span class="line"><span class="title function_">slice</span>(start, end)：从数组中提取指定的元素，并将其作为一个新数组返回。</span><br><span class="line"><span class="title function_">some</span>(callbackFn, thisArg)：检测数组中是否至少有一个元素满足指定条件。</span><br><span class="line"><span class="title function_">sort</span>(compareFn)：对数组进行排序。</span><br><span class="line"><span class="title function_">splice</span>(start, deleteCount, item1, item2, ...)：向/从数组中添加/删除元素，并返回被删除的元素。</span><br><span class="line"><span class="title function_">toLocaleString</span>()：返回一个表示数组元素的字符串。</span><br><span class="line"><span class="title function_">toString</span>()：返回一个表示数组元素的字符串。</span><br><span class="line"></span><br><span class="line"><span class="title function_">values</span>()：返回一个包含数组值的迭代器对象。</span><br></pre></td></tr></table></figure><h4 id="字符串创建方式"><a href="#字符串创建方式" class="headerlink" title="字符串创建方式"></a>字符串创建方式</h4><ol><li><p>字面量创建         “ “  ‘ ‘  ``</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;nijaj&quot;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;asda&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">`shasd`</span></span><br></pre></td></tr></table></figure></li><li><p>使用new关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">str = <span class="string">&quot;21312&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;asd&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h4><p><strong>constructor</strong> 返回创建字符串对象的原型函数<br><strong>length</strong> 设置或者返回字符串长度<br><strong>prototype</strong>  允许向字符串中添加属性或者方法</p><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">length</span>()：返回字符串的长度。</span><br><span class="line"></span><br><span class="line"><span class="title function_">charAt</span>(index)：返回指定位置的字符。</span><br><span class="line"></span><br><span class="line"><span class="title function_">charCodeAt</span>(index)：返回指定位置字符的<span class="title class_">Unicode</span>编码。</span><br><span class="line"></span><br><span class="line"><span class="title function_">codePointAt</span>(index)：返回指定位置字符的<span class="title class_">Unicode</span>码点。</span><br><span class="line"></span><br><span class="line"><span class="title function_">concat</span>(str1, str2, ...)：将两个或多个字符串拼接在一起。</span><br><span class="line"></span><br><span class="line"><span class="title function_">includes</span>(searchValue, startIndex)：判断字符串是否包含指定的字符或子字符串。</span><br><span class="line"></span><br><span class="line"><span class="title function_">endsWith</span>(searchValue, endIndex)：判断字符串是否以指定的字符或子字符串结尾。</span><br><span class="line"></span><br><span class="line"><span class="title function_">startsWith</span>(searchValue, startIndex)：判断字符串是否以指定的字符或子字符串开头。</span><br><span class="line"></span><br><span class="line"><span class="title function_">indexOf</span>(searchValue, startIndex)：返回指定字符或子字符串在字符串中第一次出现的位置。</span><br><span class="line"></span><br><span class="line"><span class="title function_">lastIndexOf</span>(searchValue, startIndex)：返回指定字符或子字符串在字符串中最后一次出现的位置。</span><br><span class="line"></span><br><span class="line"><span class="title function_">localeCompare</span>(compareString)：比较两个字符串，并返回一个整数表示比较结果。</span><br><span class="line"></span><br><span class="line"><span class="title function_">match</span>(regexp)：返回字符串中与正则表达式匹配的部分。</span><br><span class="line"></span><br><span class="line"><span class="title function_">matchAll</span>(regexp)：返回一个迭代器，包含所有与正则表达式匹配的结果。</span><br><span class="line"></span><br><span class="line"><span class="title function_">normalize</span>([form])：返回字符串的<span class="title class_">Unicode</span>标准化形式。</span><br><span class="line"></span><br><span class="line"><span class="title function_">padEnd</span>(targetLength, [padString])：在字符串的末尾填充指定的字符，使字符串达到指定的长度。</span><br><span class="line"></span><br><span class="line"><span class="title function_">padStart</span>(targetLength, [padString])：在字符串的开头填充指定的字符，使字符串达到指定的长度。</span><br><span class="line"></span><br><span class="line"><span class="title function_">repeat</span>(count)：将字符串重复指定的次数。</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace</span>(searchValue, replaceValue)：替换字符串中的字符或子字符串。</span><br><span class="line"></span><br><span class="line"><span class="title function_">search</span>(regexp)：返回字符串中与正则表达式匹配的第一个位置。</span><br><span class="line"></span><br><span class="line"><span class="title function_">slice</span>(startIndex, endIndex)：返回字符串的子字符串。</span><br><span class="line"></span><br><span class="line"><span class="title function_">split</span>(separator, limit)：将字符串分割为字符串数组。</span><br><span class="line"></span><br><span class="line"><span class="title function_">substring</span>(startIndex, endIndex)：返回字符串的子字符串。</span><br><span class="line"></span><br><span class="line"><span class="title function_">toLocaleLowerCase</span>()：将字符串转换为本地化小写形式。</span><br><span class="line"></span><br><span class="line"><span class="title function_">toLocaleUpperCase</span>()：将字符串转换为本地化大写形式。</span><br><span class="line"></span><br><span class="line"><span class="title function_">toLowerCase</span>()：将字符串转换为小写。</span><br><span class="line"></span><br><span class="line"><span class="title function_">toUpperCase</span>()：将字符串转换为大写。</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>()：返回字符串的原始值。</span><br><span class="line"></span><br><span class="line"><span class="title function_">trim</span>()：去除字符串两端的空格。</span><br><span class="line"></span><br><span class="line"><span class="title function_">trimEnd</span>()：去除字符串末尾的空格。</span><br><span class="line"></span><br><span class="line"><span class="title function_">trimStart</span>()：去除字符串开头的空格。</span><br><span class="line"></span><br><span class="line"><span class="title function_">valueOf</span>()：返回字符串的原始值。</span><br><span class="line"></span><br><span class="line">这些方法可以通过调用相应的函数来使用，例如：<span class="title function_">length</span>(str)、<span class="title function_">charAt</span>(str, index)、<span class="title function_">concat</span>(str1, str2)等。</span><br></pre></td></tr></table></figure><h4 id="javascript的HTML包装方法"><a href="#javascript的HTML包装方法" class="headerlink" title="javascript的HTML包装方法"></a>javascript的HTML包装方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =  <span class="string">&quot;hello,world&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">anchor</span>(<span class="string">&quot;buttom&quot;</span>));</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">link</span>(<span class="string">&quot;#buttom&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\javascript的html包装放啊.png" alt="image-20230910210509610"></p><h4 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h4><p>用于将非布尔值转换为布尔值（true或者false）</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript对象</title>
      <link href="/posts/xzas235.html"/>
      <url>/posts/xzas235.html</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript的对象"><a href="#JavaScript的对象" class="headerlink" title="JavaScript的对象"></a>JavaScript的对象</h3><p>对象（object）是一个以键值对形式存储属性的集合，每个属性有一个特定的名称，以及与名称相对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：&#123;<span class="attr">key1</span>:value1,<span class="attr">key2</span>:value2,<span class="attr">key3</span>:value3......&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的声明"><a href="#对象的声明" class="headerlink" title="对象的声明"></a>对象的声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过new关键字声明,构造函数</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//需要自行添加属性方法</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">20</span></span><br><span class="line">person.<span class="property">hpbby</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.通过字面量声明 &#123;&#125; 对象的键必须是字符串</span></span><br><span class="line"><span class="keyword">var</span> pur = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">hobby</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象方法和属性的访问"><a href="#对象方法和属性的访问" class="headerlink" title="对象方法和属性的访问"></a>对象方法和属性的访问</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pur = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">hobby</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span>+name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问属性 object.property或者object[&quot;property&quot;]</span></span><br><span class="line"><span class="keyword">let</span> name = pur.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">let</span> name2 = pur[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="comment">//访问方法 在对象上可以执行的动作 object.method()</span></span><br><span class="line">pur.<span class="title function_">hobby</span>();</span><br></pre></td></tr></table></figure><ul><li><p>注意事项</p><p>对象的值可以是对象（对象可以进行嵌套）</p><p>对象的属性具有唯一性，后面如果有相同的属性，会进行覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;lisi&quot;</span></span><br><span class="line">&#125;<span class="comment">//对象name属性值将会变成lisi</span></span><br></pre></td></tr></table></figure><p>对象的键必须是字符串数据类型</p></li></ul><h3 id="JavaScript的类"><a href="#JavaScript的类" class="headerlink" title="JavaScript的类"></a>JavaScript的类</h3><p>在JavaScript中，类是一种用于创建对象的蓝图或模板。它们提供了一种面向对象编程的方式，使我们能够使用相同的属性和方法来创建多个对象。</p><p>类的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6中构造类的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数，用于初始化对象的属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">method1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">method2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5中使用的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PERSON</span>(<span class="params">name,age,hobby</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooby</span> = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行实例化对象</span></span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> <span class="title function_">PERSON</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)&#125;);</span><br><span class="line">zhangsan.<span class="title function_">hobby</span>();</span><br></pre></td></tr></table></figure><ul><li><code>class</code>关键字用于定义一个类，后面跟着类的名称。</li><li><code>constructor</code>是一个特殊的方法，用于在创建对象时初始化对象的属性。它在使用<code>new</code>关键字实例化类时自动调用。</li><li>类中的其他方法定义了类的行为和功能。</li></ul><p>使用类创建对象的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br><span class="line">person1.<span class="title function_">sayHello</span>(); </span><br><span class="line"><span class="comment">// 输出：Hello, my name is John and I am 25 years old.</span></span><br></pre></td></tr></table></figure><p>在上述示例中，我们定义了一个<code>Person</code>类，它具有<code>name</code>和<code>age</code>属性以及一个<code>sayHello</code>方法。可以使用<code>new</code>关键字创建<code>Person</code>类的实例，并调用<code>sayHello</code>方法来输出人物的信息。</p><p>类也可以通过继承来扩展其他类的功能。通过使用<code>extends</code>关键字，一个类可以继承另一个类的属性和方法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, grade</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line"><span class="comment">//super()必须在子类的构造函数中调用，并且需要在使用this关键字之前调用。</span></span><br><span class="line"><span class="comment">//在调用super()时，可以传递参数给父类的构造函数，以便初始化父类的属性。</span></span><br><span class="line"><span class="comment">//如果子类没有自己的构造函数，JavaScript会自动添加一个默认的空构造函数，并在其中调用super()。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is studying in grade <span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">15</span>, <span class="number">9</span>);</span><br><span class="line">student1.<span class="title function_">sayHello</span>(); <span class="comment">// 输出：Hello, my name is Alice and I am 15 years old.</span></span><br><span class="line">student1.<span class="title function_">study</span>(); <span class="comment">// 输出：Alice is studying in grade 9.</span></span><br></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个<code>Student</code>类，它继承了<code>Person</code>类的属性和方法，并添加了一个<code>study</code>方法。我们可以创建<code>Student</code>类的实例，并调用继承的<code>sayHello</code>方法以及自己的<code>study</code>方法。</p><h4 id="使用原型给类增加新的属性和方法-prototype"><a href="#使用原型给类增加新的属性和方法-prototype" class="headerlink" title="使用原型给类增加新的属性和方法 prototype"></a>使用原型给类增加新的属性和方法 prototype</h4><p>在ES6中，我们可以通过类的原型（prototype）来给类增添新的属性和方法。类的原型是一个对象，它包含了类的共享属性和方法。我们可以通过修改类的原型来添加新的属性和方法。</p><p>下面是一个示例，演示如何给类增添新的属性和方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给Person类增添新的属性和方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old. I am a <span class="subst">$&#123;<span class="variable language_">this</span>.gender&#125;</span>.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br><span class="line">person1.<span class="title function_">sayHello</span>(); </span><br><span class="line"><span class="comment">// 输出：Hello, my name is John and I am 25 years old.</span></span><br><span class="line">person1.<span class="title function_">introduce</span>(); </span><br><span class="line"><span class="comment">// 输出：My name is John and I am 25 years old. I am a male.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除原型对象中的属性和方法</span></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span>;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">introduce</span>(); <span class="comment">// 报错：person1.introduce is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改原型对象中的属性和方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old. I am a <span class="subst">$&#123;<span class="variable language_">this</span>.gender&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">person1.<span class="title function_">introduce</span>(); </span><br><span class="line"><span class="comment">// 输出：My name is John and I am 25 years old. I am a female.</span></span><br></pre></td></tr></table></figure><p>在上述示例中，我们使用<code>Person.prototype</code>来给<code>Person</code>类增添新的属性和方法。我们给<code>Person.prototype</code>添加了<code>gender</code>属性和<code>introduce</code>方法。这样，所有通过<code>Person</code>类创建的实例都可以访问这些新添加的属性和方法。</p><p>通过修改类的原型，我们可以动态地给类增添新的属性和方法，而不需要修改类的定义。这样可以实现代码的灵活性和可扩展性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">gender</span>); <span class="comment">// 输出：male</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">gender</span> = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">gender</span>); <span class="comment">// 输出：female</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">gender</span>); <span class="comment">// 输出：male</span></span><br></pre></td></tr></table></figure><p>在上述示例中，我们在<code>person1</code>实例上对<code>gender</code>属性进行了赋值，将其修改为”female”。然后，我们再次访问<code>person1</code>实例的<code>gender</code>属性，发现其值已经被修改为”female”。而在创建<code>person2</code>实例时，它仍然访问到原型对象上的<code>gender</code>属性，其值为”male”。</p><p>需要注意的是，当我们在实例对象中对原型对象上的属性进行赋值或修改时，实际上是创建了一个同名的属性，并将其添加到实例对象中。这个新的属性将会屏蔽原型对象上的同名属性。因此，当我们访问实例对象的该属性时，会优先访问到实例对象中的属性，而不是原型对象中的属性。这种情况下，原型对象上的属性仍然存在，只是被实例对象的属性所遮盖。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/ascdsc21.html"/>
      <url>/posts/ascdsc21.html</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="JavaScript正则表达式的创建"><a href="#JavaScript正则表达式的创建" class="headerlink" title="JavaScript正则表达式的创建"></a>JavaScript正则表达式的创建</h4><ol><li><p>字面量    /表达式/修饰符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a/i</span></span><br></pre></td></tr></table></figure></li><li><p>new关键字      构造函数 new RegExp(“表达式”，修饰符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;i&quot;</span>); </span><br></pre></td></tr></table></figure></li></ol><h4 id="正则表达式对象的方法"><a href="#正则表达式对象的方法" class="headerlink" title="正则表达式对象的方法"></a>正则表达式对象的方法</h4><ul><li><p>exec 检索字符串中指定的值。返回找到的值，并确定其位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="keyword">var</span> string1 = <span class="string">&quot;heasdasd&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">exec</span>(string1));</span><br></pre></td></tr></table></figure></li><li><p>test 检索字符串中指定的值，返回true或者false</p></li><li><p>toString  返回正则表达式的字符串</p></li></ul><h4 id="字符串使用正则表达式"><a href="#字符串使用正则表达式" class="headerlink" title="字符串使用正则表达式"></a>字符串使用正则表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">match</span>(regexp)：返回字符串中与正则表达式匹配的部分。</span><br><span class="line"><span class="title function_">matchAll</span>(regexp)：返回一个迭代器，包含所有与正则表达式匹配的结果。</span><br><span class="line"><span class="title function_">replace</span>(searchValue, replaceValue)：替换字符串中的字符或子字符串。</span><br><span class="line"><span class="title function_">split</span>(separator, limit)：将字符串分割为字符串数组。</span><br></pre></td></tr></table></figure><h4 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i     // ignorecase 忽略大小写</span><br><span class="line">g     // global     全局匹配</span><br><span class="line">m     // multiline  多行匹配</span><br><span class="line">修饰符可以同时使用多个，如ig,im,gm,igm</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\正则.png" alt="image-20230911103249028"></p><h4 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端语言串讲</title>
      <link href="/posts/4ed61cef.html"/>
      <url>/posts/4ed61cef.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端语言串讲"><a href="#前端语言串讲" class="headerlink" title="前端语言串讲"></a>前端语言串讲</h2><p>[toc] </p><p>HTML负责页面结构，内容，相当于网页的骨架，CSS负责设计页面样式，相当于网页的肌肉，使用javascript定义网页的行为，描述在网页的各种动作</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p><img src="E:\23\字节训练营前端基础\DOM树.png" alt="DOM树"></p><p>语义化标签的含义：HTML5语义化标签是指在HTML5中新增的一些标签，它们能够让人一眼就看出来每一个标签的作用和含义，使用语义恰当的标签，使页面有良好的结构，页面元素有含义，能够让和搜索引擎都容易理解。</p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档声明，用于告知游览器网页版本html，html5等--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">html标签，网页的根标签，一个网页只有一个根标签，且网页所有内容都应写在根标签内</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&#x27;UTF-8&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">head标签，该标签中的内容不会在网页中直接显示，用于帮助游览器解析页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">title网页的标题标签，默认显示在游览器的标题栏中</span></span><br><span class="line"><span class="comment">搜索引擎检索页面时，会首先检索title标签中的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">body标签用于设置网页的主体内容，网页中所有可见的内容，都应在body中编写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">标题标签，一共有六级标签,其中h1最重要，仅次于title，会影响到搜索引擎的排名，一个页面只能写一个h1</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                段落标签，段与段之间会有间距</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--br标签可以表示一个换行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span><span class="comment">&lt;!--hr标签生成一条水平线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h4><p>在HTML中，一些形如&lt; &gt;这种特殊字符不能直接使用，需要使用一些特定符号来表示这些特定字符，这些特殊符号就称为<strong>转义字符串</strong><a href="https://www.w3school.com.cn/tags/html_ref_entities.html">转义字符串集</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>             &lt;</span><br><span class="line"><span class="symbol">&amp;gt;</span>             &gt;</span><br><span class="line"><span class="symbol">&amp;nbsp;</span>          空格</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h4><p>iframe元素用于在网页中显示网页，它必须有一个属性src，属性值是嵌套网页的URL，同时，可以为iframe元素设置width和height，iframe元素默认存在边框，可使用CSS去除或调整边框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;百度首页&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!---始终给元素添加title属性是一个很好的习惯，这有助于屏幕阅读器读出内容---&gt;</span></span><br></pre></td></tr></table></figure><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;网页链接（相对路径或者绝对路径）&quot;</span> <span class="attr">download</span>=<span class="string">&quot;下载资源链接&quot;</span>&gt;</span>网页名称<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">target属性可以用来指定打开连接的位置</span></span><br><span class="line"><span class="comment">可选值：</span></span><br><span class="line"><span class="comment">        _self:在当前窗口打开链接（默认值）</span></span><br><span class="line"><span class="comment">        _blank:在新窗口打开链接</span></span><br><span class="line"><span class="comment">    _parent:再父窗口中打开链接</span></span><br><span class="line"><span class="comment">_top:在当前窗体打开链接，并替换掉当前整个窗体(框架页)</span></span><br><span class="line"><span class="comment">        可设置一个内联框架name的属性值，链接将会在内联框架中打开。target=&quot;内联框架name值&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">download属性：指定下载的链接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;#&quot;，则回到当前页面的顶部--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;#id(#后面加id属性)&quot;，则可以回到该页面该id属性标签的位置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若href=&quot;mailto:邮箱地址&quot;，则打开默认电子邮件客户端，并设置收件人为设置的邮箱地址--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><p>meta标签描述了一些基本的元数据。&lt;meta&gt;标签提供了元数据，元数据不显示在页面上，但是会被浏览器解析。通常用于制定网页的描述，关键词，文件的最后修改时间，作者，和其他的元数据。元数据可以使用于浏览器（如何显示内容或者重新加载页面），搜索引擎（关键词），和其他web服务</p><ol><li><p>定义关键词</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,CSS,XML,XHTML,JavaScript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义描述</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;免费web教程&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;MySon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定时刷新页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-eqiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30&quot;</span> <span class="attr">url</span>=<span class="string">&quot;路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义网页编码格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="title标签"><a href="#title标签" class="headerlink" title="title标签"></a>title标签</h4><p>定义浏览器工具栏的标题，当网页添加到收藏夹是，显示在收藏夹的标题，显示在搜索引擎结果页面的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>必须存在的title标签<span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="link标签"><a href="#link标签" class="headerlink" title="link标签"></a>link标签</h4><p>link标签定义了文档与外部资源之间的关系。常用于连接到外部样式表。rel:定义当前文档与被链接文档或者资源的关系，type：定义被链接文档的类型，href：定义被链接文档或资源的位置路径</p><ol><li><p>引入外部CSS文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;文件名.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义标题的图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;images/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;文件名.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h4><p>描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ol><li><p>无序列表<br>使用ul标签可以创建一个无序模型，使用li标签在ul中创建一个个列表项，一个li标签就是一个列表项</p><p>通过type属性可以修改无序列表的项目符号<br>可选值：</p><ul><li><p>disc              默认值，实心的圆点</p></li><li><p>square         实心的方块</p></li><li><p>circle            空心的圆</p></li></ul><p>但一般不使用默认的项目符号，如需设置项目符号，可以通过css设置背景图片的方式来设置</p></li><li><p>有序列表</p><p>使用ol标签创建一个有序列表，使用li标签创建列表项，有序列表使用有序的序号作为项目符号<br>type属性，可以指定序号的类型<br>可选值：</p><ul><li><p> 1               默认值，阿拉伯数字</p></li><li><p> a/A            采用大写或小写的英文字母</p></li><li><p> i                 罗马数字</p></li></ul></li><li><p>定义列表</p><p>使用dl标签来创建一个定义列表，dl中存在两个子标签<br>dt：被定义的内容（标题）<br>dd：对定义内容的描述</p><p>列表之间可以相互嵌套，无序列表可嵌套有序列表，有序列表也可以嵌套无序列表</p></li></ol><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;图片的相对路径&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;图片的描述&quot;</span> <span class="attr">width</span> = <span class="string">&quot;宽度&quot;</span>  <span class="attr">height</span> = <span class="string">&quot;长度&quot;</span> <span class="attr">title</span> = <span class="string">&quot;提示文字&quot;</span> <span class="attr">draggable</span> = <span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在图片不能显示时，对图片的描述，搜索引擎通过alt属性对图片进行收录,若不写alt属性，则不对图片进行收录。draggable定义图像是否可以拖拽（false和true两个值）</span></span><br><span class="line"><span class="comment">如果只改变长度或者宽度，宽度，长度也相应变化</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span> = <span class="string">&quot;路径&quot;</span> <span class="attr">contorls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span> = <span class="string">&quot;路径&quot;</span> <span class="attr">contorls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><ol><li>style标签：添加内部样式表</li><li>script标签：用于加载脚本文件</li><li>noscript标签：定义脚本在未执行时的替代内容（文本）。可被用于可识别script标签但是无法支持其中脚本的浏览器</li></ol><h4 id="HTML中元素-标签-的关系"><a href="#HTML中元素-标签-的关系" class="headerlink" title="HTML中元素(标签)的关系"></a>HTML中元素(标签)的关系</h4><ul><li>父元素：直接包含子元素的元素</li><li>子元素：直接被父元素包含的元素</li><li>祖先元素：直接或者间接包含后代元素的元素，父元素也是祖先元素</li><li>后代元素：直接或间接被祖先元素包含的元素，子元素也是后代元素</li><li>兄弟元素：拥有相同父元素的元素叫兄弟元素</li></ul><h4 id="元素的id，class属性"><a href="#元素的id，class属性" class="headerlink" title="元素的id，class属性"></a>元素的id，class属性</h4><ol><li>在html中，每一个标签都可以设置id，该属性可以作为标签的唯一标识，id属性在同一个页面中不能有重复</li><li>为标签设置class属性，class属性与id相似，但是一个页面内可以重复,拥有相同class属性的元素称为一组元素，同时，一个元素可以设置多个class值，多个值之间用空格隔开</li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><img src="E:\23\字节训练营前端基础\CSS工作模式.png" alt="CSS工作模式"></p><h3 id="CSS-in-HTML"><a href="#CSS-in-HTML" class="headerlink" title="CSS in HTML"></a>CSS in HTML</h3><ul><li><p>内联样式表</p><p>CSS样式可以编写到元素的style属性当中,将样式直接编写到style属性中，这种样式我们称为内联样式，内联样式只对当前元素内容起作用，不便于后期维护，不方便重复</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> style = &quot;<span class="attribute">color</span>:red;<span class="attribute">font-size</span>:<span class="number">40px</span>;&quot;&gt;直接写入元素的style属性中&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>内部样式表</p><p>将CSS样式编写到head中的style标签中，然后通过CSS选择器选中指定元素，将这些元素一起设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    sont-size:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部样式表</p><p>将样式表编写在外部的CSS文件中，然后通过link标签来将外部的CSS文件引入到当前页面中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel = &quot;stylesheet&quot; type = &quot;text/css&quot; href = &quot;css文件名&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>CSS通过选择器可以选中页面中指定的元素，并将声明块中的样式应用在对应的元素上，其中声明块紧跟在选择器后面，使用一对{}括起来，实际上是一组组名值队结构，每个声明之间使用分号；隔开，名值对之间使用冒号：连接</p><h4 id="选择器类别"><a href="#选择器类别" class="headerlink" title="选择器类别"></a>选择器类别</h4><ol><li><p>元素（标签）选择器<br>作用：通过元素选择器可以选择页面中所有指定元素<br>语法：标签名{声明块}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;<span class="comment">/*选中页面中所有的p元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>id选择器<br>作用：通过元素的id属性值选中唯一的一个元素<br>语法：#id属性值{声明块}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> id = &quot;idname&quot;&gt;name&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"><span class="selector-id">#idname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;<span class="comment">/*选中页面中唯一一个id名称为idname的元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>类（class）选择器<br>作用：通过元素的class属性值选中一组元素<br>语法：.class属性值{}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class = &quot;classname&quot;&gt;&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"><span class="selector-class">.classname</span>&#123;</span><br><span class="line">     <span class="attribute">color</span>:red;</span><br><span class="line">&#125;<span class="comment">/*选中页面中所有class名称为classname的元素*/</span></span><br></pre></td></tr></table></figure></li><li><p>伪类元素选择器<br>伪类用来表示元素的一种特殊状态，如访问过的超链接与普通的链接，获取焦点的文本框<br>当需要为处在这些特殊状态下的元素设置样式时，就可以使用伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span>  正常链接（未访问未点击）</span><br><span class="line"><span class="selector-pseudo">:visited</span> 表示访问过的链接<span class="comment">/*由于隐私问题，:visited伪类只能设置字体颜色*/</span></span><br><span class="line"><span class="selector-pseudo">:active</span> 超链接被点击时状态</span><br><span class="line"><span class="selector-pseudo">:hover</span> 鼠标移入时状态</span><br><span class="line"><span class="selector-pseudo">:focus</span> 获取焦点时状态</span><br><span class="line"><span class="selector-pseudo">::selection</span> 选中的文本</span><br><span class="line"><span class="selector-pseudo">:lang</span></span><br><span class="line"><span class="selector-pseudo">:first</span>-child 可以选中第一个子元素（所有子元素的第一个）</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 可以选中最后一个子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span> 可以选中任意位置的子元素，该选择器可以传一个参数，指定要选中第几个子元素</span><br><span class="line">even 表示选中偶数位置的子元素</span><br><span class="line">odd 表示选中奇数位置的子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(even)  <span class="selector-pseudo">:nth-child</span>(odd)</span><br><span class="line"><span class="selector-pseudo">:first</span>-of-type 选中当前类型的子元素中第一个</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span></span><br><span class="line"><span class="selector-pseudo">:nth-of-type</span></span><br><span class="line">如：</span><br><span class="line">&lt;<span class="selector-tag">a</span> href = &quot;http://www.baidu.com<span class="string">&quot;&gt;Baidu&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;input type = &quot;</span>text<span class="string">&quot;&gt;/*创建一个文本输入框*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style type = &quot;</span>text/css<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">a:link&#123;</span></span><br><span class="line"><span class="string">    color:blue;/*设置未访问过的链接为蓝色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:visited&#123;</span></span><br><span class="line"><span class="string">    color:purple;/*设置访问过的链接为紫色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:active&#123;</span></span><br><span class="line"><span class="string">    color:skyblue;/*设置超链接被点击时链接颜色为天蓝色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a:hover&#123;</span></span><br><span class="line"><span class="string">    color:green;/*设置鼠标移入时链接颜色为绿色*/</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">input:focus&#123;</span></span><br><span class="line"><span class="string">    background-color:glue;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>伪元素选择器<br>使用伪元素来表示元素的一些特殊位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-letter 元素的第一列</span><br><span class="line"><span class="selector-pseudo">:first</span>-line 元素的第一行</span><br><span class="line"><span class="selector-pseudo">:before</span> 元素的最前端部分，一般与<span class="attribute">content</span>样式一起使用，可以通过<span class="attribute">content</span>向before和after的位置添加一些东西</span><br><span class="line"><span class="selector-pseudo">:after</span> 元素的最后部分</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;我会出现在元素的最后端&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>:skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性选择器<br>title属性，可以给任何标签指定，当鼠标移入元素上时，会作为文字提示<br>作用：可以根据元素中的属性或属性值来选取指定元素<br>语法：[属性名]  选取含有指定属性的元素</p><pre><code>       [属性名=&quot;属性值&quot;]   选取含有指定属性值的元素       [属性名^=&quot;属性值&quot;]  选取属性值以指定内容开头的元素       [属性名$=&quot;属性值&quot;]  选取属性值以指定内容结尾的元素       [属性名*=&quot;属性值&quot;]  选取属性值包含指定内容的元素</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title = <span class="string">&quot;abcd&quot;</span>]</span>&#123;&#125;</span><br><span class="line">&lt;<span class="selector-tag">p</span> title = &quot;abcd&quot;&gt;这是一个段落&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>通配选择器<br>作用：选中页面中所有元素，通过通配选择器可以清除游览器设置的默认值<br>语法：*{}</p></li><li><p>否定伪类<br>作用：可以从已经选中的元素中剔除掉某些元素<br>语法：:not(选择器)</p></li></ol><h4 id="选择器组合"><a href="#选择器组合" class="headerlink" title="选择器组合"></a>选择器组合</h4><p><img src="E:\23\字节训练营前端基础\选择器组合.png" alt="选择器组合"></p><ol><li>并集选择器（选择器组）<br>作用：给所有选择器选中的标签设置属性<br>语法：选择器1，选择器2，选择器3{声明块}</li><li>复合选择器（交集选择器）<br>作用：可以选中多个选择器的元素<br>语法：选择器1选择器2选择器3{声明块}</li></ol><h4 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h4><h4 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h4><p>单个选择器的优先级顺序：<br>内联样式 &gt; id选择器 &gt; 类和伪类选择器 &gt; 元素(标签)选择器 &gt; 通配选择器 &gt; 继承样式</p><ul><li>其中继承样式无优先级，任意选择器均可覆盖该选择器的样式</li><li>当选择器包含<strong>多种选择器</strong>时，需要将多种选择器的<strong>优先级相加</strong>在进行比较，但是选择器的优先级计算不会超过他的最大数量级，当选择器的优先级一致时，则使用靠后的样式</li><li>并集选择器的优先级单独运算</li><li>可以在样式的最后加上一个!important，表示该样式获得最高优先级</li><li>通配选择器特异度为0，内联样式优先级最高，参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity" title="CSS优先级">优先级选取</a></li></ul><p><img src="E:\23\字节训练营前端基础\选择器优先级.png" alt="选择器优先级"></p><h4 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h4><p>在CSS中，祖先元素上的样式，会被他的后代元素所继承，利用继承，可以将一些基本样式设置给祖先元素，这样他的所有后代元素会自动继承这些样式，但不是所有样式都会被继承，比如和背景相关，边框相关，定位相关这些样式都不会被继承，如果想让子元素继承这些样式，可以使用<strong>关键字inherit</strong>进行显示继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><p>在CSS转那个，每一个属性都有初始值，可以使用initial关键字显示设置为初始值，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bakground-<span class="attribute">color</span>:initial</span><br></pre></td></tr></table></figure><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p><img src="E:\23\字节训练营前端基础\css盒模型.png" alt="盒模型"></p><h4 id="内联元素与块元素"><a href="#内联元素与块元素" class="headerlink" title="内联元素与块元素"></a>内联元素与块元素</h4><p><strong>块级元素</strong>（block-level element）用于<strong>负责结构</strong>，它垂直显示，宽度自动撑满，独占一整行，可以设置宽高。常见块级元素有div 、h1 ~ h6 、p、ol、ul、li、form、table 等。<strong>display: block的元素是块级元素</strong>，但不代表块级元素就是display: block;</p><p><strong>内联（行级）元素</strong>（inline-level elements）用于<strong>负责内容</strong>，它并排显示，宽度自动收缩，紧跟在上一个元素后面，不能设置宽高。常见内联元素有a、span、b、u、label 、em等。内联元素也一样，<strong>display 为 inline 的元素是内联元素</strong>，但不代表块级元素就是display: inline;</p><p>块级元素，生成块级盒子，body、article、div、main、section、h1~h6、p、ul、li等，display：block<br>行级元素，生成行级元素，内容分布在多个行盒（line box）中，span、em、strong、cite、code等，display：inline</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>属性</span><br><span class="line">block 块级盒子</span><br><span class="line">inline 行级盒子</span><br><span class="line">inline-block 本身是行级，可以放在行盒中；可以设置宽高；作为一个整体不会被拆散成多行</span><br><span class="line"><span class="attribute">none</span> 排版时完全被忽略</span><br></pre></td></tr></table></figure><h4 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h4><p><img src="E:\23\字节训练营前端基础\常规流排版.png" alt="排版"></p><ul><li><p>行级排版上下文</p><ol><li>inline Formatting Context（IFC）</li><li>只包含行级盒子的容器会创建一个IFC</li><li>IFC内的排版规则<ul><li>盒子在一行内水平摆放</li><li>一行放不下时，换行显示</li><li>text-align 决定一行内盒子的水平对齐</li><li>vertical-align决定一个盒子在行内的垂直对齐</li><li>会避开浮动元素（float）</li></ul></li></ol></li><li><p>块级排版上下文</p><ol><li>Block Formatting Context（BFC）</li><li>某些容器会创建一个BFC<ul><li>根元素</li><li>浮动、绝对定位、inline-block</li><li>Flex子项和Grid子项</li><li>overflow值不是visible的块盒</li><li>display：flow-root；</li></ul></li><li>BFC内的排版规则<ul><li>盒子从上到下摆放</li><li>垂直margin合并</li><li>BFC内盒子的margin不会与外面的合并</li><li>BFC不会和浮动元素重叠</li></ul></li></ol></li><li><p>Flex Box排版上下文</p><ol><li>他可以控制子级盒子的：<ul><li>摆放的流向（上，下，左，右）</li><li>摆放的顺序</li><li>盒子的宽度和高度</li><li>水平和垂直方向的对齐</li><li>是否允许折行</li></ul></li></ol><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">a</span>&quot;&gt;<span class="selector-tag">A</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">b</span>&quot;&gt;<span class="selector-tag">B</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;c&quot;&gt;C&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;<span class="comment">/*将display属性置为flex，形成flexbox盒子*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#966</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.a</span>, <span class="selector-class">.b</span>, <span class="selector-class">.c</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*控制流向*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>属性</span><br><span class="line">row:从左往右</span><br><span class="line">row-reverse:从右往左</span><br><span class="line">column:从上往下</span><br><span class="line">column-reverse:从下往上</span><br><span class="line"><span class="comment">/*控制对齐方式*/</span></span><br><span class="line">对齐方式分为水平方向与垂直方向，水平方向称之为主轴，垂直方向称之为侧轴</span><br><span class="line">主轴方向对齐方式justify-content</span><br><span class="line">flex-start，flex-end，center，space-between，space-around，space-evenly</span><br><span class="line">测轴方向对齐方式align-items</span><br><span class="line">flex-start，flex-end，center，stretch，baseline</span><br><span class="line">也可以将某个盒子对齐方式单独设置，使用align-self</span><br><span class="line"><span class="comment">/*使用order控制盒子的顺序*/</span></span><br><span class="line">order属性控制盒子的顺序</span><br><span class="line"><span class="comment">/*Flexibility属性*/</span></span><br><span class="line">可以设置子项的弹性：当容器有剩余空间时，会伸展，容器空间不够时，会收缩</span><br><span class="line">flex-grow:有剩余空间时，子元素盒子会自动延伸，长满空间</span><br><span class="line">flex-shrink:容器空间不足时，子元素盒子可以被压缩</span><br><span class="line">flex-basis:没有伸展或收缩时的基础长度</span><br></pre></td></tr></table></figure><p><img src="E:\23\字节训练营前端基础\flex赋值.png" alt="flex布局"></p></li><li><p>Grid布局<br>display属性为grid，是元素生成一个块级的Grid容器，可以使用grid-template相关属性将容器划分为网格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>:设定列数并设置各列的宽度</span><br><span class="line">grid-template-rows:设置行数并设置各行的高度</span><br><span class="line">示例：</span><br><span class="line">grid-template-columns: <span class="number">100px</span> <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">grid-template-rows</span>:<span class="number">100px</span> <span class="number">200px</span>;<span class="comment">/*设置成两行三列，列宽为100,100,200，行高为100,200*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">30%</span> auto;</span><br><span class="line"><span class="attribute">grid-template-rows</span>:<span class="number">100px</span>;<span class="comment">/*设置成一行两列，列宽为盒子宽度30%,盒子剩下的宽度70%，行高为100*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line"><span class="attribute">grid-template-rows</span>:<span class="number">100px</span> <span class="number">200px</span>;<span class="comment">/*设置成两行三列，列宽为100,剩下的平分成两份，行高为100,200*/</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="E:\23\字节训练营前端基础\flex跟grid.png" alt="flex"></p><h4 id="相对定位与绝对定位"><a href="#相对定位与绝对定位" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h4><h5 id="dispaly标签"><a href="#dispaly标签" class="headerlink" title="dispaly标签"></a>dispaly标签</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>标签 </span><br><span class="line">作用:可以将一个元素的类型改变</span><br><span class="line">可选值：</span><br><span class="line">none:不显示元素，并且元素不会在页面中继续占有位置</span><br><span class="line">inline:将一个元素作为内联元素显示</span><br><span class="line">block:将一个元素作为块元素显示</span><br><span class="line">inline-block:将一个元素转换为行内块元素(可以使一个元素既有行内（内联）元素的特点，也有块元素的特点，即可以设置宽高，也不会独占一行)，作为一个整体不会被拆散成多行</span><br><span class="line"></span><br><span class="line">visibility标签</span><br><span class="line">作用：可以设置元素的隐藏和显示的状态</span><br><span class="line">可选值：</span><br><span class="line">visible：默认值，默认值，元素默认会在页面显示</span><br><span class="line">hidden：元素会隐藏不会显示，但是该元素的位置仍会保留</span><br><span class="line"></span><br><span class="line">overflow标签</span><br><span class="line">作用:处理溢出的子元素部分</span><br><span class="line">可选值：</span><br><span class="line">visible: 默认值，对溢出部分不进行处理，元素会在父元素之外的位置显示</span><br><span class="line">hidden: 溢出的内容会被修剪，不会显示</span><br><span class="line">scroll: 会为父元素添加滚动条,但是不智能</span><br><span class="line">auto: 自动添加滚动条，在垂直方向超出则在垂直方向加滚动条，在水平方向超出则在水平方向添加滚动条</span><br><span class="line"></span><br><span class="line">float标签</span><br><span class="line">作用: 使元素浮动，脱离文档流</span><br><span class="line">可选值:  </span><br><span class="line">none: 默认值，元素在文档流中</span><br><span class="line">left: 元素会立即脱离文档流，向左浮动</span><br><span class="line">right: 元素立即脱离文档流，向右浮动</span><br><span class="line">当一个元素设置浮动后(float的值是一个非none的值)，元素会立即脱离文档流，元素脱离文档流后，他下面的元素会向上浮，元素浮动以后，会尽量向页面的左上角或者右上角浮动，直到遇到父元素边框或者其他浮动元素</span><br><span class="line">如果浮动元素的父元素是一个没有浮动的块元素，则浮动元素不会超过块元素,且浮动元素不会超过它上面的兄弟元素，最多一边齐平。</span><br><span class="line">浮动的元素不会盖住文字，文字会环绕在浮动元素边。当块元素脱离文档流后，高度和宽度都由内容撑开，内联元素脱离文档流后，就会变成块元素，可以设置宽和高。</span><br><span class="line"></span><br><span class="line">clear标签</span><br><span class="line">作用：清除其他元素浮动对该元素的影响</span><br><span class="line">可选值：</span><br><span class="line">none 默认值，不清除浮动</span><br><span class="line">left:清除左侧浮动元素对当前元素的影响</span><br><span class="line">right:清除右侧浮动元素对当前元素的影响</span><br><span class="line">both:清除两侧浮动元素对当前元素产生的影响(清除影响最大的浮动元素的影响)</span><br></pre></td></tr></table></figure><h5 id="相对定位与绝对定位-1"><a href="#相对定位与绝对定位-1" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">定位：</span><br><span class="line">定位是指将指定的元素摆放在页面的任意位置，通过<span class="attribute">position</span>属性来设置元素的定位</span><br><span class="line">可选值：</span><br><span class="line">static 默认值，元素没有开启定位</span><br><span class="line">relative 开启元素的相对定位</span><br><span class="line">absolute 开启元素的绝对定位</span><br><span class="line">fixed 开启元素的固定定位(也是绝对定位的一种)</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为relative时，则开启了元素的相对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.相对定位是相对于元素在文档流中原来的位置进行定位</span><br><span class="line"><span class="number">3</span>.相对定位的元素不会脱离文档流</span><br><span class="line"><span class="number">4</span>.相对定位会是元素提升一个层级</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为absolute时，则开启了元素的绝对定位</span><br><span class="line"><span class="number">1</span>.当开启了元素的绝对定位以后，而不设置偏移量时，元素不会发生任何变化</span><br><span class="line"><span class="number">2</span>.开启绝对定位，会使元素脱离文档流</span><br><span class="line"><span class="number">3</span>.元素的绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的(一般情况，开启了子元素绝对定位都会同时开启父元素的相对定位)</span><br><span class="line">如果所有的祖先元素都没有开启定位，则会相对于游览器的窗口进行定位</span><br><span class="line"><span class="number">4</span>.绝对定位会使元素提升一个层级</span><br><span class="line"><span class="number">5</span>.绝对定位会改变元素的性质，内联元素变成块元素，块元素的高度和宽度都被内容撑开</span><br><span class="line"></span><br><span class="line">当元素的<span class="attribute">position</span>属性设置为fixed时，则开启了元素的固定定位</span><br><span class="line">固定定位也是一种绝对定位，他的大部分特点和绝对定位一样</span><br><span class="line">不同点：</span><br><span class="line">固定定位永远都会相对于游览器窗口进行定位</span><br><span class="line">固定定位会固定在游览器窗口的某个位置，不会随滚动条滚动</span><br><span class="line">当开启了元素的定位(<span class="attribute">position</span>属性值是一个非static的值)时</span><br><span class="line">可以通过<span class="attribute">left</span>，<span class="attribute">right</span>，<span class="attribute">top</span>，<span class="attribute">bottom</span>四个属性来设置元素的偏移量</span><br><span class="line"><span class="attribute">left</span>:元素相对于其定位位置的左侧偏移量</span><br><span class="line">right:元素相对于其定位位置的右侧偏移量</span><br><span class="line">top:元素相对于其定位位置上边的偏移量</span><br><span class="line">bottom:元素相对于其定位位置的下方的偏移量</span><br><span class="line">通常偏移量只需要两个就可以对一个元素进行定位，一般通过水平方向的一个偏移量和垂直方向的一个偏移量来进行定位</span><br><span class="line"></span><br><span class="line">如果定位元素的层级相同，则下面的元素会盖住上面的元素而通过z-index属性可以设置元素的层级</span><br><span class="line">z-index标签</span><br><span class="line">可以通过给z-index指定一个正整数作为值，该值将会作为当前元素的层级，层级越高，越优先显示</span><br><span class="line">但是父元素层级再高，也不会盖住子元素</span><br><span class="line">对于没有开启定位的元素，不能使用z-index属性</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTML与CSS知识点细而杂，学得快，忘得也快，要勤加练习，感觉记住所有知识点不切实际，需要哪个知识点具体查询，能提高效率。还没学框架，可能框架学会后好一点…..</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP语法</title>
      <link href="/posts/782398f.html"/>
      <url>/posts/782398f.html</url>
      
        <content type="html"><![CDATA[<p>PHP是脚本语言，不需要事先编译，在服务器端运行，在各个系统均可运行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> PHP语言标记</span></span><br><span class="line"><span class="comment"> 开始标记 &lt;?php</span></span><br><span class="line"><span class="comment"> 结束标记 ?&gt;</span></span><br><span class="line"><span class="comment"> 指令分隔符&quot;;&quot;,每一句PHP语句后都应该添加分隔符，表示该句话的结束(结束标记隐含一个&quot;;&quot;)</span></span><br><span class="line"><span class="comment"> PHP注释同css，单行用//</span></span><br><span class="line"><span class="comment"> PHP代码忽略多个空格，tab制表键，换行符的影，因此可以利用空格等来使代码整洁，提高可读性</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> PHP是一门弱类型语言，变量在第一次赋值时被创建</span></span><br><span class="line"><span class="comment"> 变量命名规则</span></span><br><span class="line"><span class="comment">     1.PHP严格区分大小写</span></span><br><span class="line"><span class="comment">     2.变量名称以字母或者下划线开始</span></span><br><span class="line"><span class="comment">     3.变量以$符号开始，后面跟着变量名称。$变量名 = 变量值</span></span><br><span class="line"><span class="comment"> 变量引用命名(别名)</span></span><br><span class="line"><span class="comment"> $变量名2 = &amp; $变量名1</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 数据类型:</span></span><br><span class="line"><span class="comment"> String(字符串),Integer(整型数据),Float(浮点数),Boolean(布尔值),Array(数组),          Object(对象),NULL(空值)</span></span><br><span class="line"><span class="comment">  使用var_dump(变量名)可以输出变量类型</span></span><br><span class="line"><span class="comment"> String(字符串)</span></span><br><span class="line"><span class="comment"> 单引号，双引号，定界符&lt;&lt;&lt;。并置运算符&quot;.&quot;，用于将两个字符串连接在一起</span></span><br><span class="line"><span class="comment"> 数组：</span></span><br><span class="line"><span class="comment">    ·索引数组 - 带有数字索引的数组</span></span><br><span class="line"><span class="comment">    ·关联数组 - 带有指定键的数组</span></span><br><span class="line"><span class="comment">    ·多维数组 - 包含一个或多个数组的数组</span></span><br><span class="line"><span class="comment">    使用array()函数来创建数组</span></span><br><span class="line"><span class="comment">        $数组名 = array(参数1，参数2...);</span></span><br><span class="line"><span class="comment">        $数组名 = array(索引值1 =&gt; 参数1 , 索引值2 =&gt; 参数2)</span></span><br><span class="line"><span class="comment">     使用count(数组名)来获得数组中变量数量</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     遍历数组</span></span><br><span class="line"><span class="comment">     for循环</span></span><br><span class="line"><span class="comment">     foreach(数组名 as $value)&#123;</span></span><br><span class="line"><span class="comment">     遍历数组</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     foreach(数组名 as $key =&gt; $value)&#123;</span></span><br><span class="line"><span class="comment">     遍历关联数组</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 变量的作用域：</span></span><br><span class="line"><span class="comment"> Local，global，static，parameter</span></span><br><span class="line"><span class="comment"> 在所有函数外部定义的变量有全局作用域，要在函数内访问一个全局变量，需要使用global关键字</span></span><br><span class="line"><span class="comment"> 在函数内部声明的变量是局部变量，仅能在函数内部使用(在不同函数内可以声明同名变量)</span></span><br><span class="line"><span class="comment"> PHP将所有的全局变量存储在一个$GLOBALS[index]的数组内，index保存变量名，这个数组可以在函数内部   被访问</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 常量</span></span><br><span class="line"><span class="comment">     常量只能包含bool，int，float，string类型的数据，一个常量一经被定义，在PHP脚本执行期间就不能被改变或取消定义，常量的作用域是全局，使用define来创建</span></span><br><span class="line"><span class="comment">     define(常量名称,常量值,case_insensitive)</span></span><br><span class="line"><span class="comment">     case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</span></span><br><span class="line"><span class="comment"> 预定义常量（魔术常量）</span></span><br><span class="line"><span class="comment"> 预定义常量是经过PHP内核定义的一些常量，通常以__开头，可以直接使用，如:__FILE__</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 逻辑或：or 或者 ||         逻辑与：and 或者 &amp;&amp;         逻辑异或： xor    逻辑非： ！</span></span><br><span class="line"><span class="comment"> 特殊运算符 </span></span><br><span class="line"><span class="comment"> ``  可以将系统的命令放在里面 如：$a = &#x27;ipconfig&#x27;;</span></span><br><span class="line"><span class="comment"> @   屏蔽表达式可能发生的错误</span></span><br><span class="line"><span class="comment"> =&gt; 用于关联数组键值对的匹配</span></span><br><span class="line"><span class="comment"> instanceof</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自定义函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名称(<span class="params">参数<span class="number">1</span>，参数<span class="number">2</span>.....</span>)</span>&#123;</span><br><span class="line">函数体;</span><br><span class="line">&#125;</span><br><span class="line">参数传递</span><br><span class="line">    <span class="number">1</span>.按值传递参数</span><br><span class="line">    <span class="number">2</span>，按引用传递参数</span><br><span class="line">    <span class="number">3</span>.函数形式参数设置默认值</span><br><span class="line">    <span class="number">4</span>.可变长度参数列表</span><br><span class="line">    <span class="title function_ invoke__">func_get_args</span>();</span><br><span class="line"><span class="title function_ invoke__">func_get_arg</span>();</span><br><span class="line"><span class="title function_ invoke__">func_num_args</span>();</span><br><span class="line">可变函数(变量函数)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;我是test函数&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>();<span class="comment">//相当于调用test函数</span></span><br><span class="line">内部(内置)函数</span><br><span class="line">    PHP内核提供的现成的函数或者结构，开启特定的PHP拓展模块后使用</span><br></pre></td></tr></table></figure><h4 id="预定义超全局变量"><a href="#预定义超全局变量" class="headerlink" title="预定义超全局变量"></a><a href="https://www.w3school.com.cn/php/php_superglobals.asp">预定义超全局变量</a></h4><h4 id="时间与日期"><a href="#时间与日期" class="headerlink" title="时间与日期"></a>时间与日期</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">设置时区：</span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;时区&#x27;</span>);</span><br><span class="line">获取当前时间unix时间戳:</span><br><span class="line"><span class="title function_ invoke__">time</span>();</span><br><span class="line">获取指定时间的unix时间戳：</span><br><span class="line">    <span class="title function_ invoke__">mktime</span>(参数);参数为指定时间</span><br><span class="line">从Unix时间戳获取时间日期：</span><br><span class="line">    <span class="title function_ invoke__">date</span>(参数表);如：<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d G:i:s&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP文件</title>
      <link href="/posts/8sydh6.html"/>
      <url>/posts/8sydh6.html</url>
      
        <content type="html"><![CDATA[<h3 id="利用PHP在服务器上创建，编辑，修改，删除文件"><a href="#利用PHP在服务器上创建，编辑，修改，删除文件" class="headerlink" title="利用PHP在服务器上创建，编辑，修改，删除文件"></a>利用PHP在服务器上创建，编辑，修改，删除文件</h3><p>1.判断普通文件和目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="title function_ invoke__">is_file</span>()<span class="comment">//判断给定的文件名是不是一个正常的文件</span></span><br><span class="line"><span class="number">2</span>.<span class="title function_ invoke__">is_dir</span>()<span class="comment">//判断给定文件名是否为一个目录</span></span><br></pre></td></tr></table></figure><p>2.文件的属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_exists</span>()<span class="comment">//检查文件或目录是否存在</span></span><br><span class="line"><span class="title function_ invoke__">filesize</span>()<span class="comment">//取得普通文件的大小</span></span><br><span class="line"><span class="title function_ invoke__">is_readable</span>()<span class="comment">//判断文件是否为可读</span></span><br><span class="line"><span class="title function_ invoke__">is_writable</span>()<span class="comment">//判断文件是否为可写</span></span><br><span class="line"><span class="title function_ invoke__">filectime</span>()<span class="comment">//取得文件创建时间</span></span><br><span class="line"><span class="title function_ invoke__">filemtime</span>()<span class="comment">//取得文件修改时间</span></span><br><span class="line"><span class="title function_ invoke__">fileatime</span>()<span class="comment">//取得文件上次访问时间</span></span><br><span class="line"><span class="title function_ invoke__">stat</span>()<span class="comment">//取得文件的大部分属性值</span></span><br></pre></td></tr></table></figure><p>3.目录的基本操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">basename</span>()<span class="comment">//返回路径中的文件名部分</span></span><br><span class="line"><span class="title function_ invoke__">dirname</span>()<span class="comment">//返回路径中的目录部分</span></span><br><span class="line"><span class="title function_ invoke__">pathinfo</span>()<span class="comment">//发挥文件的路径信息</span></span><br><span class="line"><span class="title function_ invoke__">opendir</span>()<span class="comment">//打开目录句柄</span></span><br><span class="line"><span class="title function_ invoke__">readdir</span>()<span class="comment">//从目录句柄中读取条目，返回目录中下一文件</span></span><br><span class="line"><span class="title function_ invoke__">rewinddir</span>()<span class="comment">//倒回目录句柄</span></span><br><span class="line"><span class="title function_ invoke__">closedir</span>()<span class="comment">//关闭目录句柄</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>()<span class="comment">//新建目录</span></span><br><span class="line"><span class="title function_ invoke__">rmdir</span>()<span class="comment">//删除指定的空目录</span></span><br><span class="line"><span class="title function_ invoke__">scandir</span>()<span class="comment">//列出指定路径中的文件和目录</span></span><br></pre></td></tr></table></figure><p>4.文件的基本操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fopen()//打开文件或者URL</span><br><span class="line">fread()//读取文件</span><br><span class="line">fgets()//从文件指针中读取一行</span><br><span class="line">feof()//测试文件指针是否到了文件尾部</span><br><span class="line">rewind()//倒回文件指针的位置</span><br><span class="line">flock()//轻便的咨询文件锁定</span><br><span class="line">ftruncate()//将文件截断到给定长度</span><br><span class="line">fclose()//关闭一个一打开的文件指针</span><br><span class="line">file()//将整个文件读入到一个数组中</span><br><span class="line">copy()//拷贝文件</span><br><span class="line">unlink()//删除文件</span><br><span class="line">file_get_contents()//将整个文件读入一个字符串</span><br><span class="line">file_put_contents()//将字符串写入文件中</span><br><span class="line">rename()//重命名一个文件或者目录</span><br><span class="line">readfile()//读入一个文件并写入到输出缓冲</span><br></pre></td></tr></table></figure><p>5.文件的上传</p><p>文件的上传是自动的，上传的文件都存储于某个临时文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.html标签需要做到的上传设置</span><br><span class="line">1）form标签属性设置</span><br><span class="line">1&gt;method设置为post</span><br><span class="line">2&gt;enctype设置为multipart/form-data</span><br><span class="line">3&gt;form表单中设置隐藏类型的input，其中name值将设置为MAX_FILE_SIZE，value值设置为需要限制的上传文件的大小（字节）</span><br><span class="line">2.在服务器端通过PHP处理上传文件</span><br><span class="line">1）与上传有关的php配置选项(php.ini)</span><br><span class="line">配置项              可能值                  功能描述</span><br><span class="line">file_uploads        on                   确定服务器上的PHP脚本是否可接受HTTP上传的文件</span><br><span class="line">memory_limit         8M              设置脚本可以使用的最大内存量，防止失控的脚本独占内存</span><br><span class="line">upload_max_filesize  2M            限制PHP上传文件的最大值，此值必须小于post_max_size</span><br><span class="line">post_max_size        8M           限制Post方法可以接受信息的最大量</span><br><span class="line">upload_tmp_dir       一个URL      上传文件存放的临时位置，可以是一个绝对路径，这个目录对于拥有此服务器进程用户必须是可写的</span><br><span class="line">$_FILES多维数组，用于存储各种与上传有关的信息</span><br><span class="line">$_FILES[&#x27;file&#x27;][&#x27;name&#x27;]：客户端机器文件的原名称，包括扩展名</span><br><span class="line">$_FILES[&#x27;file&#x27;][&#x27;size&#x27;]：已上传文件的大小单位为字节</span><br><span class="line">$_FILES[&#x27;file&#x27;][&#x27;temp_name&#x27;]：文件上传后，在服务器端储存的临时文件名</span><br><span class="line">$_FILES[file][&#x27;error&#x27;]：文件上传时产生的错误</span><br><span class="line">0：表示没有发生任何错误</span><br><span class="line">1：表示文件大小超过了PHP配置文件中upload_max_filesize选项限制的值</span><br><span class="line">2：表示上传文件大小超过了html表单中的MAX_FILE_SIZE选项所限制的值</span><br><span class="line">3：文件只是部分被上传</span><br><span class="line">4：表示没有上传任何文件</span><br><span class="line">$_FILES[&#x27;file&#x27;][&#x27;type&#x27;]：获取客户端上传文件的MIME类型</span><br><span class="line">3.PHP的文件上传处理函数，用于上传文件的后续处理</span><br><span class="line">is_upload_file()判断指定的文件是否通过HTTP Post上传</span><br><span class="line">move_upload_file()文件上传后，首先会存在服务器的临时目录中，可以用该函数将文件移动</span><br></pre></td></tr></table></figure><p>6.文件的下载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）发送指定的文件MIME类型的头文件</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:MIME类型&#x27;</span>);</span><br><span class="line"><span class="number">2</span>)指定下载文件的描述</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition:attachement;filename = 文件名称&#x27;</span>);</span><br><span class="line"><span class="number">3</span>)制定下载文件的大小</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content_length:文件大小&#x27;</span>);</span><br><span class="line"><span class="number">4</span>)读取文件内容到缓冲区</span><br><span class="line">    <span class="title function_ invoke__">readfile</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell命令</title>
      <link href="/posts/9so2n.html"/>
      <url>/posts/9so2n.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">命令描述：ls命令用于显示制定工作目录下的内容</span><br><span class="line">命令格式：ls[参数][目录名]</span><br><span class="line">参数表</span><br><span class="line">-a：显示所有文件及目录(包括隐藏文件)</span><br><span class="line">-l：将文件的权限、拥有者、文件大小等详细信息列出（ll等同于ls -l）</span><br><span class="line">-r：将文件反序列出（默认按英文字母正序）</span><br><span class="line">-t：将文件按创建时间正序列出</span><br><span class="line">-R：递归遍历目录下的文件</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line">命令描述：获取当前工作目录的绝对路径</span><br><span class="line">使用方法：pwd</span><br><span class="line"></span><br><span class="line">cd</span><br><span class="line">命令描述：切换工作目录</span><br><span class="line">在路径表示中：</span><br><span class="line">一个半角句号（.）表示当前目录，例如路径./app/log等同于app/log。</span><br><span class="line">两个半角句号（..）表示上级目录，例如路径/usr/local/../src等同于/usr/src，其中local和src目录同级</span><br><span class="line"></span><br><span class="line">touch</span><br><span class="line">命令描述：touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</span><br><span class="line">命令格式：touch [参数] [文件]</span><br><span class="line">参数表</span><br><span class="line">-c：如果指定文件不存在，不会创建新文件</span><br><span class="line">-r:使用参考文件的时间记录</span><br><span class="line">-t：设置文件的时间记录</span><br><span class="line"></span><br><span class="line">mkdir</span><br><span class="line">命令描述：mkdir命令用于新建子目录。-p参数确保目录名称存在，不存在的就新建一个。</span><br><span class="line"></span><br><span class="line">rm</span><br><span class="line">命令描述：删除一个文件或者一个目录</span><br><span class="line">命令格式：rm [参数][文件]</span><br><span class="line">参数表</span><br><span class="line">-i：删除前逐一访问确定</span><br><span class="line">-f：无需询问，直接删除</span><br><span class="line">-r：删除目录下所有文件</span><br><span class="line"></span><br><span class="line">cp</span><br><span class="line">命令描述：用于复制文件或者目录</span><br><span class="line">命令格式：cp [参数] [源文件] [目标文件]</span><br><span class="line">参数表</span><br><span class="line">-d:复制时保留链接</span><br><span class="line">-f:覆盖已经存在的目标文件而不给出提示</span><br><span class="line">-i:覆盖前询问</span><br><span class="line">-p:除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</span><br><span class="line">-r:复制目录及目录内的所有项目</span><br><span class="line"></span><br><span class="line">mv</span><br><span class="line">命令描述：mv命令用来为文件或目录改名、或将文件或目录移入其它位置</span><br><span class="line">命令格式：mv [参数] [源文件] [目标文件]</span><br><span class="line">参数表</span><br><span class="line">-i:若指定目录已有同名文件，则先询问是否覆盖旧文件</span><br><span class="line">-f:如果目标文件已经存在，不会询问而直接覆盖</span><br><span class="line"></span><br><span class="line">rename</span><br><span class="line">命令描述：rename命令用字符串替换的方式批量改变文件名。rename命令有C语言和Perl语言两个版本，这里介绍C语言版本的rename命令，不支持正则表达式。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="/posts/agsb98.html"/>
      <url>/posts/agsb98.html</url>
      
        <content type="html"><![CDATA[<h4 id="SQL-结构化查询语言"><a href="#SQL-结构化查询语言" class="headerlink" title="SQL:结构化查询语言"></a>SQL:结构化查询语言</h4><p>简称SQL，是一种特殊的编程语言，用于存储数据以及查询，更改和管理关系数据库系统，同时也是数据库脚本文件的扩展名</p><p>SQL分类</p><p>数据查询语言(DQL)</p><p>​    专门用于查询数据，代表指令为select/show</p><p>数据操作语言(DML)</p><p>​    专门用于写数据，代表指令为insert，update和delete</p><p>事务处理语言(TPL)</p><p>​    专门用于事务安全处理，代表指令begin，transaction，commit和rollback</p><p>数据库控制语言(DCL)</p><p>​    专门用于权限管理，代表指令grant和revoke</p><p>数据库定义语言(DDL)</p><p>​    专门用于结构管理，代表指令create和drop(alter)</p><h4 id="MySQL：关系型数据库管理系统-c-s结构）"><a href="#MySQL：关系型数据库管理系统-c-s结构）" class="headerlink" title="MySQL：关系型数据库管理系统(c/s结构）"></a>MySQL：关系型数据库管理系统(c/s结构）</h4><p>服务端对应软件 Mysqld.exe，客户端对应软件mysql.exe</p><p>命令行方式启动和停止MySQL服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开启服务 Net start mysql</span><br><span class="line">关闭服务 Net stop mysql</span><br></pre></td></tr></table></figure><p> 登录和退出MySQL系统</p><p>通过客户端（mysql.exe）与服务器进行连接认证，就可以进行操作（通常客户端与服务器不在一台电脑上）</p><p>登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.找到mysql.exe（如果配置了环境可以直接利用cmd打开）</span><br><span class="line">2.输入对应的服务器地址：-h:host -h[IP地址/域名]</span><br><span class="line">3.输入服务器中Mysql监听的端口：-P：port</span><br><span class="line">4.输入用户名：-u：username -u:root</span><br><span class="line">5.输入密码：-p:password -p:root</span><br><span class="line">连接的基本语法：Mysql.exe/mysql -h主机地址 -P端口 -u用户名 -p密码</span><br><span class="line">注意事项:</span><br><span class="line">1.通常端口都可以默认：mysql默认的端口通常都是3306</span><br><span class="line">2.密码的输入可以先输入-p，直接换行，然后再以密文方式输入密码</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">断开与服务器的连接，通常Mysql提供的服务器数量有限，一旦客户端用完，就应该断开连接</span><br><span class="line">建议方法：使用SQL语句</span><br><span class="line">Exit;或者\q;或者Quit;</span><br></pre></td></tr></table></figure><h4 id="MySql服务器架构"><a href="#MySql服务器架构" class="headerlink" title="MySql服务器架构"></a>MySql服务器架构</h4><p>Mysql服务器架构由以下几层构成：</p><p>1.数据库管理系统（最外层），DBMS，专门管理服务器端的所有内容</p><p>2.数据库（第二层），DB，专门用于存储数据的仓库（可以有多个）</p><p>3.二维数据表（第三层），Table，专门用哪个与存储具体实体的数据</p><p>4.字段（第四层），Field，具体存储某种类型的数据（实际存储单元）</p><p>数据库中常用关键字</p><p>Row 行 ，Column 列(field)</p><p>MySQL语句结束符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;&#x27;与&#x27;\g&#x27;所表示效果一样,&#x27;\G&#x27;</span><br></pre></td></tr></table></figure><h4 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h4><p>数据库是数据存储的最大层</p><ol><li><p>创建数据库</p><p>基本语法： create database 数据库名字 [库选项]；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">库选项：数据库的相关属性</span><br><span class="line">字符集：charset 字符集，代表着当前数据库下所有表存储的数据默认指定字符集（如不指定，则使用DBMS默认的字符集）</span><br><span class="line">校对集；collate 校对集</span><br></pre></td></tr></table></figure></li><li><p>显示数据库</p><p>每当用户通过SQL指令创建一个数据库，那么系统就会产生一个对应的存储数据的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line">-- 显示部分数据库</span><br><span class="line">show databases like &#x27;匹配模式&#x27;;</span><br><span class="line">-:匹配当前位置的单个字符</span><br><span class="line">%:匹配指定模式的多个字符</span><br><span class="line"></span><br><span class="line">查看以my开头的所有数据库：show databases like &#x27;my%&#x27;;</span><br><span class="line">查看以m开头，后面存在一个不确定字符，最后为database的数据库: show databases like &#x27;m_database&#x27;;</span><br><span class="line">查看以database结尾的数据库：show databases like &#x27;%database&#x27;;</span><br><span class="line"></span><br><span class="line">显示数据库创建语句</span><br><span class="line">show create database 数据库名字;</span><br></pre></td></tr></table></figure><p>3.选择数据库</p><p>​    基本语法：use 数据库名字；</p><p>4.修改数据库</p><p>​    修改数据库字符集（库选项——字符集与校对集）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据库字符集</span><br><span class="line">基本语法：alter database 数据库名称 charset = 字符集；</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><p>​    基本语法：drop database 数据库名字；</p></li></ol><h4 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h4><p>创建数据表</p><ol><li><p>普通创建表</p><p>基本语法：create table 表名(字段名 字段类型 [字段属性]，字段名 字段类型 [字段属性]……)[表选项]</p><p>表选项：与数据库选项类似</p><p>Engine：存储引擎，mysql提供的具体存储数据的方法，默认的有一个innodb(5.5以前是myisam)</p><p>Charset：字符集，只对当前自己表有效(级别比数据库高)</p><p>Collate：校对集</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表必须放到对应的数据库下：有两种方式可以将表放到指定的数据库下</span><br><span class="line">1.在数据表名字前面加上数据库的名字，用&quot;.&quot;连接即可：数据库名.数据表名</span><br><span class="line">2.在创建数据表前先进入到某个具体的数据库即可：use 数据库名称;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>复制已有表结构</p><p>从已经存在的表复制一份（只复制表结构，如果表中有数据则不复制）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本语法：create table 新表名 like 表名;//只要使用数据库.表名，就可以访问其他任何数据库的表名;</span><br></pre></td></tr></table></figure></li></ol><h4 id="显示表"><a href="#显示表" class="headerlink" title="显示表"></a>显示表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示所有表</span><br><span class="line">基本语法：show tables;</span><br><span class="line">匹配显示表</span><br><span class="line">基本语法：show tables like &#x27;匹配模式&#x27;;</span><br></pre></td></tr></table></figure><h4 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本质含义：显示表中所包含的字段信息（名字类型与属性等）</span><br><span class="line">Describe 表名</span><br><span class="line">Desc 表名</span><br><span class="line">show columns from 表名</span><br></pre></td></tr></table></figure><h4 id="显示表的创建语句"><a href="#显示表的创建语句" class="headerlink" title="显示表的创建语句"></a>显示表的创建语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本语法：show create table 表名;</span><br></pre></td></tr></table></figure><h4 id="设置表属性"><a href="#设置表属性" class="headerlink" title="设置表属性"></a>设置表属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表属性就是指表选项；engine，Charset，collate</span><br><span class="line">基本语法：alter table 表名 表选项 = 值;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改表名：rename table 旧表名 to 新表名</span><br><span class="line">修改表选项：alter table 表名 表选项 = 新值</span><br><span class="line">新增字段：alter table 表名 add[column] 新字段名 列类型 [列属性][位置first/after字段名]</span><br><span class="line">修改字段名：alter table 表名 change 旧字段名 新字段名 字段类型 [列属性][新位置]</span><br><span class="line">修改字段类型(属性):alter table 表名 modify 字段名 新类型 [新属性][新位置]</span><br></pre></td></tr></table></figure><h4 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基础语法：drop table 表名 [，表名2，表名3....];可以同时删除多个表</span><br></pre></td></tr></table></figure><h3 id="数据基本操作"><a href="#数据基本操作" class="headerlink" title="数据基本操作"></a>数据基本操作</h3><ol><li><p>插入操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基本语法：insert into 表名 [(字段列表)] values(对应的字段列表)</span><br><span class="line">基本语法：insert into 表名 values（对应的表结构）</span><br></pre></td></tr></table></figure><p>2.查询操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询表中的全部数据 select * from 表名                            // *表示匹配所有字段</span><br><span class="line">查询表中的部分字段 select 字段列表 from 表名;                    //字段列表使用&quot;,&quot;隔开</span><br><span class="line">简单条件查询数据 select字段列表/ * from 表名 where 字段名 = 值    //mysql中没有==符号</span><br></pre></td></tr></table></figure></li></ol><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本语法：delete from 表名 [where 条件];// 如果没有where条件，意味着系统会自动删除该表所有数据（因此应该慎用删除操作） </span><br></pre></td></tr></table></figure><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更新，将数据进行修改(通常是修改部分字段)</span><br><span class="line">基本语法:update 表名 set 字段名 =新值;//如果没有where条件，那么所有的表中对应的那个字段都会被修改成同一值</span><br></pre></td></tr></table></figure><h3 id="列类型（字段类型）"><a href="#列类型（字段类型）" class="headerlink" title="列类型（字段类型）"></a>列类型（字段类型）</h3><ul><li>Tinyint: 迷你整形，系统采用一个字节来保存的整形：最大能表示0~255</li><li>Smallint：小整形：系统采用两个字节来保存的整形，能表示0~65535</li><li>Mediumint：中整形：采用三个字节来保存数据</li><li>int：整形：采用四个字节来保存数据</li><li>Bigint：大整形：采用八个字节来保存数据</li></ul><h4 id="无符号标识设定"><a href="#无符号标识设定" class="headerlink" title="无符号标识设定"></a>无符号标识设定</h4><p>无符号：表示存储的数据在当前字段中，没有负数</p><p>基本语法：在类型后加上unsigned</p><h4 id="显示长度，指数据（整形）在数据显示时，可以显示多长位置"><a href="#显示长度，指数据（整形）在数据显示时，可以显示多长位置" class="headerlink" title="显示长度，指数据（整形）在数据显示时，可以显示多长位置"></a>显示长度，指数据（整形）在数据显示时，可以显示多长位置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tinyint(3):表示最长显示三位，unsigned说明只能为正数，0~255（最长为3位）</span><br><span class="line">Tinyint(4):-128~127,表示最长为4位</span><br><span class="line">zerofill属性：从左侧开始填充0，直至到达最高位，如果数据本身超过最高位，则不做补充，负数不使用zerofill标签</span><br></pre></td></tr></table></figure><h4 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h4><p>专门用于存储小数，在MySQL中小数存储分为两类：定点型和浮点型</p><p>浮点数：</p><ul><li><p>Float：单精度浮点型，系统提供4个字节来存储数据</p><p>基本语法：Float：表示不确定小数位的浮点数</p><p>​                  Float(M,D)：表示一共存储M个有效数字，其中小数为占D位</p></li><li><p>Double：双精度浮点型，系统提供8个字节来存储数据</p></li></ul><p>定点数：</p><ul><li>Decimal：定点数，系统自动根据存储的数据来分配空间，每大概9个数就分配4个字节来进行存储，同时，小数和整数分开存储</li></ul><h4 id="时间日期类型：Date，Time，Datetime，Timestamp，Year"><a href="#时间日期类型：Date，Time，Datetime，Timestamp，Year" class="headerlink" title="时间日期类型：Date，Time，Datetime，Timestamp，Year"></a>时间日期类型：Date，Time，Datetime，Timestamp，Year</h4><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><ul><li><p>char：定长字符，指定长度后，系统会根据实际存储的数据来计算长度来储存数据</p><p>基本语法：char(L),L代表字符数（中英文一样），L长度为0到255</p></li><li><p>Varchar：变长字符，指定长度后，系统会根据实际存储的数据来计算长度，分配合适的长度来存储数据（没有超过长度）</p><p>基本语法：Varchar（L），L代表字符数，L的理论长度是0到65535</p></li><li><p>Text</p></li></ul><p>ENUM：枚举型</p><p>Set：</p>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话控制</title>
      <link href="/posts/b23s8h.html"/>
      <url>/posts/b23s8h.html</url>
      
        <content type="html"><![CDATA[<h4 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h4><p>1)cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">服务器设置一些信息存储在用户电脑的cookie中，以后再请求时就会自动携带cookie里面的数据。在同一个页面就不用多次输入用户数据</span><br><span class="line">1.在客户端电脑中设置cookie</span><br><span class="line">setcookie(&#x27;name&#x27;,&#x27;value&#x27;,有效期)</span><br><span class="line">2.在服务器中读取cookie</span><br><span class="line">超全局变量$_COOKIE存储cookie</span><br><span class="line">3.将多维数组运用于cookie中</span><br><span class="line">setcookie(&#x27;member[name]&#x27;,&#x27;value&#x27;,有效期)</span><br><span class="line">4.删除cookie</span><br><span class="line">setcookie(&#x27;member&#x27;,&quot;&quot;,time()-1)//将原cookie设置为过期即可</span><br><span class="line">注意点：</span><br><span class="line">使用setcookie删除cookie时，需要与当初设置cookie时的参数一致</span><br><span class="line"></span><br><span class="line">产生随机id</span><br><span class="line">$id = uniqid(rand(10000,99999).&#x27;_&#x27;);</span><br><span class="line">echo $id;</span><br></pre></td></tr></table></figure><p>2)session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">session存储于服务器中间，客户端请求服务器时，服务器给用户分配一个seesion id，把这个id存储于客户端的cookie中，下一次访问时，自动携带cookie数据(session id)</span><br><span class="line">1.开启session</span><br><span class="line">session_start();</span><br><span class="line">1)开启一个会话</span><br><span class="line">2）返回已经存在的会话</span><br><span class="line">2.使用session存储数据</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;Username&#x27;] = &#x27;value&#x27;;</span><br><span class="line">$_SESSION[&#x27;email&#x27;]  = &#x27;value&#x27;;</span><br><span class="line">3.注销变量与销毁已经存在的session</span><br><span class="line">unset($_SESSION[&#x27;Username&#x27;]);</span><br><span class="line">unset($_SESSION[&#x27;email&#x27;]);</span><br><span class="line">或者$_SESSION = array();</span><br><span class="line">session_unset();//释放所有中的数据</span><br><span class="line">session_destroy();//销毁一个会话中的全部数据</span><br></pre></td></tr></table></figure><h4 id="使用cookie与session创建登录页面"><a href="#使用cookie与session创建登录页面" class="headerlink" title="使用cookie与session创建登录页面"></a>使用cookie与session创建登录页面</h4>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理</title>
      <link href="/posts/sbz02bz.html"/>
      <url>/posts/sbz02bz.html</url>
      
        <content type="html"><![CDATA[<h4 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在PHP中通过GD扩展库来处理图像，创建图像的四个基本步骤    </span><br><span class="line">    <span class="number">1</span>.创建图像        </span><br><span class="line">    <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="variable">$width</span>,<span class="variable">$height</span>);<span class="comment">//创建一个真彩图片    </span></span><br><span class="line"><span class="number">2</span>.绘制图像         </span><br><span class="line">         <span class="title function_ invoke__">imagecreatefromjpeg</span>();        </span><br><span class="line"><span class="title function_ invoke__">imagecreatefrompng</span>();        </span><br><span class="line"><span class="title function_ invoke__">imagecreatefromgif</span>();        </span><br><span class="line"><span class="title function_ invoke__">imagecreatefromwbmp</span>();        </span><br><span class="line"><span class="comment">//创建或者打开失败时会返回空字符串，并且输出一条错误信息         </span></span><br><span class="line">        <span class="title function_ invoke__">imagesx</span>()<span class="comment">//输出画布宽度         </span></span><br><span class="line">        <span class="title function_ invoke__">imagesy</span>()<span class="comment">//输出画布长度        </span></span><br><span class="line">        <span class="title function_ invoke__">getimagesize</span>()<span class="comment">//获取图像大小 </span></span><br><span class="line">        <span class="title function_ invoke__">imagecolorallocate</span>(resourse <span class="variable">$image</span>,<span class="keyword">int</span> <span class="variable">$red</span>,<span class="keyword">int</span> <span class="variable">$green</span>,<span class="keyword">int</span> <span class="variable">$blue</span>);<span class="comment">//分配颜色</span></span><br><span class="line"><span class="title function_ invoke__">imagefill</span>(resourse <span class="variable">$image</span>,<span class="keyword">int</span> <span class="variable">$x</span>,<span class="keyword">int</span> <span class="variable">$y</span>,<span class="keyword">int</span> <span class="variable">$color</span>);<span class="comment">//区域填充</span></span><br><span class="line"><span class="title function_ invoke__">imagesetpixel</span>(resourse <span class="variable">$image</span>,<span class="keyword">int</span> <span class="variable">$x</span>,<span class="keyword">int</span> <span class="variable">$y</span>,<span class="keyword">int</span> <span class="variable">$color</span>);<span class="comment">//画一个单一像素</span></span><br><span class="line"><span class="title function_ invoke__">imageline</span>(resourse <span class="variable">$image</span>,<span class="keyword">int</span> <span class="variable">$x1</span>,<span class="keyword">int</span> <span class="variable">$y1</span>,<span class="keyword">int</span> <span class="variable">$x2</span>,<span class="keyword">int</span> <span class="variable">$y2</span>,<span class="keyword">int</span> <span class="variable">$color</span>);<span class="comment">//画一条直线</span></span><br><span class="line"><span class="title function_ invoke__">imagerectangle</span>(resourse <span class="variable">$image</span>,<span class="keyword">int</span> <span class="variable">$x1</span>,<span class="keyword">int</span> <span class="variable">$y1</span>,<span class="keyword">int</span> <span class="variable">$x2</span>,<span class="keyword">int</span> <span class="variable">$y2</span>,<span class="keyword">int</span> <span class="variable">$color</span>);<span class="comment">//画一个矩形</span></span><br><span class="line"><span class="title function_ invoke__">imagestring</span>(resourse <span class="variable">$img</span>,<span class="keyword">int</span> <span class="variable">$font</span>,<span class="keyword">int</span> <span class="variable">$x</span>,<span class="keyword">int</span> <span class="variable">$y</span>,<span class="keyword">string</span> <span class="variable">$str</span>,<span class="keyword">int</span> <span class="variable">$color</span>);<span class="comment">//水平的画一行字符串</span></span><br><span class="line"><span class="title function_ invoke__">imagettftext</span>(resourse <span class="variable">$image</span>,<span class="keyword">float</span> <span class="variable">$size</span>,<span class="keyword">float</span> <span class="variable">$angle</span>,<span class="keyword">int</span> <span class="variable">$x</span>,<span class="keyword">int</span> <span class="variable">$y</span>,<span class="keyword">int</span> <span class="variable">$color</span>,<span class="keyword">string</span> <span class="variable">$fontfile</span>,<span class="keyword">string</span> <span class="variable">$text</span>);<span class="comment">//用TrueType字体向图像写入文字</span></span><br><span class="line"><span class="title function_ invoke__">imagettfbbox</span>();<span class="comment">//计算TrueType文字所占区域</span></span><br><span class="line"><span class="title function_ invoke__">imagecopy</span>();<span class="comment">//拷贝图像的一部分</span></span><br><span class="line"><span class="title function_ invoke__">imagecopymerge</span>();<span class="comment">//拷贝并合并图像的一部分</span></span><br><span class="line"><span class="title function_ invoke__">imagecopyresampled</span>();<span class="comment">//重采样拷贝部分图像并调整大小</span></span><br><span class="line">        <span class="number">3</span>.输出图像    </span><br><span class="line">             <span class="title function_ invoke__">header</span>(<span class="keyword">string</span> <span class="variable">$string</span>);<span class="comment">//在该函数之前不能输出任何内容！</span></span><br><span class="line"><span class="title function_ invoke__">imagegif</span>();</span><br><span class="line"><span class="title function_ invoke__">imagejpeg</span>(resourse <span class="variable">$image</span>,);<span class="comment">//以jpeg格式将图像输出到游览器或者文件</span></span><br><span class="line"><span class="title function_ invoke__">imagewbmp</span>();</span><br><span class="line">        <span class="number">4</span>.释放内存</span><br><span class="line">            <span class="title function_ invoke__">imagedestory</span>(resourse <span class="variable">$image</span>);<span class="comment">//销毁一张图像</span></span><br></pre></td></tr></table></figure><h4 id="验证码设置"><a href="#验证码设置" class="headerlink" title="验证码设置"></a>验证码设置</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机函数rand([int $min],int $max);产生一个min到max之间的随机整数</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:image/jpeg&#x27;</span>);</span><br><span class="line">    <span class="variable">$width</span> = <span class="number">120</span> ;</span><br><span class="line"><span class="variable">$height</span> = <span class="number">40</span> ;</span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="variable">$width</span> , <span class="variable">$height</span>);</span><br><span class="line"><span class="variable">$colorBack</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span> ,<span class="title function_ invoke__">rand</span>(<span class="number">166</span>,<span class="number">255</span>),<span class="title function_ invoke__">rand</span>(<span class="number">166</span>,<span class="number">255</span>),<span class="title function_ invoke__">rand</span>(<span class="number">166</span>,<span class="number">255</span>));</span><br><span class="line"><span class="variable">$color_1</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span> , <span class="title function_ invoke__">rand</span>(<span class="number">50</span>,<span class="number">80</span>),<span class="title function_ invoke__">rand</span>(<span class="number">50</span>,<span class="number">88</span>),<span class="title function_ invoke__">rand</span>(<span class="number">50</span>,<span class="number">88</span>));</span><br><span class="line"><span class="variable">$color_2</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span> , <span class="title function_ invoke__">rand</span>(<span class="number">10</span>,<span class="number">120</span>),<span class="title function_ invoke__">rand</span>(<span class="number">10</span>,<span class="number">120</span>),<span class="title function_ invoke__">rand</span>(<span class="number">10</span>,<span class="number">120</span>));</span><br><span class="line"><span class="variable">$str_1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$element</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> <span class="variable">$y</span> = <span class="number">0</span>;<span class="variable">$y</span> &lt; <span class="number">4</span>; <span class="variable">$y</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$str_1</span> .= <span class="variable">$element</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="title function_ invoke__">count</span>(<span class="variable">$element</span>) - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_ invoke__">imagefill</span>(<span class="variable">$img</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="variable">$colorBack</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> <span class="variable">$x</span> = <span class="number">0</span>;<span class="variable">$x</span> &lt;= <span class="number">100</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span> , <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$width</span>-<span class="number">1</span>), <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$height</span>-<span class="number">1</span>),<span class="variable">$color_1</span>);</span><br><span class="line">&#125;<span class="comment">//设置图像中的小点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> <span class="variable">$x</span> = <span class="number">0</span>;<span class="variable">$x</span> &lt; <span class="number">3</span>;<span class="variable">$x</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_ invoke__">imageline</span>(<span class="variable">$img</span>,<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$width</span>/<span class="number">2</span>),<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$height</span>),<span class="title function_ invoke__">rand</span>(<span class="variable">$width</span>/<span class="number">2</span>,<span class="variable">$width</span>),</span><br><span class="line">                  <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$height</span>));</span><br><span class="line">    &#125;<span class="comment">//划线</span></span><br><span class="line"><span class="title function_ invoke__">imagettftext</span>(<span class="variable">$img</span> ,<span class="number">15</span>, <span class="title function_ invoke__">rand</span>(-<span class="number">10</span>,<span class="number">18</span>),<span class="title function_ invoke__">rand</span>(<span class="number">5</span>,<span class="number">20</span>),<span class="title function_ invoke__">rand</span>(<span class="number">15</span>,<span class="number">40</span>),<span class="variable">$color_2</span>,</span><br><span class="line">                 <span class="string">&#x27;font/Madjumbles.ttf&#x27;</span>,<span class="variable">$str_1</span>);</span><br><span class="line"><span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$img</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图像水印设置"><a href="#图像水印设置" class="headerlink" title="图像水印设置"></a>图像水印设置</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图像的缩放与裁剪"><a href="#图像的缩放与裁剪" class="headerlink" title="图像的缩放与裁剪"></a>图像的缩放与裁剪</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法</title>
      <link href="/posts/s8b2jn.html"/>
      <url>/posts/s8b2jn.html</url>
      
        <content type="html"><![CDATA[<h4 id="字符串的索引与切片"><a href="#字符串的索引与切片" class="headerlink" title="字符串的索引与切片"></a>字符串的索引与切片</h4><p>字符串的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;python&#x27;</span>      <span class="comment"># 字符串存在索引，索引从零开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>))    <span class="comment"># 输出为&lt;class &#x27;str&#x27;&gt;，str为string类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])       <span class="comment"># 输出为p，字符串的第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[-<span class="number">1</span>])      <span class="comment"># 输出为n，字符串的最后一个字符，与str[5]等效</span></span><br></pre></td></tr></table></figure><p>字符串的切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用两个冒号分割三个数字</span></span><br><span class="line"><span class="string">[起始：结束：步长]</span></span><br><span class="line"><span class="string">起始默认从零开始，切片左闭右开，即在结束位前一位截止，步长指间隔数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">3</span>:<span class="number">1</span>])     <span class="comment"># 输出pyt</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">3</span>:<span class="number">2</span>])      <span class="comment"># 输出pt</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:-<span class="number">2</span>])       <span class="comment"># 输出pyth</span></span><br></pre></td></tr></table></figure><h4 id="python字节串"><a href="#python字节串" class="headerlink" title="python字节串"></a>python字节串</h4><p>bytes 类型用来表示一个字节串。“字节串“不是编程术语，是我自己“捏造”的一个词，用来和字符串相呼应。</p><p>字节串（bytes）和字符串（string）的对比：</p><ul><li>字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。</li><li>字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。</li><li>字节串和字符串都是不可变序列，不能随意增加和删除数据。</li></ul><p>bytes 只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。                                                                                                                     </p><p>说白了，bytes 只是简单地记录内存中的原始数据，至于如何使用这些数据，bytes 并不在意，你想怎么使用就怎么使用，bytes 并不约束你的行为。</p><p>bytes 类型的数据非常适合在互联网上传输，可以用于网络通信编程；bytes 也可以用来存储图片、音频、视频等二进制格式的文件。</p><p>字符串和 bytes 存在着千丝万缕的联系，我们可以通过字符串来创建 bytes 对象，或者说将字符串转换成 bytes 对象。有以下三种方法可以达到这个目的：</p><ul><li>如果字符串的内容都是 ASCII 字符，那么直接在字符串前面添加<code>b</code>前缀就可以转换成 bytes。</li><li>bytes 是一个类，调用它的构造方法，也就是 bytes()，可以将字符串按照指定的字符集转换成 bytes；如果不指定字符集，那么默认采用 UTF-8。</li><li>字符串本身有一个 encode() 方法，该方法专门用来将字符串按照指定的字符集转换成对应的字节串；如果不指定字符集，那么默认采用 UTF-8。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过构造函数创建空 bytes</span></span><br><span class="line">b1 = <span class="built_in">bytes</span>()</span><br><span class="line"><span class="comment"># 通过空字符串创建空 bytes</span></span><br><span class="line">b2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过b前缀将字符串转换成 bytes</span></span><br><span class="line">b3 = <span class="string">b&#x27;http://c.biancheng.net/python/&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b3: &quot;</span>, b3)</span><br><span class="line"><span class="built_in">print</span>(b3[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(b3[<span class="number">7</span>:<span class="number">22</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为bytes() 方法指定字符集</span></span><br><span class="line">b4 = <span class="built_in">bytes</span>(<span class="string">&#x27;C语言中文网8岁了&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b4: &quot;</span>, b4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过encode()方法将字符串转换成 bytes</span></span><br><span class="line">b5 = <span class="string">&quot;C语言中文网8岁了&quot;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b5: &quot;</span>, b5)</span><br></pre></td></tr></table></figure><p>对于非 ASCII 字符，print 输出的是它的字符编码值（十六进制形式），而不是字符本身。非 ASCII 字符一般占用两个字节以上的内存，而 bytes 是按照单个字节来处理数据的，所以不能一次处理多个字节。<br>bytes 类也有一个 decode() 方法，通过该方法可以将 bytes 对象转换为字符串。紧接上面的程序，添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过 decode() 方法将 bytes 转换成字符串</span></span><br><span class="line">str1 = b5.decode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1: &quot;</span>, str1)</span><br></pre></td></tr></table></figure><h4 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(tipmsg)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">说明：</span></span><br><span class="line"><span class="string">input()函数返回的类型为str类型，可使用类型转换成为需要的类型</span></span><br><span class="line"><span class="string">str 表示一个字符串类型的变量，input 会将读取到的字符串放入 str 中。</span></span><br><span class="line"><span class="string">tipmsg 表示提示信息，它会显示在控制台上，告诉用户应该输入什么样的内容；如果不写 tipmsg，就不会有任何提示信息。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以使用 Python 内置函数将字符串转换成想要的类型，比如：</p><ul><li>int(string) 将字符串转换成 int 类型；</li><li>float(string) 将字符串转换成 float 类型；</li><li>bool(string) 将字符串转换成 bool 类型。</li></ul><h4 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (value,...,sep=<span class="string">&#x27;&#x27;</span>,end=<span class="string">&#x27;\n&#x27;</span>,file=sys.stdout,flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>从上面的语法格式可以看出，value 参数可以接受任意多个变量或值，因此 print() 函数完全可以输出多个值。例如如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_name ＝ <span class="string">&#x27;Charlie&#x27;</span></span><br><span class="line">user_age = <span class="number">8</span> <span class="comment">#同时输出多个变量和字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读者名：&quot;</span>,user_name,<span class="string">&quot;年龄：&quot;</span>,user_age) </span><br><span class="line"><span class="comment"># 输出 读者名： Charlie 年龄： 8</span></span><br></pre></td></tr></table></figure><p>从输出结果来看，使用 print() 函数输出多个变量时，print() 函数默认以空格隔开多个变量，如果读者希望改变默认的分隔符，可通过 sep 参数进行设置。例如输出语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时输出多个变量和字符串，指定分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读者名：&quot;</span> ,user_name,<span class="string">&quot;年龄：&quot;</span>,user_age,sep=<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出 读者名：|Charlie|年龄：|8</span></span><br></pre></td></tr></table></figure><p>在默认情况下，print() 函数输出之后总会换行，这是因为 print() 函数的 end 参数的默认值是“\n”，这个“\n”就代表了换行。如果希望 print() 函数输出之后不会换行，则重设 end 参数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置end 参数，指定输出之后不再换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">40</span>,<span class="string">&#x27;\t&#x27;</span>,end＝<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(5O,<span class="string">&#x27;\t&#x27;</span>,end＝<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">60</span>,<span class="string">&#x27;\t&#x27;</span>,end＝<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出 40  50  60</span></span><br></pre></td></tr></table></figure><p>file 参数指定 print() 函数的输出目标，file 参数的默认值为 sys.stdout，该默认值代表了系统标准输出，也就是屏幕，因此 print() 函数默认输出到屏幕。实际上，完全可以通过改变该参数让 print() 函数输出到特定文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demo.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)<span class="comment">#打开文件以便写入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沧海月明珠有泪&#x27;</span>,file=f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;蓝田日暖玉生烟&#x27;</span>,file=f)</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">上面程序中，open() 函数用于打开 demo.txt 文件，接连 2 个 print 函数会将这 2 段字符串依次写入此文件，最后调用 close() 函数关闭文件，教程后续章节还会详细介绍关于文件操作的内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>print() 函数的 flush 参数用于控制输出缓存，该参数一般保持为 False 即可，这样可以获得较好的性能。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构01</title>
      <link href="/posts/hbj78.html"/>
      <url>/posts/hbj78.html</url>
      
        <content type="html"><![CDATA[<h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><p>栈是什么？队列又是什么？简而言之，栈和队列是一种线性存储结构，是一种特殊的线性表。特殊之处就在于使用栈结构存储数据，栈底封闭，只能从栈顶存取数据，数据遵循着“先进后出”的特点。使用队列结构存储数据，队列两端开口，不过数据只能从一端进入，从另外一端出，数据遵循着“先进先出”的特点。</p><p>队列的结构图</p><p><img src="https://i.loli.net/2020/02/11/dIqpfPL5DsgvbSh.png"></p><p>栈的结构图</p><p><img src="https://i.loli.net/2020/02/11/fACWr7az3HEIZsO.png" alt="栈的结构"></p><h4 id="顺序栈和链式栈以及c-STL栈Stack的实现"><a href="#顺序栈和链式栈以及c-STL栈Stack的实现" class="headerlink" title="顺序栈和链式栈以及c++ STL栈Stack的实现"></a>顺序栈和链式栈以及c++ STL栈Stack的实现</h4><ol><li><p>顺序栈代码实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *top,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="comment">//入栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[++(*top)]=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *top)</span></span></span><br><span class="line"><span class="function"><span class="comment">//出栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((*top)==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The stack is empty!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(a[(*top)--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> stack[<span class="number">1000</span>],top=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义了一个长度位1000的数组来实现栈,栈顶初始置为-1</span></span><br><span class="line"><span class="built_in">push</span>(stack,&amp;top,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">push</span>(stack,&amp;top,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">pop</span>(stack,&amp;top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>链式栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    stack *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">stack *<span class="title">initstack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack *p = <span class="keyword">new</span> stack;</span><br><span class="line">    stack-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">stack *<span class="title">push</span><span class="params">(stack *a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack *p = <span class="keyword">new</span> stack;</span><br><span class="line">    p-&gt;data = n;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    a-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(stack *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        stack *p=a-&gt;next;</span><br><span class="line">        a-&gt;next=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;The stack is already empty!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>C++ STL栈Stack</p><p>要使用STL的Stack，首先要包括头文件stack<code>#include&lt;stack&gt;</code>最常见的定义方式</p><p><code>stack &lt;数据类型&gt; 栈的名称//构造一个存放该数据类型的空栈</code></p><p>栈的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>()<span class="comment">//如果栈为空返回true，否则返回false  </span></span><br><span class="line">s.<span class="built_in">size</span>()<span class="comment">//返回栈中元素的个数  </span></span><br><span class="line">s.<span class="built_in">pop</span>()<span class="comment">//删除栈顶元素但不返回其值  </span></span><br><span class="line">s.<span class="built_in">top</span>()<span class="comment">//返回栈顶的元素，但不删除该元素  </span></span><br><span class="line">s.<span class="built_in">push</span>(X)<span class="comment">//在栈顶压入新元素 ，参数X为要压入的元素</span></span><br></pre></td></tr></table></figure><hr><h4 id="顺序队列和链式队列以及C-STL队列queue的实现"><a href="#顺序队列和链式队列以及C-STL队列queue的实现" class="headerlink" title="顺序队列和链式队列以及C++STL队列queue的实现"></a>顺序队列和链式队列以及C++STL队列queue的实现</h4><ol><li><p>顺序队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> *queue,<span class="type">int</span> *rear,<span class="type">int</span> temp)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//入队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue[++(*rear)] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">push</span><span class="params">(<span class="type">int</span> *queue,<span class="type">int</span> *top,<span class="type">int</span> *rear)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//出队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((*top) == (*rear))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;The queue is already empty!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> queue[++(*top)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> queue[<span class="number">1000</span>],rear,top;</span><br><span class="line">    <span class="comment">//定义一个长度1000的数组实现队列，对尾为rear,对首为top</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺序队列的优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">enQueue</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> front,<span class="type">int</span> rear,<span class="type">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加判断语句，如果rear超过max，则直接将其从a[0]重新开始存储，如果rear+1和front重合，则表示数组已满</span></span><br><span class="line">    <span class="keyword">if</span> ((rear+<span class="number">1</span>)%max==front) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;空间已满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rear;</span><br><span class="line">    &#125;</span><br><span class="line">    a[rear%max]=data;</span><br><span class="line">    rear++;</span><br><span class="line">    <span class="keyword">return</span> rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">deQueue</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> front,<span class="type">int</span> rear)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果front==rear，表示队列为空</span></span><br><span class="line">    <span class="keyword">if</span>(front==rear%<span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> *front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[front]);</span><br><span class="line">    <span class="comment">//front不再直接 +1，而是+1后同max进行比较，如果=max，则直接跳转到 a[0]</span></span><br><span class="line">    front=(front+<span class="number">1</span>)%max;</span><br><span class="line">    <span class="keyword">return</span> front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> queue[max],top,rear;</span><br><span class="line">    font = rear =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>链式队列</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">queue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    queue *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">queue *<span class="title">initqueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue *p = <span class="keyword">new</span> queue;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">queue *<span class="title">enqueue</span><span class="params">(queue *rear,<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue *p = <span class="keyword">new</span> queue;</span><br><span class="line">    p-&gt;data = data;</span><br><span class="line">    p-&gt;next =  <span class="literal">NULL</span>;</span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    <span class="keyword">return</span> rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dequeue</span><span class="params">(queue *rear,queue *top, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;The queue is empty!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue *p = top-&gt;next;</span><br><span class="line">    top-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p==rear)</span><br><span class="line">    &#123;</span><br><span class="line">        rear = top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C++ STL队列queue</p></li></ol><p>包含头文件<code>#include&lt;queue&gt;</code>，定义方式<code>queue &lt;数据类型&gt; 队列名称</code></p><p>队列的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>()<span class="comment">// 如果队列为空返回true，否则返回false  </span></span><br><span class="line">q.<span class="built_in">size</span>() <span class="comment">// 返回队列中元素的个数  </span></span><br><span class="line">q.<span class="built_in">pop</span>()  <span class="comment">//删除队列首元素但不返回其值  </span></span><br><span class="line">q.<span class="built_in">front</span>()  <span class="comment">// 返回队首元素的值，但不删除该元素  </span></span><br><span class="line">q.<span class="built_in">push</span>(X) <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line">q.<span class="built_in">back</span>() <span class="comment">//返回队列尾元素的值，但不删除该元素</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> else </category>
          
      </categories>
      
      
        <tags>
            
            <tag> else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/2dds5.html"/>
      <url>/posts/2dds5.html</url>
      
        <content type="html"><![CDATA[<p>正则表达式描述了一种字符串的特征，通过这个特征与特定的函数配合，对其他的字符串进行匹配，查找，替换以及分割操作。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><h4 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：a-z，<span class="number">0</span>-<span class="number">9</span>，A-Z</span><br></pre></td></tr></table></figure><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在正则表达式中有特殊含义的字符</span><br><span class="line">\d:匹配任意一个十进制数字，等价于[<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\D:匹配任意一个出十进制数以外的字符，等价于[^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\s:匹配任意一个空白字符，如换行符，换页符，空格，回车符，垂直制表符，制表符</span><br><span class="line">\S:匹配除空白字符以外的任意一个字符</span><br><span class="line">\w:匹配一个数字或者字母或者下划线</span><br><span class="line">\W:匹配除字母下划线以及数字以外的任意一个字符</span><br><span class="line">. :匹配除换行符以外的任意一个字符</span><br><span class="line">* :匹配<span class="number">0</span>次，<span class="number">1</span>次，或者多次其前面的字符，放在*前面的字符可以出现<span class="number">0</span>次，<span class="number">1</span>次或者多次</span><br><span class="line">+ :匹配<span class="number">1</span>次或者多次前面的字符，放在+前面的字符可以出现<span class="number">1</span>次或者多次</span><br><span class="line">? :匹配<span class="number">0</span>次或者<span class="number">1</span>次前面的字符，放在+号前面的字符可以处以<span class="number">0</span>次或者<span class="number">1</span>次</span><br><span class="line">&#123;n&#125;:n为一个常数，表示前面字符恰好出现n次，放在&#123;n&#125;见面的字符正好为n次</span><br><span class="line">&#123;n,&#125;:表示前面字符至少出现n次，放在&#123;n,&#125;前面的字符至少出现n次</span><br><span class="line">&#123;n,m&#125;:n&lt;m,表示前面字符至少匹配n次，至多匹配m次</span><br><span class="line">^或者\A: 匹配字符串的开始位置</span><br><span class="line">$或者\A:匹配字符串的结束标志</span><br><span class="line">| :或，匹配两个或者以上的模式</span><br><span class="line">[]:匹配方括号里的任何一个字符，如[abc21]可以匹配a,b,c,<span class="number">2</span>,<span class="number">1</span>字符</span><br><span class="line">[^]；匹配除方括号里的字符外任意一个字符</span><br><span class="line">() :在括号中作为一个整体以便将其中的内容获取到，在正则表达式中，可以使用圆括号将某一段内容括起来，然后在括号后某处使用“\\数字”来代表括号内的内容</span><br></pre></td></tr></table></figure><h4 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般使用正斜线<span class="string">&quot;/&quot;</span>作为定界的字符</span><br><span class="line">除了字母，数字，和反斜线以外的字符都可以作为定界符。如：<span class="comment"># ! &#123;&#125; |</span></span><br><span class="line">定界符放置在正则表达式的起始位置，前后一致</span><br></pre></td></tr></table></figure><h4 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i:在和模式进行匹配时不区分大小写</span><br><span class="line">m:多行匹配，如果目标字符串中没有“\n”字符，或者模式中间没有出现^或者$,设置这个修饰符不产生影响</span><br><span class="line">    使用条件：</span><br><span class="line">    <span class="number">1.</span>目标字符串中必修包含<span class="string">&quot;\n&quot;</span>,在字符串中出现<span class="string">&quot;\n&quot;</span>就表示新的一行开始</span><br><span class="line">        <span class="number">2.</span>正则表达式中间必须出现^或者$ </span><br><span class="line"> U:禁止贪婪匹配</span><br><span class="line"> s:如果设置了该修正符，那么.将匹配所有的字符(包括换行符<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> else </category>
          
      </categories>
      
      
        <tags>
            
            <tag> else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机导论论文</title>
      <link href="/posts/234233.html"/>
      <url>/posts/234233.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="从cooook博客中摘抄的小东西"><a href="#从cooook博客中摘抄的小东西" class="headerlink" title="从cooook博客中摘抄的小东西"></a>从cooook博客中摘抄的小东西</h2><h3 id="1．缓冲区溢出漏洞"><a href="#1．缓冲区溢出漏洞" class="headerlink" title="1．缓冲区溢出漏洞"></a>1．缓冲区溢出漏洞</h3><p>在当前网络与分布式系统安全中，被广泛利用的50%以上都是缓冲区溢出，而缓冲区溢出中最危险的又是堆栈溢出。计算机程序一般都会使用到一些内存，或用作程序内部使用，或存放用户输入的数据，这样的内存一般称为缓冲区。举个例子，在我们C语言中经常会使用到一个函数getchar，这是从标准输入设备中读取一个字符，但当我们运行某些程序，<br>如 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">char a;</span><br><span class="line"><span class="keyword">while</span>(a=getchar())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,a);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数时，我们会发现，并不是我们输入一个字符，它便输出一个字符，而只有当我们按下换行符，才输出字符，事实上，键盘（输入设备）与计算机（主机）中间存在一个缓冲区，我们的输入存到了缓冲区，这个缓冲区采用行缓冲的方式（还有全缓冲与不带缓冲）遇到换行符时将缓冲区的内容发送给到主机，程序运行。缓冲区溢出简单的说就是计算机对接收的输入数据没有进行有效的检测（理想的情况是程序检查数据长度并不允许输入超过缓冲区长度的字符），向缓冲区内填充数据时超过了缓冲区本身的容量，而导致数据溢出到被分配空间之外的内存空间，使得溢出的数据覆盖了其他内存空间的数据。<br>在最初，人们并不那么重视数据安全的时候，出现了大量的溢出漏洞（C语言编译器对缓冲区长度不加以检测，C语言内部不对用户输入不做任何检查的gets，strcpy，strcat等函数），这也就导致了后来1988年Morris蠕虫病毒在互联网泛滥，造成近亿美元损失的灾难。</p><h3 id="2-栈溢出漏洞"><a href="#2-栈溢出漏洞" class="headerlink" title="2.栈溢出漏洞"></a>2.栈溢出漏洞</h3><p>再来说说栈溢出漏洞，简单来说，栈是一种具有特殊访问方式的存储空间，特殊之处在于先入栈的元素后出栈，且由高位向低位生长（栈顶指针%esp指向低位，栈底指针%ebp指向高位）程序的汇编中, 代码段和数据段分开储存, 数据段有栈储存(严谨来说内存栈并不在数据段), 代码段没有在代码栈中, 当运行到第i行时, eip指向第i+1行, eip的跳转可以实现函数的多种功能.这就不得不谈及到函数的调用方式了，编译器通过栈来对函数进行调用。在一个程序向栈中某个变量写入数据时，写入的字节数超过了这个变量本身所申请的字节数，这样，超过的部分字节溢出到相邻的栈中的变量，改变了它的值。这种溢出（改变了其他变量的值）轻则导致程序结果出错，重（溢出覆盖了返回地址，导致程序返回地址遭劫持）则可能会被黑客利用，轻而易举拿到你计算机的Shell<br>获取到对你计算机的掌控权。堆溢出更为复杂，但原理相似，所以略过不写。</p><p>Nodejs与Git的开发给前端，各种软件应用的开发提供了极大的便利，然而也因为不注重安全，产生了非常多的安全隐患，其中就关于web网络应用程序的攻击方法就层出不穷，SQL注入攻击，跨站脚本XSS攻击，跨站请求伪造等等。</p><h2 id="二：计算机硬件系统的结构以及工作原理"><a href="#二：计算机硬件系统的结构以及工作原理" class="headerlink" title="二：计算机硬件系统的结构以及工作原理"></a>二：计算机硬件系统的结构以及工作原理</h2><p>说到计算机硬件系统，就离不开哈佛结构与冯—诺依曼结构，在这里简要介绍冯诺依曼结构的组成。冯诺依曼结构由I/O设备（输入设备，输出设备），存储器，控制器，运算器五大结构组成<br><img src="https://i.loli.net/2020/02/12/ohpnDMGJjs1W8ef.png" alt="早期的冯·诺依曼结构图"> “早期的冯·诺依曼结构图”)</p><ul><li>1.总线<br>贯穿整个系统的是一组电子管道，称为总线，它负责携带信息字节并负责在各个部件间传递。例如说CPU就是通过三类总线—地址总线，控制总线和数据总线来进行对内存的读写。<br>CPU通过地址总线发出地址信息，通过控制总线发出读（写）命令，最后存储器将指定地址的内存单元中的数据通过数据发送到CPU（或者由CPU通过数据总线发送数据到指定地址的内存单元中存储下来），操作完成<br>总线是一根根导线的集合，因此总线的传输能力与导线的根数有关，导线根数越多，传输速度越快（例如说地址总线宽度为16，一次寻址能力即为8kb）</li><li>2.I/O设备<br>即输入输出设备，一切能与计算机进行数据传输的硬件都是I/O设备，最常见的输入设备有鼠标，键盘，软盘，光驱等等，常见输出设配有打印机，显示屏，硬盘等</li><li>3.主存<br>内存主要分为ROM（只读存储器）以及RAM（随机存储器）。RAM用于存放CPU使用的绝大部分程序和数据，但关机断电后数据会消失，因此一般用ROM来存储固定的系统软件以及字库，用RAM来存储操作系统，各种软件，输入以及输出数据，中间交换结果即与外存交换的信息。</li><li>4.处理器<br>中央处理器即CPU，一个典型的CPU由控制器，运算器，寄存器组成，各部分之间靠总线相连。当CPU运行一个程序，操作数从（通用）寄存器或者存储器运输到CPU中的算术逻辑部件（ALU），进行算数运算或者逻辑运算后的结果可以继续放入寄存器或者存储器中，<br>（GPRS）寄存器中的数据也可以通过MDR输送到存储器，反之亦然。操作产生的（存储在标志寄存器内的）标志信息（如计算产生的符号，是否溢出，是否进位）输送进入控制器影响后续程序的进行。每条指令都存在一个地址，要使这条的指令运行，要首先将地址要先送到 一个特定的寄存器—程序计数器PC，然后送到MAR（一个地址寄存器）中，操作数的地址（可能在通用寄存器组中）也要送入MAR中，再送入存储器。指令在送到控制器中执行时还要先放入IR（指令寄存器）中，从存储器中取来的指令先送到MDR，然后再到IR，再送到指令寄存器送到控制器，控制器控制，一个线程完成。由CPU和存储器组成主机，主机与I/O设备通过总线，I/O桥连接，输入输出。进程结束。CPU内部还存在Cache（高速缓存）来缓和中央处理器和主存储器之间速度不匹配的矛盾，提高计算机系统性能，这里就不加以赘述<br>![OI2XHQHI75$[[O]B_<code>T5OLQ](E:\myblog\hexo\markdown\修真四万年\其他\OI2XHQHI75$[[O]B_</code>T5OLQ.png)</li><li>5.程序的执行—开始执行程序（程序在执行前数据和指令已经放入存储器中，每条指令和每个数据都有地址，，指令按序存放（由OP，ADDR字段组成，程序的起始地址都放在PC中）<br>第一步：根据PC取指令<br>第二步：指令译码<br>第三步：取操作数<br>第四步：指令执行<br>第五步：回写结果<br>第六步：修改PC的值，执行下一条指令。 </li></ul><hr><h2 id="三：程序设计语言"><a href="#三：程序设计语言" class="headerlink" title="三：程序设计语言"></a>三：程序设计语言</h2><ul><li>1.第一代程序设计语言<br>机器语言是第一代程序设计语言，是机器指令的集合，作为最初的程序设计语言，机器语言靠0与1进行编程，可以直接运行在计算机上运行，但由于晦涩难懂和不易查错以及难以书写和阅读记忆，阻碍了整个行业的发展。于是接下来就出现了第二代程序设计语言—汇编语言</li><li>2.第二代程序设计语言<br>与机器语言相比，汇编语言用符号表示，不仅有利于程序员的理解记忆，而且为不同高级语言的不同编译器提供了通用的输出语言。但是机器却不能理解汇编语言，只有通过汇编器将汇编指令转化为机器指令，才能被机器识别，最终执行。但汇编语言也存在一些问题，在编写较复杂程序时，需要描写的细节过多，导致程序很长，同时由于不同机器的结构可能不同，汇编语言的可移植性得不到保障。为此，第三代程序设计语言，高级语言就出现了。汇编语言以及机器语言都是面向机器结构的语言，因此将他们都称机器语言。</li><li>3.第三代程序设计语言<br>面向过程的语言以及面向对象的高级语言，需要编译或者解释（不生成目标文件）才能执行。</li></ul><hr><p>参考文献及资料<br>《汇编语言》— 王爽<br>《深入理解计算机系统》—Randal E.Bryant , David R.O’Hallaron<br>《计算机科学概论》—J.Glenn Brookshear<br>《计算机系统基础》—袁春风</p>]]></content>
      
      
      <categories>
          
          <category> else </category>
          
      </categories>
      
      
        <tags>
            
            <tag> else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 简易教程</title>
      <link href="/posts/f00d7dec.html"/>
      <url>/posts/f00d7dec.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-简易教程"><a href="#Git-简易教程" class="headerlink" title="Git 简易教程"></a>Git 简易教程</h1><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Git 是目前世界上最先进的分布式版本控制系统，我们将用它来管理 PA 课设的版本更迭。</p><h3 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h3><p>工作区：在你的计算机上能看到的目录。</p><p>版本库：又名仓库，是新建版本库时在工作区下生成的一个隐藏目录<code>.git</code>（通过 <code>ls -a</code> 命令可以看到）。</p><p>暂存区：在 Git的版本库中，需要提交的文件修改通通放到暂存区，然后一次性提交暂存区的所有修改 。</p><p><img src="http://106.52.254.31/images/FAN1Et.jpg" alt="img"></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ol><li><p>安装 <code>git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#在当前路径下创建仓库</span></span><br></pre></td></tr></table></figure></li><li><p>添加文件到当前仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">&quot;write a readme file&quot;</span>    <span class="comment">#描述此次改动的说明信息</span></span><br></pre></td></tr></table></figure></li><li><p>查看提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>    <span class="comment">#每次改动之前提交的说明信息</span></span><br></pre></td></tr></table></figure></li><li><p>版本回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog <span class="comment">#先用 git log/reflog 查看commitID</span></span><br><span class="line">git reset --hard commitID</span><br><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上一个版本</span></span><br></pre></td></tr></table></figure></li><li><p>删除版本库中的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> readme.txt</span><br></pre></td></tr></table></figure></li><li><p>还原误删的工作区的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本</p></li><li><p>克隆远程库到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/your_github_name/your_hub.git <span class="comment">#https速度较慢</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:your_github_name/your_hub.git<span class="comment">#克隆在当前目录下</span></span><br></pre></td></tr></table></figure></li><li><p>本地仓库关联远程库</p><ul><li><p>创建<code>SSH Key</code>的秘钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span>    <span class="comment">#一开始配置的git的邮箱</span></span><br></pre></td></tr></table></figure><p>输完这条命令之后一路回车不需要设置各种密码，然后在<code>/root</code>目录下进入.ssh文件 ，<code>id_rsa</code>为私钥（不能泄露）， <code>id_ras.pub</code> 为公钥。到自己的 github 的 <code>Settings</code>下的<code>SSH and GPG keys</code>下添加自己的公钥即可。</p><p><img src="http://106.52.254.31/images/FAdnvF.png" alt="FAdnvF.png"></p></li><li><p>本地仓库关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:your_github_name/your_hub.git</span><br><span class="line">git push -u origin master    <span class="comment">#第一次推送master分支的所有内容</span></span><br><span class="line">git push origin master    <span class="comment">#推送最新修改</span></span><br></pre></td></tr></table></figure><p>如果这是一个非空仓库，需要<code>git pull origin master</code>，将远程的代码拉到本地。</p></li></ul></li><li><p>创建与合并分支</p><ul><li><p>查看所有分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>在 <code>master</code> 分支下创建 <code>pa1</code> 分支，然后切换到 <code>pa1</code> 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b pa1</span><br></pre></td></tr></table></figure><p>以上命令相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch pa1         <span class="comment">#创建分支pa1</span></span><br><span class="line">git checkout pa1    <span class="comment">#切换到分支pa1</span></span><br></pre></td></tr></table></figure><p>执行之后，目前在 <code>pa1</code> 分支上，可以用 <code>git branch</code> 命令查看。</p></li><li><p>在 <code>pa1</code> 分支下开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file</span><br><span class="line">git commit -m <span class="string">&#x27;...&quot;</span></span><br></pre></td></tr></table></figure><p>跟 <code>master</code> 下开发更迭并无两样。当前版本开发完成之后，切回到 <code>master</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></li><li><p>合并删除 <code>pa1</code> 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge pa1 </span><br><span class="line">git branch -d pa1</span><br></pre></td></tr></table></figure><p>对于不需要合并的分支可以通过 <code>git branch -D pa1</code> 删除。</p></li></ul></li><li><p>解决冲突</p><p>当分支 <code>pa1</code> 与 <code>master</code> 都有新的提交时，执行 <code>git merge pa1</code> 之后只能手动修改文件（尽管有提示不同分支的代码区别，但是依旧很麻烦），最好的做法就是避免这种情况的发生。对于 PA 项目管理，我们给出的建议是当新建分支之后，master 分支上就不要再做提交，直到子分支合并到 master 之后再提交到远程仓库。</p></li><li><p>推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v              <span class="comment">#查看远程信息库</span></span><br><span class="line">git remote remove origin <span class="comment">#删除origin远程库</span></span><br><span class="line">git push origin master      <span class="comment">#将master上版本推送到origin上</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
