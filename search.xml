<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Welcome to my Blog</title>
      <link href="/posts/3e6b40be.html"/>
      <url>/posts/3e6b40be.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> new page </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 简易教程</title>
      <link href="/posts/f00d7dec.html"/>
      <url>/posts/f00d7dec.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-简易教程"><a href="#Git-简易教程" class="headerlink" title="Git 简易教程"></a>Git 简易教程</h1><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Git 是目前世界上最先进的分布式版本控制系统，我们将用它来管理 PA 课设的版本更迭。</p><h3 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h3><p>工作区：在你的计算机上能看到的目录。</p><p>版本库：又名仓库，是新建版本库时在工作区下生成的一个隐藏目录<code>.git</code>（通过 <code>ls -a</code> 命令可以看到）。</p><p>暂存区：在 Git的版本库中，需要提交的文件修改通通放到暂存区，然后一次性提交暂存区的所有修改 。</p><p><img src="http://106.52.254.31/images/FAN1Et.jpg" alt="img"></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ol><li><p>安装 <code>git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#在当前路径下创建仓库</span></span><br></pre></td></tr></table></figure></li><li><p>添加文件到当前仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">&quot;write a readme file&quot;</span>    <span class="comment">#描述此次改动的说明信息</span></span><br></pre></td></tr></table></figure></li><li><p>查看提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>    <span class="comment">#每次改动之前提交的说明信息</span></span><br></pre></td></tr></table></figure></li><li><p>版本回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog <span class="comment">#先用 git log/reflog 查看commitID</span></span><br><span class="line">git reset --hard commitID</span><br><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上一个版本</span></span><br></pre></td></tr></table></figure></li><li><p>删除版本库中的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> readme.txt</span><br></pre></td></tr></table></figure></li><li><p>还原误删的工作区的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本</p></li><li><p>克隆远程库到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/your_github_name/your_hub.git <span class="comment">#https速度较慢</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:your_github_name/your_hub.git<span class="comment">#克隆在当前目录下</span></span><br></pre></td></tr></table></figure></li><li><p>本地仓库关联远程库</p><ul><li><p>创建<code>SSH Key</code>的秘钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span>    <span class="comment">#一开始配置的git的邮箱</span></span><br></pre></td></tr></table></figure><p>输完这条命令之后一路回车不需要设置各种密码，然后在<code>/root</code>目录下进入.ssh文件 ，<code>id_rsa</code>为私钥（不能泄露）， <code>id_ras.pub</code> 为公钥。到自己的 github 的 <code>Settings</code>下的<code>SSH and GPG keys</code>下添加自己的公钥即可。</p><p><img src="http://106.52.254.31/images/FAdnvF.png" alt="FAdnvF.png"></p></li><li><p>本地仓库关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:your_github_name/your_hub.git</span><br><span class="line">git push -u origin master    <span class="comment">#第一次推送master分支的所有内容</span></span><br><span class="line">git push origin master    <span class="comment">#推送最新修改</span></span><br></pre></td></tr></table></figure><p>如果这是一个非空仓库，需要<code>git pull origin master</code>，将远程的代码拉到本地。</p></li></ul></li><li><p>创建与合并分支</p><ul><li><p>查看所有分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>在 <code>master</code> 分支下创建 <code>pa1</code> 分支，然后切换到 <code>pa1</code> 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b pa1</span><br></pre></td></tr></table></figure><p>以上命令相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch pa1         <span class="comment">#创建分支pa1</span></span><br><span class="line">git checkout pa1    <span class="comment">#切换到分支pa1</span></span><br></pre></td></tr></table></figure><p>执行之后，目前在 <code>pa1</code> 分支上，可以用 <code>git branch</code> 命令查看。</p></li><li><p>在 <code>pa1</code> 分支下开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file</span><br><span class="line">git commit -m <span class="string">&#x27;...&quot;</span></span><br></pre></td></tr></table></figure><p>跟 <code>master</code> 下开发更迭并无两样。当前版本开发完成之后，切回到 <code>master</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></li><li><p>合并删除 <code>pa1</code> 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge pa1 </span><br><span class="line">git branch -d pa1</span><br></pre></td></tr></table></figure><p>对于不需要合并的分支可以通过 <code>git branch -D pa1</code> 删除。</p></li></ul></li><li><p>解决冲突</p><p>当分支 <code>pa1</code> 与 <code>master</code> 都有新的提交时，执行 <code>git merge pa1</code> 之后只能手动修改文件（尽管有提示不同分支的代码区别，但是依旧很麻烦），最好的做法就是避免这种情况的发生。对于 PA 项目管理，我们给出的建议是当新建分支之后，master 分支上就不要再做提交，直到子分支合并到 master 之后再提交到远程仓库。</p></li><li><p>推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v              <span class="comment">#查看远程信息库</span></span><br><span class="line">git remote remove origin <span class="comment">#删除origin远程库</span></span><br><span class="line">git push origin master      <span class="comment">#将master上版本推送到origin上</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
